"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const espree = __importStar(require("espree"));
const __1 = require("..");
const ESPREE_OPTIONS = {
    ecmaVersion: 2015,
    sourceType: 'module',
    ecmaFeatures: {
        jsx: true,
    },
};
/** This is not a valid test in the non eslint runtime */
describe.skip('closestOfType', () => {
    test('basic', () => {
        const program = espree.parse('<Hello name="world"></Hello>', ESPREE_OPTIONS);
        expect((0, __1.closestOfType)(program.body[0].expression.openingElement, 'JSXElement')).toHaveProperty('type', 'JSXElement');
    });
});
describe('hasJSXAttribute', () => {
    test('basic', () => {
        const { body } = espree.parse('<Hello name="world"></Hello>', ESPREE_OPTIONS);
        expect((0, __1.hasJSXAttribute)(body[0].expression, 'name')).to.be.true;
    });
    test('no attribute on jsx', () => {
        const { body } = espree.parse('<Hello></Hello>', ESPREE_OPTIONS);
        expect((0, __1.hasJSXAttribute)(body[0].expression, 'name')).to.be.false;
    });
    test('is not jsx', () => {
        const { body } = espree.parse('1 + 1', ESPREE_OPTIONS);
        expect((0, __1.hasJSXAttribute)(body[0].expression, 'name')).to.be.false;
    });
});
describe('insertImportSpecifier', () => {
    test('basic', () => {
        const { body } = espree.parse(`import x from 'place'`, ESPREE_OPTIONS);
        expect((0, __1.insertImportSpecifier)(body[0], 'name').toString()).eq(`import x, { name } from 'place'`);
    });
    test('no default', () => {
        const { body } = espree.parse(`import { nothing } from 'place'`, ESPREE_OPTIONS);
        expect((0, __1.insertImportSpecifier)(body[0], 'name').toString()).eq(`import { nothing, name } from 'place'`);
    });
    test('with alias', () => {
        const { body } = espree.parse(`import x from 'place'`, ESPREE_OPTIONS);
        expect((0, __1.insertImportSpecifier)(body[0], 'name', 'alias').toString()).eq(`import x, { name as alias } from 'place'`);
    });
});
describe('removeImportSpecifier', () => {
    test('no default', () => {
        const { body } = espree.parse(`import { nothing, name } from 'place'`, ESPREE_OPTIONS);
        expect((0, __1.removeImportSpecifier)(body[0], 'name').toString()).eq(`import { nothing } from 'place'`);
    });
    test('with alias', () => {
        const { body } = espree.parse(`import x, { name as alias } from 'place'`, ESPREE_OPTIONS);
        expect((0, __1.removeImportSpecifier)(body[0], 'name').toString()).eq(`import x from 'place'`);
    });
});
describe('insertJSXAttribute', () => {
    test('basic', () => {
        const { body } = espree.parse(`<Hello />`, ESPREE_OPTIONS);
        expect((0, __1.insertJSXAttribute)(body[0].expression, 'hello', (0, __1.literal)('world')).toString()).eq(`<Hello hello='world' />`);
    });
    test('with closing', () => {
        const { body } = espree.parse(`<Hello></Hello>`, ESPREE_OPTIONS);
        expect((0, __1.insertJSXAttribute)(body[0].expression, 'hello', (0, __1.literal)('world')).toString()).eq(`<Hello hello='world'></Hello>`);
    });
});
