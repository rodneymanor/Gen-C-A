/* table-head-cell.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./table-head-cell.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { useCallback, useState } from 'react';
import ArrowDownIcon from '@atlaskit/icon/core/arrow-down';
import ArrowUpIcon from '@atlaskit/icon/core/arrow-up';
import { Box, Flex, Pressable } from '@atlaskit/primitives/compiled';
import Tooltip from '@atlaskit/tooltip';
import { ASC } from '../internal/constants';
import { HeadCell } from '../styled/table-head';
const styles = {
  buttonWrapper: "_1e0c1txw _bfhk1j28 _4cvr1h6o _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _d0altlke",
  sortIconHiddenWrapper: "_1e0c1txw _tzy4idpf _bfhk1j28 _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66 _1h7hkb7n",
  sortIconVisibleWrapper: "_1e0c1txw _tzy4kb7n _bfhk1j28 _ca0q1b66 _u5f31b66 _n3td1b66 _19bv1b66",
  hideIconHeaderWrapper: "_tzy4idpf _18u010v4",
  visibleHeaderWrapper: "_tzy4kb7n _u5f31b66"
};
const headCellStyles = {
  headCellContainer: "_1e0c1txw _4cvr1h6o",
  text: "_11c81o8v _syaz1gjq _k48pmoej"
};
const TableHeadCell = ({
  content,
  inlineStyles,
  testId,
  isRanking,
  innerRef,
  isSortable,
  sortOrder,
  onClick,
  headCellId,
  activeSortButtonId,
  ascendingSortTooltip = 'Sort ascending',
  descendingSortTooltip = 'Sort descending',
  buttonAriaRoleDescription = 'Sort button',
  isIconOnlyHeader,
  ...rest
}) => {
  const [isHovered, setIsHovered] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const isActive = headCellId === activeSortButtonId || sortOrder !== undefined;
  const isSortIconVisible = isHovered || isActive || isFocused;
  const isVisibleIconOnlyHeader = isSortIconVisible && isIconOnlyHeader;
  const shouldRenderSortIcon = !isIconOnlyHeader || isSortIconVisible || isIconOnlyHeader && !isFocused;
  const handleFocus = useCallback(() => {
    setIsFocused === null || setIsFocused === void 0 ? void 0 : setIsFocused(true);
  }, [setIsFocused]);
  const handleBlur = useCallback(() => {
    setIsFocused === null || setIsFocused === void 0 ? void 0 : setIsFocused(false);
  }, [setIsFocused]);
  const handleMouseEnter = useCallback(() => {
    setIsHovered(true);
  }, [setIsHovered]);
  const handleMouseLeave = useCallback(() => {
    setIsHovered(false);
  }, [setIsHovered]);
  const visuallyRefreshedButton = /*#__PURE__*/React.createElement(Box, {
    xcss: headCellStyles.headCellContainer,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onFocus: handleFocus,
    onBlur: handleBlur
  }, /*#__PURE__*/React.createElement(Tooltip, {
    content: sortOrder === ASC ? ascendingSortTooltip : descendingSortTooltip
  }, /*#__PURE__*/React.createElement(Pressable, {
    onClick: onClick,
    xcss: styles.buttonWrapper,
    "aria-roledescription": buttonAriaRoleDescription
  }, /*#__PURE__*/React.createElement(Flex, {
    xcss: isVisibleIconOnlyHeader ? styles.hideIconHeaderWrapper : styles.visibleHeaderWrapper
  }, /*#__PURE__*/React.createElement("span", {
    className: ax([headCellStyles.text])
  }, content)), shouldRenderSortIcon && /*#__PURE__*/React.createElement(Flex, {
    xcss: isSortIconVisible ? styles.sortIconVisibleWrapper : styles.sortIconHiddenWrapper
  }, sortOrder === ASC ? /*#__PURE__*/React.createElement(ArrowUpIcon, {
    label: "",
    color: "var(--ds-text-subtle, #44546F)",
    testId: testId && `${testId}--up--icon`
  }) : /*#__PURE__*/React.createElement(ArrowDownIcon, {
    label: "",
    color: "var(--ds-text-subtle, #44546F)",
    testId: testId && `${testId}--down--icon`
  })))));
  return /*#__PURE__*/React.createElement(HeadCell
  // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
  , _extends({
    style: inlineStyles,
    testId: testId && `${testId}--head--cell`,
    ref: typeof innerRef !== 'string' ? innerRef : null // string refs must be discarded as LegacyRefs are not compatible with FC forwardRefs
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest, {
    isSortable: isSortable,
    sortOrder: sortOrder
  }), isSortable ? visuallyRefreshedButton : content);
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default TableHeadCell;