import React, { type ReactNode } from 'react';
import { type FieldConfig, type FieldSubscriber, type FieldSubscription, type FormApi, type FormState, type Unsubscribe } from 'final-form';
import { type OnSubmitHandler } from './types';
type DefaultValue<FieldValue> = (value?: FieldValue) => FieldValue;
type RegisterField = <FieldValue>(name: string, defaultValue: FieldValue | DefaultValue<FieldValue>, subscriber: FieldSubscriber<FieldValue>, subscription: FieldSubscription, config: FieldConfig<FieldValue>) => Unsubscribe;
type GetCurrentValue = <FormValues>(name: string) => FormValues[keyof FormValues] | undefined;
/**
 * __Form context__
 *
 * A form context creates a context for the field values and allows them to be accessed by the children.
 */
export declare const FormContext: React.Context<{
    registerField: RegisterField;
    getCurrentValue: GetCurrentValue;
    subscribe: FormApi["subscribe"];
}>;
/**
 * __Is disabled context__
 *
 * An is disabled context creates the context for when a value is disabled.
 */
export declare const IsDisabledContext: React.Context<boolean>;
interface FormChildrenProps {
    ref: React.RefObject<HTMLFormElement>;
    onSubmit: (event?: React.FormEvent<HTMLFormElement> | React.SyntheticEvent<HTMLElement>) => void;
    onKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
}
type FormChildrenArgs<FormValues> = {
    formProps: FormChildrenProps;
    disabled: boolean;
    dirty: boolean;
    submitting: boolean;
    getState: () => FormState<FormValues>;
    getValues: () => FormValues;
    setFieldValue: (name: string, value: any) => void;
    resetFieldState?: (name: string) => void;
    reset: (initialValues?: FormValues) => void;
};
type ExcludeReservedFormProps = {
    onKeyDown?: never;
    onSubmit?: never;
    ref?: never;
};
export interface FormProps<FormValues> {
    /**
     *  The contents rendered inside of the form. This is a function where the props will be passed from the form. The function props you can access are `dirty`, `submitting` and `disabled`.
     *  You can read more about these props in [react-final form documentation](https://final-form.org/docs/final-form/types/FormState).
     */
    children: ((args: FormChildrenArgs<FormValues>) => ReactNode) | (() => void) | ReactNode;
    /**
     * When `Form` renders JSX children directly and not using a function to
     * spread `formProps` manually, the properties in this `formProps` prop will
     * be spread on an internally rendered  HTML `form` element.
     */
    formProps?: {
        [x: string]: any;
    } & ExcludeReservedFormProps;
    /**
     *   Event handler called when the form is submitted. Fields must be free of validation errors.
     */
    onSubmit: OnSubmitHandler<FormValues>;
    /**
     *   Sets the form and its fields as disabled. Users cannot edit or focus on the fields.
     */
    isDisabled?: boolean;
    /**
     * A test identifier for the form element. This will be applied as `data-testid` attribute.
     */
    testId?: string;
}
export default function Form<FormValues extends Record<string, any> = {}>(props: FormProps<FormValues>): React.JSX.Element;
export {};
