/* messages.tsx generated by @compiled/babel-plugin v0.38.1 */
import "./messages.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { createContext, Fragment, useContext, useEffect, useState } from 'react';
import ErrorIcon from '@atlaskit/icon/core/migration/status-error--error';
import SuccessIcon from '@atlaskit/icon/core/migration/status-success--editor-success';
import { fg } from '@atlaskit/platform-feature-flags';
import { FieldId } from './field-id-context';

/**
 * API for the internal `<Message />` component. This is not public API.
 */

/**
 * Public API of the various message components.
 */

const messageStyles = null;
const messageAppearanceStyles = {
  default: "_syaz1wmz",
  error: "_syaze6sf",
  valid: "_syazy73q"
};
const iconWrapperStyles = {
  root: "_1e0c1txw _4t3i7vkz _4cvr1h6o"
};
const IconWrapper = ({
  children
}) => /*#__PURE__*/React.createElement("span", {
  className: ax([iconWrapperStyles.root])
}, children);
const messageIcons = {
  error: /*#__PURE__*/React.createElement(ErrorIcon, {
    LEGACY_margin: "0 -2px 0 0",
    color: "currentColor",
    LEGACY_size: "small",
    label: "error",
    size: "small"
  }),
  valid: /*#__PURE__*/React.createElement(SuccessIcon, {
    LEGACY_margin: "0 -2px 0 0",
    color: "currentColor",
    LEGACY_size: "small",
    label: "success",
    size: "small"
  })
};
const Message = ({
  children,
  appearance = 'default',
  fieldId,
  testId
}) => {
  const icon = messageIcons[appearance];
  const {
    isWrapper
  } = useContext(MessageWrapperContext);
  const [shouldRenderAfterDelay, setShouldRenderAfterDelay] = useState(false);

  // TODO: DSP-23603 - To clean up when removing "platform_dst_form_screenreader_message_fix" feature flag
  const isDelayRenderEnabled = fg('platform_dst_form_screenreader_message_fix') && !isWrapper;
  useEffect(() => {
    if (isDelayRenderEnabled) {
      // Only delay rendering if there is no wrapper and feature flag is enabled
      const timer = setTimeout(() => {
        setShouldRenderAfterDelay(true);
      }, 10);
      return () => clearTimeout(timer);
    }
  }, [isDelayRenderEnabled]);

  /**
   * The wrapping span is necessary to preserve spaces between children.
   * Otherwise the flex layout of the message will remove any whitespace
   * between children.
   *
   * If the child is just a string, this is not required and we can use one
   * less DOM element.
   */
  const content = typeof children === 'string' ? children : /*#__PURE__*/React.createElement("span", null, children);
  const childrenToRender = /*#__PURE__*/React.createElement(Fragment, null, icon && /*#__PURE__*/React.createElement(IconWrapper, null, icon), content);
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": testId,
    id: fieldId
    // For backwards compatability, if there is a wrapper, aria-live is not needed
    // TODO: DSP-23603 - To clean up when removing "platform_dst_form_screenreader_message_fix" feature flag
    ,
    "aria-live": !isWrapper ? 'polite' : undefined,
    className: ax(["_zulp12x7 _11c8dcr7 _1e0c1txw _1bah1q9y _1pfh1b66", messageAppearanceStyles[appearance]])
  }, isDelayRenderEnabled ? shouldRenderAfterDelay && childrenToRender : childrenToRender);
};

/**
 * __Helper message__
 *
 * A helper message tells the user what kind of input the field takes. For example, a helper message could be
 * 'Password should be more than 4 characters'
 *
 */
export const HelperMessage = ({
  children,
  testId
}) => /*#__PURE__*/React.createElement(FieldId.Consumer, null, fieldId => /*#__PURE__*/React.createElement(Message, {
  fieldId: fieldId ? `${fieldId}-helper` : undefined,
  testId: testId
}, children));

/**
 * __Error message__
 *
 * An error message is used to tell a user that the field input is invalid. For example, an error message could be
 * 'Invalid username, needs to be more than 4 characters'.
 *
 */
export const ErrorMessage = ({
  children,
  testId
}) => /*#__PURE__*/React.createElement(FieldId.Consumer, null, fieldId => /*#__PURE__*/React.createElement(Message, {
  appearance: "error",
  fieldId: fieldId ? `${fieldId}-error` : undefined,
  testId: testId
}, children));

/**
 * __Valid message__
 *
 * A valid message is used to tell a user that the field input is valid. For example,
 * a helper message could be 'Nice one, this username is available'.
 *
 */
export const ValidMessage = ({
  children,
  testId
}) => /*#__PURE__*/React.createElement(FieldId.Consumer, null, fieldId => /*#__PURE__*/React.createElement(Message, {
  appearance: "valid",
  fieldId: fieldId ? `${fieldId}-valid` : undefined,
  testId: testId
}, children));

/**
 * __Message wrapper context__
 *
 * A message wrapper context allows the children to check
 * if it is contained within the MessageWrapper.
 */
const MessageWrapperContext = /*#__PURE__*/createContext({
  isWrapper: false
});

/**
 * __Message wrapper __
 *
 * A message wrapper is used to allow assistive technologies, like screen readers, to announce error or
 * valid messages. This must be loaded into the DOM before the
 * ErrorMessage, ValidMessage is loaded. Otherwise, assistive technologies
 * may not render the message.
 *
 */
export const MessageWrapper = ({
  children
}) => {
  const contextValue = {
    isWrapper: true
  };
  return /*#__PURE__*/React.createElement(MessageWrapperContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement("div", {
    "aria-live": "polite",
    "data-testid": "message-wrapper"
  }, children));
};