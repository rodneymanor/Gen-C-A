/* messages.tsx generated by @compiled/babel-plugin v0.38.1 */
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import "./messages.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { createContext, Fragment, useContext, useEffect, useState } from 'react';
import ErrorIcon from '@atlaskit/icon/core/migration/status-error--error';
import SuccessIcon from '@atlaskit/icon/core/migration/status-success--editor-success';
import { fg } from '@atlaskit/platform-feature-flags';
import { FieldId } from './field-id-context';

/**
 * API for the internal `<Message />` component. This is not public API.
 */

/**
 * Public API of the various message components.
 */

var messageStyles = null;
var messageAppearanceStyles = {
  default: "_syaz1wmz",
  error: "_syaze6sf",
  valid: "_syazy73q"
};
var iconWrapperStyles = {
  root: "_1e0c1txw _4t3i7vkz _4cvr1h6o"
};
var IconWrapper = function IconWrapper(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement("span", {
    className: ax([iconWrapperStyles.root])
  }, children);
};
var messageIcons = {
  error: /*#__PURE__*/React.createElement(ErrorIcon, {
    LEGACY_margin: "0 -2px 0 0",
    color: "currentColor",
    LEGACY_size: "small",
    label: "error",
    size: "small"
  }),
  valid: /*#__PURE__*/React.createElement(SuccessIcon, {
    LEGACY_margin: "0 -2px 0 0",
    color: "currentColor",
    LEGACY_size: "small",
    label: "success",
    size: "small"
  })
};
var Message = function Message(_ref2) {
  var children = _ref2.children,
    _ref2$appearance = _ref2.appearance,
    appearance = _ref2$appearance === void 0 ? 'default' : _ref2$appearance,
    fieldId = _ref2.fieldId,
    testId = _ref2.testId;
  var icon = messageIcons[appearance];
  var _useContext = useContext(MessageWrapperContext),
    isWrapper = _useContext.isWrapper;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    shouldRenderAfterDelay = _useState2[0],
    setShouldRenderAfterDelay = _useState2[1];

  // TODO: DSP-23603 - To clean up when removing "platform_dst_form_screenreader_message_fix" feature flag
  var isDelayRenderEnabled = fg('platform_dst_form_screenreader_message_fix') && !isWrapper;
  useEffect(function () {
    if (isDelayRenderEnabled) {
      // Only delay rendering if there is no wrapper and feature flag is enabled
      var timer = setTimeout(function () {
        setShouldRenderAfterDelay(true);
      }, 10);
      return function () {
        return clearTimeout(timer);
      };
    }
  }, [isDelayRenderEnabled]);

  /**
   * The wrapping span is necessary to preserve spaces between children.
   * Otherwise the flex layout of the message will remove any whitespace
   * between children.
   *
   * If the child is just a string, this is not required and we can use one
   * less DOM element.
   */
  var content = typeof children === 'string' ? children : /*#__PURE__*/React.createElement("span", null, children);
  var childrenToRender = /*#__PURE__*/React.createElement(Fragment, null, icon && /*#__PURE__*/React.createElement(IconWrapper, null, icon), content);
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": testId,
    id: fieldId
    // For backwards compatability, if there is a wrapper, aria-live is not needed
    // TODO: DSP-23603 - To clean up when removing "platform_dst_form_screenreader_message_fix" feature flag
    ,
    "aria-live": !isWrapper ? 'polite' : undefined,
    className: ax(["_zulp12x7 _11c8dcr7 _1e0c1txw _1bah1q9y _1pfh1b66", messageAppearanceStyles[appearance]])
  }, isDelayRenderEnabled ? shouldRenderAfterDelay && childrenToRender : childrenToRender);
};

/**
 * __Helper message__
 *
 * A helper message tells the user what kind of input the field takes. For example, a helper message could be
 * 'Password should be more than 4 characters'
 *
 */
export var HelperMessage = function HelperMessage(_ref3) {
  var children = _ref3.children,
    testId = _ref3.testId;
  return /*#__PURE__*/React.createElement(FieldId.Consumer, null, function (fieldId) {
    return /*#__PURE__*/React.createElement(Message, {
      fieldId: fieldId ? "".concat(fieldId, "-helper") : undefined,
      testId: testId
    }, children);
  });
};

/**
 * __Error message__
 *
 * An error message is used to tell a user that the field input is invalid. For example, an error message could be
 * 'Invalid username, needs to be more than 4 characters'.
 *
 */
export var ErrorMessage = function ErrorMessage(_ref4) {
  var children = _ref4.children,
    testId = _ref4.testId;
  return /*#__PURE__*/React.createElement(FieldId.Consumer, null, function (fieldId) {
    return /*#__PURE__*/React.createElement(Message, {
      appearance: "error",
      fieldId: fieldId ? "".concat(fieldId, "-error") : undefined,
      testId: testId
    }, children);
  });
};

/**
 * __Valid message__
 *
 * A valid message is used to tell a user that the field input is valid. For example,
 * a helper message could be 'Nice one, this username is available'.
 *
 */
export var ValidMessage = function ValidMessage(_ref5) {
  var children = _ref5.children,
    testId = _ref5.testId;
  return /*#__PURE__*/React.createElement(FieldId.Consumer, null, function (fieldId) {
    return /*#__PURE__*/React.createElement(Message, {
      appearance: "valid",
      fieldId: fieldId ? "".concat(fieldId, "-valid") : undefined,
      testId: testId
    }, children);
  });
};

/**
 * __Message wrapper context__
 *
 * A message wrapper context allows the children to check
 * if it is contained within the MessageWrapper.
 */
var MessageWrapperContext = /*#__PURE__*/createContext({
  isWrapper: false
});

/**
 * __Message wrapper __
 *
 * A message wrapper is used to allow assistive technologies, like screen readers, to announce error or
 * valid messages. This must be loaded into the DOM before the
 * ErrorMessage, ValidMessage is loaded. Otherwise, assistive technologies
 * may not render the message.
 *
 */
export var MessageWrapper = function MessageWrapper(_ref6) {
  var children = _ref6.children;
  var contextValue = {
    isWrapper: true
  };
  return /*#__PURE__*/React.createElement(MessageWrapperContext.Provider, {
    value: contextValue
  }, /*#__PURE__*/React.createElement("div", {
    "aria-live": "polite",
    "data-testid": "message-wrapper"
  }, children));
};