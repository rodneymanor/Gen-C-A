import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "defaultValue", "id", "isDisabled", "label", "name"],
  _excluded2 = ["isInvalid", "isRequired"],
  _excluded3 = ["fieldProps"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import Field from './field';
/**
 * __Range field__
 *
 * A range field is where a user can submit a range input as a part of a form.
 *
 * - [Examples](https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#rangefield-reference)
 * - [Code](https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#rangefield-reference)
 * - [Usage](https://atlaskit.atlassian.com/packages/design-system/form/docs/fields#rangefield-reference)
 */
var RangeField = function RangeField(_ref) {
  var children = _ref.children,
    defaultValue = _ref.defaultValue,
    id = _ref.id,
    isDisabled = _ref.isDisabled,
    label = _ref.label,
    name = _ref.name,
    strippedProps = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Field, _extends({}, fg('platform_design-system-team_range-field-spread') ? {} : strippedProps, {
    defaultValue: defaultValue,
    id: id,
    isDisabled: isDisabled,
    label: label,
    name: name,
    transform: Number
  }), function (_ref2) {
    var _ref2$fieldProps = _ref2.fieldProps,
      isInvalid = _ref2$fieldProps.isInvalid,
      isRequired = _ref2$fieldProps.isRequired,
      fieldProps = _objectWithoutProperties(_ref2$fieldProps, _excluded2),
      rest = _objectWithoutProperties(_ref2, _excluded3);
    return (
      // isInvalid and isRequired are specifically invalid for range inputs
      children(_objectSpread({
        fieldProps: fieldProps
      }, rest))
    );
  });
};
export default RangeField;