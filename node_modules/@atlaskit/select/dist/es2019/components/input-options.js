/* input-options.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./input-options.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { useCallback, useMemo, useState } from 'react';
import CheckboxIcon from '@atlaskit/icon/glyph/checkbox';
import RadioIcon from '@atlaskit/icon/glyph/radio';
import PrimitiveSVGIcon from '@atlaskit/icon/svg';
import { fg } from '@atlaskit/platform-feature-flags';
const optionStyles = {
  default: "_1e0c1txw _4cvr1h6o _1bsb1osq _uiztglyw _18ql1j7p _vchhusvi _85i51b66 _1q511b66 _bozgpxbi _y4tiutpp _bfhk1j28 _16qs1kw7 _syaz1kw7 _1di61dty",
  focused: "_bfhk166n _16qsn8hf _112e1vrj",
  disabled: "_syaz15gi"
};

// state of the parent option

// the primary color represents the outer or background element
const getPrimaryColor = ({
  isActive,
  isDisabled,
  isFocused,
  isSelected
}) => {
  if (isDisabled) {
    return "var(--ds-background-disabled, #091E4208)";
  } else if (isSelected && isActive) {
    return "var(--ds-background-selected-bold-pressed, #09326C)";
  } else if (isActive) {
    return "var(--ds-background-selected-pressed, #85B8FF)";
  } else if (isFocused && isSelected) {
    return "var(--ds-background-selected-bold-hovered, #0055CC)";
  } else if (isFocused) {
    return "var(--ds-surface, #FFFFFF)";
  } else if (isSelected) {
    return "var(--ds-background-selected-bold, #0C66E4)";
  }
  return "var(--ds-background-neutral, #091E420F)";
};

// the secondary color represents the radio dot or checkmark
const getSecondaryColor = ({
  isDisabled,
  isSelected
}) => {
  if (isDisabled && isSelected) {
    return "var(--ds-text-disabled, #091E424F)";
  } else if (!isSelected) {
    return 'transparent';
  }
  return "var(--ds-surface, #FFFFFF)";
};
const iconStyles = {
  inherit: "_1u9j1r31 _1gqp1r31",
  default: "_1u9j1elr _1gqp1elr"
};
const baseIconStyles = null;
const baseOptionStyles = null;
const ControlOption = props => {
  const [isActive, setIsActive] = useState(false);
  const onMouseDown = useCallback(() => setIsActive(true), []);
  const onMouseUp = useCallback(() => setIsActive(false), []);
  const {
    Icon,
    children,
    innerProps,
    innerRef,
    cx,
    className,
    isDisabled,
    isSelected,
    isFocused
  } = props;
  const classNames = useMemo(() => cx({
    option: true,
    'option--is-disabled': isDisabled,
    'option--is-focused': isFocused,
    'option--is-selected': isSelected
  }, className), [cx, isDisabled, isFocused, isSelected, className]);
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([optionStyles.default, isFocused && optionStyles.focused, isDisabled && optionStyles.disabled, classNames]),
    ref: innerRef,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    onMouseLeave: onMouseUp
  }, innerProps), /*#__PURE__*/React.createElement("div", {
    className: ax(["_1e0c1txw _4cvr1h6o _1o9zidpf _y4ti1b66 _16cu892t _1xci892t _59qxe4h9 _8y3xe4h9", isSelected || isActive || isDisabled ? iconStyles.inherit : iconStyles.default])
  }, !!Icon ? /*#__PURE__*/React.createElement(Icon, {
    label: "",
    primaryColor: getPrimaryColor({
      isDisabled,
      isSelected,
      isFocused,
      isActive
    }),
    secondaryColor: getSecondaryColor({
      isDisabled,
      isSelected
    }),
    isFacadeDisabled: true
  }) : null), /*#__PURE__*/React.createElement("div", {
    className: ax(["_16jlkb7n _1reo15vq _1bto1l2s _o5721q9c"])
  }, children));
};
const NewCheckboxIcon = props =>
/*#__PURE__*/
// eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props, @atlaskit/design-system/no-custom-icons
React.createElement(PrimitiveSVGIcon, props, /*#__PURE__*/React.createElement("g", {
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("rect", {
  x: "5.5",
  y: "5.5",
  width: "13",
  height: "13",
  rx: "1.5",
  fill: "currentColor"
}), /*#__PURE__*/React.createElement("path", {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
  fill: "inherit"
})));
const NewRadioIcon = props =>
/*#__PURE__*/
// eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props, @atlaskit/design-system/no-custom-icons
React.createElement(PrimitiveSVGIcon, props, /*#__PURE__*/React.createElement("g", {
  fillRule: "evenodd"
}, /*#__PURE__*/React.createElement("circle", {
  cx: "12",
  cy: "12",
  r: "6.75",
  fill: "currentColor",
  strokeWidth: "1.5"
}), /*#__PURE__*/React.createElement("circle", {
  cx: "12",
  cy: "12",
  r: "3",
  fill: "inherit"
})));

/**
 * __Checkbox option__
 */
export const CheckboxOption = props => /*#__PURE__*/React.createElement(ControlOption, _extends({
  Icon:
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  fg('platform-visual-refresh-icons') ? NewCheckboxIcon :
  // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
  CheckboxIcon
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));

/**
 * __Radio option__
 */
export const RadioOption = props =>
/*#__PURE__*/
// TODO https://product-fabric.atlassian.net/browse/DSP-20769
React.createElement(ControlOption, _extends({
  Icon:
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  fg('platform-visual-refresh-icons') ? NewRadioIcon :
  // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
  RadioIcon
  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
}, props));