/* components.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["innerRef", "innerProps"];
import "./components.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { forwardRef } from 'react';
import SearchIcon from '@atlaskit/icon/core/migration/search--editor-search';
import { components } from '@atlaskit/react-select';
import { N40A } from '@atlaskit/theme/colors';
import { layers } from '@atlaskit/theme/constants';
import VisuallyHidden from '@atlaskit/visually-hidden';

// ==============================
// Styled Components
// ==============================

var menuDialogStyles = null;

/**
 * __Menu dialog__
 * Wrapper for PopupSelect component.
 */
export var MenuDialog = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
    id = _ref.id,
    style = _ref.style,
    testId = _ref.testId;
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    id: id,
    "data-testid": testId && "".concat(testId, "--menu"),
    className: ax(["_2rko12b0 _1pby16oo _bfhk1bhr _16qsu838"]),
    style: _objectSpread(_objectSpread({}, style), {}, {
      "--_z6sjud": ix("var(--ds-shadow-overlay, ".concat("0 0 0 1px ".concat(N40A, ", 0 4px 11px ").concat(N40A), ")"))
    })
  }, children);
});

// ==============================
// Custom Components
// ==============================

var dropdownStyles = null;
var DropdownIndicator = function DropdownIndicator() {
  return /*#__PURE__*/React.createElement("div", {
    className: ax(["_1bsbzwfg _12l2v77o _y3gn1h6o"])
  }, /*#__PURE__*/React.createElement(SearchIcon, {
    color: "currentColor",
    label: ""
  }));
};
var controlStyles = null;
var Control = function Control(_ref2) {
  var innerRef = _ref2.innerRef,
    innerProps = _ref2.innerProps,
    props = _objectWithoutProperties(_ref2, _excluded);
  return /*#__PURE__*/React.createElement("div", {
    ref: innerRef,
    className: ax(["_85i51b66 _1q51u2gc _y4tiu2gc _bozgu2gc"])
  }, /*#__PURE__*/React.createElement(components.Control, _extends({}, props, {
    innerProps: innerProps
  })));
};

/**
 * __Dummy control__
 * Overrides the default DummyControl component in Select.
 */
export var DummyControl = function DummyControl(props) {
  return /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(components.Control, props));
};

// NOTE `props` intentionally omitted from `Fragment`
var Menu = function Menu(_ref3) {
  var children = _ref3.children,
    innerProps = _ref3.innerProps;
  return /*#__PURE__*/React.createElement("div", innerProps, children);
};

// eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
var ClearIndicator = function ClearIndicator(props) {
  return /*#__PURE__*/React.createElement(components.ClearIndicator, props);
};
var MultiValueRemove = function MultiValueRemove(props) {
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    React.createElement(components.MultiValueRemove, props)
  );
};
export var defaultComponents = {
  Control: Control,
  DropdownIndicator: DropdownIndicator,
  Menu: Menu,
  ClearIndicator: ClearIndicator,
  MultiValueRemove: MultiValueRemove
};