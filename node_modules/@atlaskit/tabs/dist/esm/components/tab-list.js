/* tab-list.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./tab-list.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { Children, createRef, useCallback } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
import { B400, B500, N30, N500 } from '@atlaskit/theme/colors';
import { useTabList } from '../hooks';
import { TabContext } from '../internal/context';
var baseStyles = null;
var tabListStyles = null;
var tabListStylesOld = null;

/**
 * __TabList__
 *
 * A TabList groups `Tab` components together.
 *
 * - [Examples](https://atlassian.design/components/tabs/examples)
 * - [Code](https://atlassian.design/components/tabs/code)
 * - [Usage](https://atlassian.design/components/tabs/usage)
 */
var TabList = function TabList(_ref) {
  var children = _ref.children;
  var _useTabList = useTabList(),
    tabsId = _useTabList.tabsId,
    selected = _useTabList.selected,
    onChange = _useTabList.onChange;
  var ref = /*#__PURE__*/createRef();

  // Don't include any conditional children
  var childrenArray = Children.toArray(children).filter(Boolean);
  var length = childrenArray.length;
  var selectTabByIndex = useCallback(function (index) {
    var _ref$current;
    var newSelectedNode = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelector("[id='".concat(tabsId, "-").concat(index, "']"));
    if (newSelectedNode) {
      newSelectedNode.focus();
    }
    onChange(index);
  }, [tabsId, ref, onChange]);
  var onKeyDown = useCallback(function (e) {
    if (!['ArrowRight', 'ArrowLeft', 'Home', 'End'].includes(e.key)) {
      return;
    }

    // preventing horizontal or vertical scroll
    e.preventDefault();
    var lastTabIndex = length - 1;
    if (['Home', 'End'].includes(e.key)) {
      var _newSelected = e.key === 'Home' ? 0 : lastTabIndex;
      selectTabByIndex(_newSelected);
      return;
    }

    // We use aria-posinset so we don't rely on the selected variable
    // If we used the selected variable this would regenerate each time
    // and create an unstable reference
    var selectedIndex = parseInt(e.currentTarget.getAttribute('aria-posinset') || '0') - 1;
    var modifier = e.key === 'ArrowRight' ? 1 : -1;
    var newSelected = selectedIndex + modifier;
    if (newSelected < 0 || newSelected >= length) {
      // Cycling focus to move from last to first and from first to last
      newSelected = newSelected < 0 ? lastTabIndex : 0;
    }
    selectTabByIndex(newSelected);
  }, [length, selectTabByIndex]);

  // Memoized so the function isn't recreated each time
  var getTabWithContext = useCallback(function (_ref2) {
    var tab = _ref2.tab,
      isSelected = _ref2.isSelected,
      index = _ref2.index;
    return /*#__PURE__*/React.createElement(TabContext.Provider, {
      value: {
        onClick: function onClick() {
          return onChange(index);
        },
        onKeyDown: onKeyDown,
        'aria-setsize': length,
        role: 'tab',
        id: "".concat(tabsId, "-").concat(index),
        'aria-posinset': index + 1,
        'aria-selected': isSelected,
        'aria-controls': "".concat(tabsId, "-").concat(index, "-tab"),
        tabIndex: isSelected ? 0 : -1
      },
      key: index
    }, tab);
  }, [length, onKeyDown, onChange, tabsId]);
  return /*#__PURE__*/React.createElement("div", {
    role: "tablist",
    ref: ref,
    className: ax(["_1e0c1txw _kqswh2mm _85i5ze3t _1q51ze3t _y4tize3t _bozgze3t", fg('platform-component-visual-refresh') ? "_k48p1wq8 _ahbqx0bf _gpbcidpf _10vzidpf _1mmwidpf _15plidpf _7hip15vq _1fud15vq _bb0mh2mm _1quz1425 _rzxytlke _1ofh12x7 _pryi12x7 _1a85u2gc _rmpau2gc _1dze1l2s _1tms1q9c _fiizidpf _1xrmidpf _xyihidpf _166qidpf _1lzufiwc _24g71kw7 _140sidpf _lycustnw _15d8b3bt _1fztidpf _wd7eu2gc _1olcu2gc _1oaz1fgx _w9ewidpf _170tidpf _y1g1idpf _1nvfidpf _1b8dfiwc _1n121kw7 _7p9oidpf _o2e1stnw _16u6b3bt _1yk1idpf _1lbou2gc _1c9uu2gc _1i2072d1 _bppridpf _1mbxidpf _kn0bidpf _wsgdidpf _rsmz12s7 _1m0e1kw7 _93pdidpf _1sglstnw _1ksob3bt _1p9sidpf _1qa1u2gc _1jjcu2gc _fiemln51 _pascidpf _eid3idpf _zr3eidpf _fntnidpf _1mp41kw7 _kfgte4h9 _1cs8stnw _1russudh _1kt9b3bt _1fkridpf _1enwidpf _z5wtu2gc" : "_k48p1wq8 _ahbqx0bf _gpbcidpf _10vzidpf _1mmwidpf _15plidpf _7hip15vq _1fud15vq _bb0mh2mm _1quz1425 _rzxytlke _1ofh12x7 _pryi12x7 _1a85u2gc _rmpau2gc _1dze1l2s _1tms1q9c _fiizidpf _1xrmidpf _xyihidpf _166qidpf _17hylb4i _1lzuownz _24g71kw7 _140sidpf _lycustnw _15d8b3bt _1fztidpf _wd7eu2gc _1olcu2gc _1oaz1fgx _w9ewidpf _170tidpf _y1g1idpf _1nvfidpf _1jaklb4i _1b8downz _1n121kw7 _7p9oidpf _o2e1stnw _16u6b3bt _1yk1idpf _1lbou2gc _1c9uu2gc _1i2072d1 _bppridpf _1mbxidpf _kn0bidpf _wsgdidpf _9r9ulb4i _rsmz73hj _1m0e1kw7 _93pdidpf _1sglstnw _1ksob3bt _1p9sidpf _1qa1u2gc _1jjcu2gc _fiemln51 _pascidpf _eid3idpf _zr3eidpf _fntnidpf _rfx3lb4i _1mp41kw7 _kfgt1dm9 _1cs8stnw _1russudh _1kt9b3bt _1fkridpf _1enwidpf _z5wtu2gc"]),
    style: {
      "--_13a5t4u": ix("var(--ds-text-subtle, ".concat(N500, ")")),
      "--_kkbq40": ix("var(--ds-text-subtle, ".concat(B400, ")")),
      "--_y4kn7q": ix("3px solid ".concat("var(--ds-border, transparent)")),
      "--_71dbsd": ix("var(--ds-text, ".concat(B500, ")")),
      "--_1hfkvbo": ix("var(--ds-text-selected, ".concat(B400, ")")),
      "--_1c11uqn": ix("3px solid ".concat("var(--ds-border-selected, ".concat(B400, ")"))),
      "--_lvpq93": ix("var(--ds-border, ".concat(N30, ")")),
      "--_afs77": ix("var(--ds-border-width-selected, 2px)".concat(" solid ", "var(--ds-border, transparent)")),
      "--_1q7mpl4": ix("var(--ds-border-width-selected, 2px)".concat(" solid ", "var(--ds-border-selected, ".concat(B400, ")")))
    }
  }, childrenArray.map(function (child, index) {
    return getTabWithContext({
      tab: child,
      index: index,
      isSelected: index === selected
    });
  }));
};
export default TabList;