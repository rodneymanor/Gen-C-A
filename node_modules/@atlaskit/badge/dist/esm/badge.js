/* badge.tsx generated by @compiled/babel-plugin v0.36.1 */
import "./badge.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { memo } from 'react';
import { fg } from '@atlaskit/platform-feature-flags';
// eslint-disable-next-line @atlaskit/design-system/no-emotion-primitives -- to be migrated to @atlaskit/primitives/compiled â€“ go/akcss
import { Text } from '@atlaskit/primitives';
import { formatValue, formatValueWithNegativeSupport } from './internal/utils';
var boxStyles = {
  root: "_2rko1mok _18zr12x7 _1e0c116y _1o9zidpf _1kz6184x",
  added: "_bfhk1bay",
  default: "_bfhklecj",
  important: "_bfhk1v7l",
  primary: "_bfhkomb0",
  primaryInverted: "_bfhkvuon",
  removed: "_bfhktaeo"
};

/**
 * Visual refresh colors.
 * Hardcoded hex colors are used as the they should not change based on theme, and there are no appropriate color tokens.
 *
 * Using separate variables as opposed to an object, to comply with UI styling standard
 * https://atlassian.design/components/eslint-plugin-ui-styling-standard/no-unsafe-values/usage#object-access
 */
var neutral300 = '#DDDEE1';
var red300 = '#FD9891';
var blue300 = '#8FB8F6';
var neutral1000 = '#292A2E';
var styles = {
  root: "_2rkolb4i _18zr1b66 _1e0c116y _vchhusvi _1ul91ejb _1bah1h6o _1o9zidpf _1kz6184x",
  added: "_bfhkmv6i _syaz1fxt",
  default: "_bfhk1fkg _syazwwip",
  important: "_bfhk1366 _syazwwip",
  primary: "_bfhk1ymo _syazwwip",
  primaryInverted: "_bfhkvuon _syaz1e6v",
  removed: "_bfhk1gly _syaz1fxt"
};
var badgeValueWithNegativeNumberSupported = function badgeValueWithNegativeNumberSupported(children, max) {
  // Use this flag for allowing negative values(numbers) in badge component when custom number field is used
  if (fg('platform_ken_2029_negative_numbers_badge')) {
    return typeof children === 'number' && typeof max === 'number' ? formatValueWithNegativeSupport(children, max) : children;
  }
  return typeof children === 'number' && max ? formatValue(children, max) : children;
};

/**
 * __Badge__
 *
 * This component gives you the full badge functionality and automatically formats the number you provide in \`children\`.
 *
 * - [Examples](https://atlassian.design/components/badge/examples)
 * - [Code](https://atlassian.design/components/badge/code)
 * - [Usage](https://atlassian.design/components/badge/usage)
 */
var Badge = /*#__PURE__*/memo(function Badge(_ref) {
  var _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    _ref$children = _ref.children,
    children = _ref$children === void 0 ? 0 : _ref$children,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 99 : _ref$max,
    style = _ref.style,
    testId = _ref.testId;
  // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
  if (fg('platform-component-visual-refresh')) {
    return /*#__PURE__*/React.createElement("span", {
      "data-testid": testId,
      style: {
        background: style === null || style === void 0 ? void 0 : style.backgroundColor,
        color: style === null || style === void 0 ? void 0 : style.color
      },
      className: ax([styles.root, styles[appearance]])
    }, /*#__PURE__*/React.createElement(Text, {
      size: "small",
      align: "center",
      color: "inherit"
    }, badgeValueWithNegativeNumberSupported(children, max)));
  }
  return /*#__PURE__*/React.createElement("span", {
    "data-testid": testId,
    style: {
      backgroundColor: style === null || style === void 0 ? void 0 : style.backgroundColor,
      color: style === null || style === void 0 ? void 0 : style.color
    },
    className: ax([boxStyles.root, boxStyles[appearance]])
  }, /*#__PURE__*/React.createElement(Text, {
    size: "UNSAFE_small",
    align: "center",
    color: style !== null && style !== void 0 && style.color ? 'inherit' : textColors[appearance]
  }, badgeValueWithNegativeNumberSupported(children, max)));
});
Badge.displayName = 'Badge';
export default Badge;
var textColors = {
  added: 'color.text.success',
  default: 'color.text',
  important: 'color.text.inverse',
  primary: 'color.text.inverse',
  primaryInverted: 'color.text.brand',
  removed: 'color.text.danger'
};