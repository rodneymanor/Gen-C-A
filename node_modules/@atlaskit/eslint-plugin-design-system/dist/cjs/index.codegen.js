"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = exports.meta = exports.default = exports.configs = void 0;
Object.defineProperty(exports, "rules", {
  enumerable: true,
  get: function get() {
    return _index.rules;
  }
});
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _allFlat = _interopRequireDefault(require("./presets/all-flat.codegen"));
var _all = _interopRequireDefault(require("./presets/all.codegen"));
var _recommendedFlat = _interopRequireDefault(require("./presets/recommended-flat.codegen"));
var _recommended = _interopRequireDefault(require("./presets/recommended.codegen"));
var _index = require("./rules/index.codegen");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /**
 * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::1ca7a384145f3bf3577ede9b88907a52>>
 * @codegenCommand yarn workspace @atlaskit/eslint-plugin-design-system codegen
 */
// this uses require because not all node versions this package supports use the same import assertions/attributes
// eslint-disable-next-line import/no-extraneous-dependencies
var pkgJson = require('@atlaskit/eslint-plugin-design-system/package.json');
var version = pkgJson.version,
  name = pkgJson.name;
var meta = exports.meta = {
  name: name,
  version: version
};
var plugin = exports.plugin = {
  meta: meta,
  rules: _index.rules,
  configs: {
    all: _all.default,
    'all/flat': _objectSpread(_objectSpread({}, _allFlat.default), {}, {
      plugins: _objectSpread(_objectSpread({}, _allFlat.default.plugins), {}, {
        get '@atlaskit/design-system'() {
          return plugin;
        }
      })
    }),
    recommended: _recommended.default,
    'recommended/flat': _objectSpread(_objectSpread({}, _recommendedFlat.default), {}, {
      plugins: _objectSpread(_objectSpread({}, _recommendedFlat.default.plugins), {}, {
        get '@atlaskit/design-system'() {
          return plugin;
        }
      })
    })
  }
};
var configs = exports.configs = plugin.configs;
var _default = exports.default = plugin;