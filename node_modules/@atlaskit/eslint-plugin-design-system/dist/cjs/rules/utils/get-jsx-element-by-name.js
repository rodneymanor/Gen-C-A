"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getJsxElementByName = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _eslintCodemodUtils = require("eslint-codemod-utils");
/**
 * Given a component name finds its JSX usage
 */
var getJsxElementByName = exports.getJsxElementByName = function getJsxElementByName(componentName, scope) {
  var _variableDeclaration$;
  var variableDeclaration = scope.variables.find(function (v) {
    return v.name === componentName;
  });
  if (!variableDeclaration) {
    return;
  }

  // length here should be exactly 2 to indicate only two references:
  // one being the variable declaration itself
  // second being the JSX call site
  // we might consider handling multiple local JSX call sites in the future
  // but "this is good enough for now"™️
  if (variableDeclaration.references.length !== 2) {
    return;
  }
  var jsxUsage = (_variableDeclaration$ = variableDeclaration.references[1]) === null || _variableDeclaration$ === void 0 ? void 0 : _variableDeclaration$.identifier;
  var _variableDeclaration$2 = variableDeclaration.references.map(function (ref) {
      return ref === null || ref === void 0 ? void 0 : ref.identifier;
    }),
    _variableDeclaration$3 = (0, _slicedToArray2.default)(_variableDeclaration$2, 2),
    firstIdentifier = _variableDeclaration$3[0],
    secondIdentifier = _variableDeclaration$3[1];
  // Check if the first reference is a JSXOpeningElement and the second is not or vice versa
  if ((0, _eslintCodemodUtils.isNodeOfType)(firstIdentifier, 'JSXIdentifier') && !(0, _eslintCodemodUtils.isNodeOfType)(secondIdentifier, 'JSXIdentifier')) {
    jsxUsage = firstIdentifier;
  } else if ((0, _eslintCodemodUtils.isNodeOfType)(secondIdentifier, 'JSXIdentifier') && !(0, _eslintCodemodUtils.isNodeOfType)(firstIdentifier, 'JSXIdentifier')) {
    jsxUsage = secondIdentifier;
  } else {
    return;
  }
  if (!(0, _eslintCodemodUtils.isNodeOfType)(jsxUsage, 'JSXIdentifier')) {
    return;
  }
  var jsxOpeningElement = jsxUsage.parent;
  if (!(0, _eslintCodemodUtils.isNodeOfType)(jsxOpeningElement, 'JSXOpeningElement')) {
    return;
  }
  return jsxOpeningElement;
};