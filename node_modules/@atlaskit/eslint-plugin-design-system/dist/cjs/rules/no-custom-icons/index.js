"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _createRule = require("../utils/create-rule");
var _errorBoundary = require("../utils/error-boundary");
var _hasProp = require("./checks/has-prop");
var _isFromImportSource = require("./checks/is-from-import-source");
var rule = (0, _createRule.createLintRule)({
  meta: {
    name: 'no-custom-icons',
    type: 'problem',
    docs: {
      description: 'Enforces custom glyph icons are used.',
      recommended: false,
      severity: 'warn'
    },
    schema: [{
      type: 'object',
      properties: {
        centralLocation: {
          type: 'string'
        },
        failSilently: {
          type: 'boolean'
        }
      },
      additionalProperties: false
    }],
    messages: {
      noCustomIcons: "Custom icons/svgs from {{importSource}} are no longer supported. Migrate to an icon from '@atlaskit/(icon-labs|icon/core|icon/utility)'{{locationMessage}}.\n[Migration guide](https://hello.atlassian.net/wiki/spaces/DST/pages/3748692796/New+ADS+iconography+-+Code+migration+guide)."
    }
  },
  create: function create(context) {
    var _context$options$;
    var isIconSvg = (0, _isFromImportSource.createIsFromImportSourceFor)('@atlaskit/icon/svg');
    var isIconBase = (0, _isFromImportSource.createIsFromImportSourceFor)('@atlaskit/icon', '@atlaskit/icon/base');

    // TODO: JFP-2823 - this type cast was added due to Jira's ESLint v9 migration
    var _ref = (_context$options$ = context.options[0]) !== null && _context$options$ !== void 0 ? _context$options$ : {},
      _ref$centralLocation = _ref.centralLocation,
      centralLocation = _ref$centralLocation === void 0 ? '' : _ref$centralLocation,
      _ref$failSilently = _ref.failSilently,
      failSilently = _ref$failSilently === void 0 ? false : _ref$failSilently;
    function checkNode(node) {
      isIconBase.importDeclarationHook(node);
      isIconSvg.importDeclarationHook(node);
    }
    var locationMessage = centralLocation ? ", move the icon to '".concat(centralLocation, "', or, if it's a third party logo, migrate to a standard <svg> element with a `label`.") : '';
    return (0, _errorBoundary.errorBoundary)({
      JSXElement: function JSXElement(node) {
        var isSvg = isIconSvg(node);
        var isBase = isIconBase(node);
        // Not an icon import
        if (!isSvg && (!isBase || !(0, _hasProp.hasProp)(node, 'glyph'))) {
          return;
        }
        var importSource = '';
        if (isSvg) {
          importSource = isIconSvg.getImportSource(node);
        } else if (isBase) {
          importSource = isIconBase.getImportSource(node);
        }
        context.report({
          node: node.openingElement,
          messageId: 'noCustomIcons',
          data: {
            importSource: importSource,
            locationMessage: locationMessage
          }
        });
      },
      ImportDeclaration: checkNode
    }, failSilently);
  }
});
var _default = exports.default = rule;