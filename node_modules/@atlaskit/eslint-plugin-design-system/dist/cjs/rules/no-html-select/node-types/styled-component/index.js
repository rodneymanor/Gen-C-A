"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledComponent = void 0;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _contextCompat = require("@atlaskit/eslint-utils/context-compat");
var _getJsxElementByName2 = require("../../../utils/get-jsx-element-by-name");
var _getStyledComponentCall = require("../../../utils/get-styled-component-call");
var _supported = require("../supported");
/* eslint-disable @repo/internal/react/require-jsdoc */

var StyledComponent = exports.StyledComponent = {
  lint: function lint(node, _ref) {
    var _getJsxElementByName;
    var context = _ref.context;
    if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'CallExpression') || !(0, _eslintCodemodUtils.isNodeOfType)(node.callee, 'MemberExpression') || !(0, _eslintCodemodUtils.isNodeOfType)(node.callee.object, 'Identifier') || !(0, _eslintCodemodUtils.isNodeOfType)(node.callee.property, 'Identifier')) {
      return;
    }
    var styles = (0, _getStyledComponentCall.getStyledComponentCall)(node);
    var elementName = node.callee.property.name;
    if (!styles || !(0, _eslintCodemodUtils.isNodeOfType)(styles.id, 'Identifier')) {
      return;
    }
    var jsxElement = (_getJsxElementByName = (0, _getJsxElementByName2.getJsxElementByName)(styles.id.name, (0, _contextCompat.getScope)(context, node))) === null || _getJsxElementByName === void 0 ? void 0 : _getJsxElementByName.parent;
    if (!jsxElement) {
      // If there's no JSX element, we can't determine if it's being used as an select or not
      return;
    }
    if (jsxElement && !(0, _supported.isSupportedForLint)(jsxElement, elementName)) {
      return;
    }
    context.report({
      node: styles,
      messageId: 'noHtmlSelect',
      data: {
        name: node.callee.property.name
      }
    });
  }
};