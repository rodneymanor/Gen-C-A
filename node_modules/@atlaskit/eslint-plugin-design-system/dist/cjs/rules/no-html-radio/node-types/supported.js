"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSupportedForLint = isSupportedForLint;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var ast = _interopRequireWildcard(require("../../../ast-nodes"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var supportedElements = [{
  name: 'input',
  attributes: [{
    name: 'type',
    values: ['radio']
  }]
}];

/**
 * Determines if the given JSX element is a supported element to lint with this rule.
 */
function isSupportedForLint(jsxNode, elementName) {
  if (!(0, _eslintCodemodUtils.isNodeOfType)(jsxNode, 'JSXElement')) {
    return false;
  }

  // Allow passing in the element name because the jsxNode doesn't
  // represent the element name with styled components
  var elName = elementName || ast.JSXElement.getName(jsxNode);
  if (!elName) {
    return false;
  }

  // Only check native HTML elements, not components
  if (elName[0] !== elName[0].toLowerCase()) {
    return false;
  }
  var supportedElement = supportedElements.find(function (_ref) {
    var name = _ref.name;
    return name === elName;
  });
  if (!supportedElement) {
    supportedElement = supportedElements.find(function (_ref2) {
      var name = _ref2.name;
      return name === '*';
    });
  }
  if (!supportedElement) {
    return false;
  }

  // Check if the element has any attributes that are not supported
  var attributes = ast.JSXElement.getAttributes(jsxNode);
  if (supportedElement.attributes && !supportedElement.attributes.every(function (_ref3) {
    var name = _ref3.name,
      values = _ref3.values;
    return attributes.some(function (attribute) {
      if (attribute.type === 'JSXSpreadAttribute') {
        return false;
      }
      var isMatchingName = attribute.name.name === name;
      var isMatchingValues = values && attribute.value && attribute.value.type === 'Literal' && typeof attribute.value.value === 'string' && (values === null || values === void 0 ? void 0 : values.includes(attribute.value.value));
      return isMatchingName && isMatchingValues;
    });
  })) {
    return false;
  }
  return true;
}