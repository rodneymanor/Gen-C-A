"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _ruleMeta = _interopRequireDefault(require("../ensure-design-token-usage/rule-meta"));
var _createRule = require("../utils/create-rule");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var rule = (0, _createRule.createLintRule)({
  meta: _objectSpread(_objectSpread({}, _ruleMeta.default), {}, {
    name: 'ensure-design-token-usage/preview',
    deprecated: true,
    replacedBy: ['@atlaskit/design-system/use-tokens-space'],
    docs: _objectSpread(_objectSpread({}, _ruleMeta.default.docs), {}, {
      description: 'Enforces usage of pre-release design tokens rather than hard-coded values.',
      recommended: false,
      severity: 'warn'
    })
  }),
  create: function create() {
    /**
     * We can't just outright delete the ESLint rule, since:
     * ```
     * // eslint-disable @eslint-plugin/design-system/ensure-design-token-usage/preview
     * ```
     * will cause CI to fail if the rule definition doesn't exist. So, instead
     * we can change the implementation of the rule so that it never reports.
     */
    return {};
  }
});
var _default = exports.default = rule;