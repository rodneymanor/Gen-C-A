"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateJSXAttributeByName = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _eslintCodemodUtils = require("eslint-codemod-utils");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var updateJSXAttributeByName = exports.updateJSXAttributeByName = function updateJSXAttributeByName(oldName, newName, node, fixer) {
  var openingElement = node.openingElement;
  var attributes = openingElement.attributes;
  var existingAttribute = attributes.find(function (attr) {
    if (attr.type !== 'JSXAttribute') {
      return false;
    }
    if (attr.name.type !== 'JSXIdentifier') {
      return false;
    }
    return attr.name.name === oldName;
  });
  if (!existingAttribute || existingAttribute.type !== 'JSXAttribute') {
    return [];
  }
  var newAttribute = (0, _eslintCodemodUtils.jsxAttribute)(_objectSpread(_objectSpread({}, existingAttribute), {}, {
    name: (0, _eslintCodemodUtils.jsxIdentifier)(newName)
  }));
  return fixer.replaceText(existingAttribute, newAttribute.toString());
};