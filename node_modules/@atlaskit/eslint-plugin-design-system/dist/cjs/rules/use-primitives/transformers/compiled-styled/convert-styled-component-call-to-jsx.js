"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertStyledComponentToXcss = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _cssToXcss = require("../css-to-xcss");
/**
 * Transforms a variable like:
 * ```
 * const MyComponent = styled.div({
 *   padding: '8px',
 * })
 * ```
 * to
 * ```
 * const myComponentStyles = xcss({
 *   padding: 'space.100',
 * })
 * ```
 */
var convertStyledComponentToXcss = exports.convertStyledComponentToXcss = function convertStyledComponentToXcss(styles, newStylesVariableName, fixer) {
  var fixes = [];

  // renames the variable from MyComponent to myComponentStyles
  fixes.push(fixer.replaceText(styles.id, newStylesVariableName));

  // renames the function call from styled.<tag> to xcss
  if (styles.init && (0, _eslintCodemodUtils.isNodeOfType)(styles.init, 'CallExpression')) {
    fixes.push(fixer.replaceText(styles.init.callee, 'xcss'));
  }

  // converts CSS values to XCSS-compatible tokens
  if (styles.init && (0, _eslintCodemodUtils.isNodeOfType)(styles.init, 'CallExpression')) {
    var objectExpression = styles.init.arguments[0];
    if ((0, _eslintCodemodUtils.isNodeOfType)(objectExpression, 'ObjectExpression')) {
      fixes.push.apply(fixes, (0, _toConsumableArray2.default)((0, _cssToXcss.styledObjectToXcssTokens)(objectExpression, fixer)));
    }
  }
  return fixes;
};