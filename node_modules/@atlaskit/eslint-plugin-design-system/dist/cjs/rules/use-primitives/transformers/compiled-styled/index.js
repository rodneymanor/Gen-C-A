"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompiledStyled = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _contextCompat = require("@atlaskit/eslint-utils/context-compat");
var ast = _interopRequireWildcard(require("../../../../ast-nodes"));
var _utils = require("../../utils");
var _validateStyles = require("../../utils/validate-styles");
var _convertJsxCallSite = require("./convert-jsx-call-site");
var _convertStyledComponentCallToJsx = require("./convert-styled-component-call-to-jsx");
var _findValidJsxUsageToTransform = require("./find-valid-jsx-usage-to-transform");
var _findValidStyledComponentCall = require("./find-valid-styled-component-call");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/* eslint-disable @repo/internal/react/require-jsdoc */

var CompiledStyled = exports.CompiledStyled = {
  lint: function lint(node, _ref) {
    var context = _ref.context,
      config = _ref.config;
    if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'CallExpression')) {
      return;
    }

    // Check whether all criteria needed to make a transformation are met
    var _CompiledStyled$_chec = CompiledStyled._check(node, {
        context: context,
        config: config
      }),
      success = _CompiledStyled$_chec.success,
      refs = _CompiledStyled$_chec.refs;
    if (!success || !refs) {
      return;
    }
    context.report({
      node: refs.styles,
      messageId: 'preferPrimitivesBox',
      suggest: [{
        desc: "Convert ".concat(ast.JSXElement.getName(refs.jsxElement), " to Box"),
        fix: CompiledStyled._fix(refs, context)
      }]
    });
  },
  _check: function _check(node, _ref2) {
    var context = _ref2.context,
      config = _ref2.config;
    if (!config.patterns.includes('compiled-styled-object')) {
      return {
        success: false
      };
    }
    if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'CallExpression')) {
      return {
        success: false
      };
    }
    var styledComponentVariableRef = (0, _findValidStyledComponentCall.findValidStyledComponentCall)(node);
    if (!styledComponentVariableRef || !(0, _eslintCodemodUtils.isNodeOfType)(styledComponentVariableRef.id, 'Identifier') || !(config.patterns.includes('string-style-property-fix') ? (0, _validateStyles.validateStyles)(node, config) : (0, _utils.isValidCssPropertiesToTransform)(node, config))) {
      return {
        success: false
      };
    }
    var anyOrder = config.patterns.includes('jsx-order-fix');
    var styledComponentJsxRef = (0, _findValidJsxUsageToTransform.findValidJsxUsageToTransform)(styledComponentVariableRef.id.name, (0, _contextCompat.getScope)(context, node), anyOrder);
    if (!styledComponentJsxRef) {
      return {
        success: false
      };
    }
    if (!(0, _eslintCodemodUtils.isNodeOfType)(styledComponentJsxRef.parent, 'JSXElement')) {
      return {
        success: false
      };
    }
    var importDeclaration = ast.Root.findImportsByModule((0, _contextCompat.getSourceCode)(context).ast.body, '@atlaskit/primitives');

    // If there is more than one `@atlaskit/primitives` import, then it becomes difficult to determine which import to transform
    if (importDeclaration.length > 1) {
      return {
        success: false
      };
    }
    return {
      success: true,
      refs: {
        styles: styledComponentVariableRef,
        jsxElement: styledComponentJsxRef.parent
      }
    };
  },
  /**
   * All required validation steps have been taken care of before this
   * transformer is called, so it just goes ahead providing all necessary fixes
   */
  _fix: function _fix(refs, context) {
    return function (fixer) {
      // generates the new variable name: MyComponent -> myComponentStyles
      var calculatedStylesVariableName = (0, _eslintCodemodUtils.isNodeOfType)(refs.styles.id, 'Identifier') && "".concat(refs.styles.id.name.replace(refs.styles.id.name[0], refs.styles.id.name[0].toLowerCase()), "Styles");
      if (!calculatedStylesVariableName) {
        return [];
      }
      var importFixes = ast.Root.upsertNamedImportDeclaration({
        module: '@atlaskit/primitives',
        specifiers: ['Box', 'xcss']
      }, context, fixer);
      var stylesFixes = (0, _convertStyledComponentCallToJsx.convertStyledComponentToXcss)(refs.styles, calculatedStylesVariableName, fixer);
      var jsxFixes = (0, _convertJsxCallSite.convertJsxCallSite)(refs.jsxElement, calculatedStylesVariableName, fixer);
      return [importFixes].concat((0, _toConsumableArray2.default)(stylesFixes), (0, _toConsumableArray2.default)(jsxFixes)).filter(function (fix) {
        return Boolean(fix);
      }); // Some of the transformers can return arrays with undefined, so filter them out
    };
  }
};