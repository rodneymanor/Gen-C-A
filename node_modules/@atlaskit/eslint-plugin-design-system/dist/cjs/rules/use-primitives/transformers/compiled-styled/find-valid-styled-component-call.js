"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findValidStyledComponentCall = void 0;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var supported = _interopRequireWildcard(require("./supported"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 * returns a variable reference if preconditions are favourable for
 * the transformation to proceed, undefined otherwise.
 */

var findValidStyledComponentCall = exports.findValidStyledComponentCall = function findValidStyledComponentCall(node) {
  // halts unless we are dealing with a styled component
  if (!isStyledCallExpression(node)) {
    return;
  }
  // halts if the component is being exported directly
  if ((0, _eslintCodemodUtils.closestOfType)(node, 'ExportNamedDeclaration')) {
    return;
  }
  var styledComponentVariableRef = node.parent;
  // halts if the styled component is not assigned to a variable immediately
  if (!(0, _eslintCodemodUtils.isNodeOfType)(styledComponentVariableRef, 'VariableDeclarator')) {
    return;
  }
  return styledComponentVariableRef;
};

/**
 * Some verbose precondition checks but all it does is check
 * a call expression is of form `styled.div` or `styled2.div`
 *
 * In the future it could be enhanced to double check `styled` and `styled2`
 * are Compiled imports but as is should work for the majority of use cases
 * https://product-fabric.atlassian.net/browse/DSP-16058
 */
var isStyledCallExpression = function isStyledCallExpression(call) {
  if (!(0, _eslintCodemodUtils.isNodeOfType)(call, 'CallExpression')) {
    return false;
  }
  if (!(0, _eslintCodemodUtils.isNodeOfType)(call.callee, 'MemberExpression')) {
    return false;
  }
  if (!(0, _eslintCodemodUtils.isNodeOfType)(call.callee.object, 'Identifier') || !(0, _eslintCodemodUtils.isNodeOfType)(call.callee.property, 'Identifier')) {
    return false;
  }
  if (/^styled2?$/.test(call.callee.object.name) && supported.elements.includes(call.callee.property.name)) {
    return true;
  }
  return false;
};