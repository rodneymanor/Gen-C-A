"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterActionableDeprecations = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _semver = _interopRequireDefault(require("semver"));
var _validateDeprecatedApisConfig = require("./validate-deprecated-apis-config");
var filterActionableDeprecations = exports.filterActionableDeprecations = function filterActionableDeprecations(originalDeprecatedConfig, rootPackageJson) {
  // verify the config is valid and parse it to an object
  var validatedDeprecatedConfig = (0, _validateDeprecatedApisConfig.getValidatedConfig)(originalDeprecatedConfig);

  // verify the root package.json is valid and parse it to an object
  var rootPackageDependencies;
  try {
    rootPackageDependencies = JSON.parse(rootPackageJson).dependencies;
    if (!rootPackageDependencies) {
      throw new Error('No dependencies found in the provided root package.json');
    }
  } catch (e) {
    var error = e;
    throw new Error("Failed to parse root package.json: ".concat(error.message));
  }
  var filteredConfig = {};
  // filter out the deprecated APIs that are not actionable
  for (var _i = 0, _Object$entries = Object.entries(validatedDeprecatedConfig); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = (0, _slicedToArray2.default)(_Object$entries[_i], 2),
      apiKey = _Object$entries$_i[0],
      apiValues = _Object$entries$_i[1];
    var filterApiValues = apiValues.filter(function (apiValue) {
      var _rootPackageDependenc;
      var moduleSpecifier = apiValue.moduleSpecifier,
        actionableVersion = apiValue.actionableVersion;

      // if actionableVersion is not provided in the deprecated APIs config, it is actionable on all versions
      if (!actionableVersion) {
        return true;
      }
      var installedVersion = (_rootPackageDependenc = rootPackageDependencies) === null || _rootPackageDependenc === void 0 ? void 0 : _rootPackageDependenc[moduleSpecifier];
      var coercedInstalledVersion = _semver.default.coerce(installedVersion);
      if (!coercedInstalledVersion) {
        throw new Error("No valid ".concat(moduleSpecifier, " found in the dependencies of root package.json."));
      }
      var coercedActionableVersion = _semver.default.coerce(actionableVersion);
      if (!coercedActionableVersion) {
        throw new Error("Actionable version is invalid for ".concat(moduleSpecifier, " in the deprecated APIs config."));
      }
      return _semver.default.gte(coercedInstalledVersion, coercedActionableVersion);
    });
    if (filterApiValues.length > 0) {
      Object.assign(filteredConfig, (0, _defineProperty2.default)({}, apiKey, filterApiValues));
    }
  }
  return JSON.stringify(filteredConfig);
};