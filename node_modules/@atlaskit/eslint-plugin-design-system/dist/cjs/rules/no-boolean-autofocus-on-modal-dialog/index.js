"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ruleName = exports.message = exports.default = void 0;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _jsxAttribute = require("../../ast-nodes/jsx-attribute");
var _jsxElement = require("../../ast-nodes/jsx-element");
var _createRule = require("../utils/create-rule");
var PROP_NAME = 'autoFocus';

// Lint rule message
var message = exports.message = "`autoFocus` should be set to a component's `ref` or left to resolve to the default value of `true`. It is recommended to leave it as is for a maximally accessible experience.";
var ruleName = exports.ruleName = __dirname.split('/').slice(-1)[0];
var rule = (0, _createRule.createLintRule)({
  meta: {
    name: ruleName,
    type: 'problem',
    docs: {
      description: "Encourages makers to not use boolean values for `autoFocus` on Atlassian Design System's modal dialog component.",
      recommended: true,
      severity: 'warn'
    },
    messages: {
      noBooleanForAutoFocus: message
    }
  },
  create: function create(context) {
    // List of component's locally imported names that match
    var defaultImportLocalName;
    return {
      // Only run rule in files where the package is imported
      ImportDeclaration: function ImportDeclaration(node) {
        // Ignore non-modal imports
        if (node.source.value !== '@atlaskit/modal-dialog') {
          return;
        }
        node.specifiers.filter(function (identifier) {
          return (0, _eslintCodemodUtils.isNodeOfType)(identifier, 'ImportDefaultSpecifier');
        }).forEach(function (identifier) {
          defaultImportLocalName = identifier.local.name;
        });
      },
      JSXElement: function JSXElement(node) {
        if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'JSXElement')) {
          return;
        }
        if (!(0, _eslintCodemodUtils.isNodeOfType)(node.openingElement.name, 'JSXIdentifier')) {
          return;
        }
        var name = node.openingElement.name.name;
        if (name !== defaultImportLocalName) {
          return;
        }
        var prop = _jsxElement.JSXElementHelper.getAttributeByName(node, PROP_NAME);

        // if no autoFocus attribute exists, skip
        if (!prop) {
          return;
        }
        var attrValue = _jsxAttribute.JSXAttribute.getValue(prop);
        if (!attrValue) {
          return;
        }
        var type = attrValue.type,
          value = attrValue.value;

        // If the value is a boolean with value `false`
        if (type === 'ExpressionStatement Literal' && typeof value === 'boolean') {
          return context.report({
            node: node,
            messageId: 'noBooleanForAutoFocus'
          });
        }
      }
    };
  }
});
var _default = exports.default = rule;