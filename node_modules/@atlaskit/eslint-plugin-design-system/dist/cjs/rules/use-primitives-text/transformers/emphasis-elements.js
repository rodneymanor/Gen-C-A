"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmphasisElements = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _contextCompat = require("@atlaskit/eslint-utils/context-compat");
var ast = _interopRequireWildcard(require("../../../ast-nodes"));
var _common = require("./common");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } /* eslint-disable @repo/internal/react/require-jsdoc */
var EmphasisElements = exports.EmphasisElements = {
  lint: function lint(node, _ref) {
    var context = _ref.context,
      config = _ref.config;
    if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'JSXElement')) {
      return;
    }

    // Check whether all criteria needed to make a transformation are met
    var _EmphasisElements$_ch = EmphasisElements._check(node, {
        context: context,
        config: config
      }),
      success = _EmphasisElements$_ch.success,
      autoFixable = _EmphasisElements$_ch.autoFixable;
    if (success && autoFixable) {
      var fix = EmphasisElements._fix(node, {
        context: context,
        config: config
      });
      context.report(_objectSpread({
        node: node.openingElement,
        messageId: 'preferPrimitivesText'
      }, config.enableUnsafeAutofix ? {
        fix: fix
      } : {
        suggest: [{
          desc: "Convert to Text",
          fix: fix
        }]
      }));
    } else if (success && config.enableUnsafeReport) {
      context.report({
        node: node.openingElement,
        messageId: 'preferPrimitivesText'
      });
    }
  },
  _check: function _check(node, _ref2) {
    var context = _ref2.context,
      config = _ref2.config;
    if (!config.patterns.includes('emphasis-elements')) {
      return {
        success: false
      };
    }
    var elementName = ast.JSXElement.getName(node);
    if (elementName !== 'em') {
      return {
        success: false
      };
    }
    if (!node.children.length) {
      return {
        success: false
      };
    }

    // Element has no unallowed props
    if (!ast.JSXElement.hasAllowedAttrsOnly(node, _common.allowedAttrs)) {
      return {
        success: true,
        autoFixable: false
      };
    }

    // If there is more than one `@atlaskit/primitives` import, then it becomes difficult to determine which import to transform
    var importDeclaration = ast.Root.findImportsByModule((0, _contextCompat.getSourceCode)(context).ast.body, '@atlaskit/primitives');
    if (importDeclaration.length > 1) {
      return {
        success: true,
        autoFixable: false
      };
    }
    return {
      success: true,
      autoFixable: true
    };
  },
  _fix: function _fix(node, _ref3) {
    var context = _ref3.context,
      config = _ref3.config;
    return function (fixer) {
      var importFix = ast.Root.upsertNamedImportDeclaration({
        module: '@atlaskit/primitives',
        specifiers: ['Text']
      }, context, fixer);
      var elementNameFixes = ast.JSXElement.updateName(node, 'Text', fixer);
      var asAttributeFix = ast.JSXElement.addAttribute(node, 'as', 'em', fixer);
      var colorAttributeFix = (0, _common.addColorInheritAttributeFix)(node, config, fixer);
      var testAttributeFix = (0, _common.updateTestIdAttributeFix)(node, fixer);
      return [importFix].concat((0, _toConsumableArray2.default)(elementNameFixes), [asAttributeFix, colorAttributeFix, testAttributeFix]).filter(function (fix) {
        return Boolean(fix);
      }); // Some of the transformers can return arrays with undefined, so filter them out
    };
  }
};