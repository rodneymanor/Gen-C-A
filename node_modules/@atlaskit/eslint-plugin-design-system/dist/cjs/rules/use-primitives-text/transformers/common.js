"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addColorInheritAttributeFix = addColorInheritAttributeFix;
exports.allowedAttrs = void 0;
exports.hasTextChildrenOnly = hasTextChildrenOnly;
exports.updateTestIdAttributeFix = updateTestIdAttributeFix;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var ast = _interopRequireWildcard(require("../../../ast-nodes"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
// Rename data-testid prop to testId if present
function updateTestIdAttributeFix(node, fixer) {
  var testIdAttr = ast.JSXElement.getAttributeByName(node, 'data-testid');
  if (testIdAttr) {
    return ast.JSXAttribute.updateName(testIdAttr, 'testId', fixer);
  }
}

// Add color="inherit" prop depending on config
function addColorInheritAttributeFix(node, config, fixer) {
  if (!config.inheritColor) {
    return;
  }
  return ast.JSXElement.addAttribute(node, 'color', 'inherit', fixer);
}
var allowedAttrs = exports.allowedAttrs = ['id', 'data-testid', 'key'];

// Only allow elements with strings as children
// The use of `<FormattedMessage ... />` component and `{formatMessage(...)}` are allowed as these are used for i18n
function hasTextChildrenOnly(node) {
  var _node$children;
  return (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.every(function (child) {
    if ((0, _eslintCodemodUtils.isNodeOfType)(child, 'JSXText')) {
      return true;
    }

    // JSX child element <span><FormattedMessage /></span>
    if ((0, _eslintCodemodUtils.isNodeOfType)(child, 'JSXElement') && ast.JSXElement.getName(child) === 'FormattedMessage') {
      return true;
    }

    // JSX expression <span>{formatMessage(...)}</span>
    if ((0, _eslintCodemodUtils.isNodeOfType)(child, 'JSXExpressionContainer') && (0, _eslintCodemodUtils.isNodeOfType)(child.expression, 'CallExpression')) {
      return ast.FunctionCall.getName(child.expression) === 'formatMessage';
    }
    return false;
  });
}