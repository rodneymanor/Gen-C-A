"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _createRule = require("../utils/create-rule");
var separatorAsCombinationNotAllowed = 'The combination of `separator` with `as="li"`, `as="ol"`, or `as="dl"` is not allowed.';
var rule = (0, _createRule.createLintRule)({
  meta: {
    name: 'no-separator-with-list-elements',
    type: 'suggestion',
    docs: {
      description: 'Warn when the `separator` prop is used with `as="li"`, `as="ol"`, or `as="dl"` in the Inline component.',
      recommended: true,
      severity: 'warn'
    },
    messages: {
      separatorAsCombinationNotAllowed: separatorAsCombinationNotAllowed
    }
  },
  create: function create(context) {
    var inlineComponentNames = [];
    return {
      ImportDeclaration: function ImportDeclaration(node) {
        if (node.type === 'ImportDeclaration' && (node.source.value === '../src' || node.source.value === '@atlaskit/primitives')) {
          node.specifiers.forEach(function (specifier) {
            if (specifier.type === 'ImportSpecifier' && 'name' in specifier.imported && specifier.imported.name === 'Inline') {
              inlineComponentNames.push(specifier.local.name);
            }
          });
        }
      },
      JSXElement: function JSXElement(node) {
        if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'JSXElement') || !(0, _eslintCodemodUtils.isNodeOfType)(node.openingElement.name, 'JSXIdentifier')) {
          return;
        }
        var componentName = node.openingElement.name.name;
        if (!inlineComponentNames.includes(componentName)) {
          return;
        }
        var inlineProps = node.openingElement.attributes.filter(function (attr) {
          return (0, _eslintCodemodUtils.isNodeOfType)(attr, 'JSXAttribute') && (0, _eslintCodemodUtils.isNodeOfType)(attr.name, 'JSXIdentifier');
        });
        var separatorProp = inlineProps.find(function (attr) {
          return attr.name.name === 'separator';
        });
        var asProp = inlineProps.find(function (attr) {
          return attr.name.name === 'as';
        });
        if (separatorProp && asProp && asProp.value && (0, _eslintCodemodUtils.isNodeOfType)(asProp.value, 'Literal') && ['li', 'ol', 'dl'].includes(asProp.value.value)) {
          context.report({
            node: node,
            messageId: 'separatorAsCombinationNotAllowed'
          });
        }
      }
    };
  }
});
var _default = exports.default = rule;