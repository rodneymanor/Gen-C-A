"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.headingLevelRequiredSuggestionText = exports.default = void 0;
var _eslintCodemodUtils = require("eslint-codemod-utils");
var _contextCompat = require("@atlaskit/eslint-utils/context-compat");
var _createRule = require("../utils/create-rule");
var _getImportName = require("../utils/get-import-name");
var headingLevelRequiredSuggestionText = exports.headingLevelRequiredSuggestionText = 'Add a `headingLevel` that is of a contextually relevant level.';
var rule = (0, _createRule.createLintRule)({
  meta: {
    name: 'use-heading-level-in-spotlight-card',
    type: 'suggestion',
    fixable: 'code',
    docs: {
      description: 'Inform developers of eventual requirement of `headingLevel` prop in `SpotlightCard` component. The heading level should be the appropriate level according to the surrounding context.',
      recommended: true,
      severity: 'warn'
    },
    messages: {
      headingLevelRequired: headingLevelRequiredSuggestionText
    }
  },
  create: function create(context) {
    return {
      JSXElement: function JSXElement(node) {
        if (!(0, _eslintCodemodUtils.isNodeOfType)(node, 'JSXElement')) {
          return;
        }
        if (!(0, _eslintCodemodUtils.isNodeOfType)(node.openingElement.name, 'JSXIdentifier')) {
          return;
        }

        // Get the name of the SpotlightCard import
        var spotlightCardImportName = (0, _getImportName.getImportName)((0, _contextCompat.getScope)(context, node), '@atlaskit/onboarding', 'SpotlightCard');
        if (node.openingElement.name.name === spotlightCardImportName) {
          // and if `heading` exists and `headingLevel` prop does not exist
          var spotlightCardProps = node.openingElement.attributes.filter(function (attr) {
            return (0, _eslintCodemodUtils.isNodeOfType)(attr, 'JSXAttribute');
          }).filter(function (attr) {
            return attr.name.type === 'JSXIdentifier';
          });
          var heading = spotlightCardProps.find(function (attr) {
            return attr.name.name === 'heading';
          });
          var headingLevel = spotlightCardProps.find(function (attr) {
            return attr.name.name === 'headingLevel';
          });
          if (heading && !headingLevel) {
            context.report({
              node: node,
              messageId: 'headingLevelRequired'
            });
          }
        }
      }
    };
  }
});
var _default = exports.default = rule;