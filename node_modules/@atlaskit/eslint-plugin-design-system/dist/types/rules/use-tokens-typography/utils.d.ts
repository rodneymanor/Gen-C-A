import type { Rule } from 'eslint';
import { type CallExpression, type Directive, type EslintNode, type ImportDeclaration, type ModuleDeclaration, type Property, type Statement, type StringableASTNode } from 'eslint-codemod-utils';
export declare const typographyProperties: string[];
export declare const isTypographyProperty: (propertyName: string) => boolean;
export declare const isFontSize: (node: EslintNode) => node is CallExpression;
export declare const isFontSizeSmall: (node: EslintNode) => node is CallExpression;
export declare const isFontFamily: (node: EslintNode) => node is CallExpression;
export declare const isCodeFontFamily: (node: EslintNode) => node is CallExpression;
export type TokenValueMap = {
    tokenName: string;
    tokenValue: string;
    values: {
        fontSize?: string;
        fontWeight?: string;
        lineHeight?: string;
    };
};
export declare const typographyValueToToken: TokenValueMap[];
export declare function isValidTypographyToken(tokenName: string): {
    attributes: {
        group: string;
        state: string;
        introduced: string;
        description: string;
    };
    value: string;
    filePath: string;
    isSource: boolean;
    original: {
        attributes: {
            group: string;
            state: string;
            introduced: string;
            description: string;
        };
        value: string;
    };
    name: string;
    path: string[];
    cleanName: string;
} | {
    attributes: {
        group: string;
        state: string;
        introduced: string;
        description: string;
    };
    value: string;
    filePath: string;
    isSource: boolean;
    original: {
        attributes: {
            group: string;
            state: string;
            introduced: string;
            description: string;
        };
        value: {
            fontWeight: string;
            fontSize: string;
            lineHeight: string;
            fontFamily: string;
            fontStyle: string;
            letterSpacing: string;
        };
    };
    name: string;
    path: string[];
    cleanName: string;
} | undefined;
export declare function findTypographyTokenForValues(fontSize: string, lineHeight?: string): TokenValueMap[];
export declare const fontWeightTokens: {
    tokenName: string;
    tokenValue: string;
    values: {};
}[];
export declare function findFontWeightTokenForValue(fontWeight: string): {
    tokenName: string;
    tokenValue: string;
    values: {};
} | undefined;
export declare const fontWeightMap: FontWeightMap;
export type FontWeightMap = {
    regular: string;
    medium: string;
    semibold: string;
    bold: string;
};
export declare const defaultFontWeight: string;
export declare const fontFamilyTokens: ({
    attributes: {
        group: string;
        state: string;
        introduced: string;
        description: string;
    };
    value: string;
    filePath: string;
    isSource: boolean;
    original: {
        attributes: {
            group: string;
            state: string;
            introduced: string;
            description: string;
        };
        value: string;
    };
    name: string;
    path: string[];
    cleanName: string;
} | {
    attributes: {
        group: string;
        state: string;
        introduced: string;
        description: string;
    };
    value: string;
    filePath: string;
    isSource: boolean;
    original: {
        attributes: {
            group: string;
            state: string;
            introduced: string;
            description: string;
        };
        value: {
            fontWeight: string;
            fontSize: string;
            lineHeight: string;
            fontFamily: string;
            fontStyle: string;
            letterSpacing: string;
        };
    };
    name: string;
    path: string[];
    cleanName: string;
})[];
export declare function findFontFamilyValueForToken(tokenName: string): string;
export declare function findFontFamilyTokenForValue(value: string): "font.family.brand.heading" | "font.family.brand.body" | "font.family.body" | "font.family.code" | undefined;
export declare function notUndefined<V>(value: V | undefined): value is V;
export declare function isValidPropertyNode(node: Property): boolean;
export declare function getTokenProperty(propertyName: string, tokenName: string, tokenFallback?: string, isFallbackMember?: boolean): StringableASTNode<Property>;
export declare function getLiteralProperty(propertyName: string, propertyValue: string): StringableASTNode<Property>;
export declare function convertPropertyNodeToStringableNode(node: Property): StringableASTNode<Property>;
export declare function insertTokensImport(root: (Directive | Statement | ModuleDeclaration)[], fixer: Rule.RuleFixer): Rule.Fix;
export declare function insertFallbackImportFull(root: (Directive | Statement | ModuleDeclaration)[], fixer: Rule.RuleFixer): Rule.Fix;
export declare function insertFallbackImportSpecifier(fixer: Rule.RuleFixer, themeImportNode: ImportDeclaration): Rule.Fix | undefined;
