import type { SourceCode } from 'eslint';
import { type ObjectExpression } from 'eslint-codemod-utils';
declare const referenceObject: {
    width: string;
    height: string;
    padding: string;
    position: string;
    border: string;
    clip: string;
    overflow: string;
    whiteSpace: string;
};
type KeyValue = {
    key: string;
    value: string;
};
export type ReferenceObject = typeof referenceObject;
/**
 * Returns the first import in the esprima AST.
 */
export declare const getFirstImport: (source: SourceCode) => import("estree").ImportDeclaration | undefined;
/**
 * Takes a template literal and returns [key, value] array of the css properties
 */
export declare const makeTemplateLiteralIntoEntries: (templateString: string) => string[][];
/**
 * Given a node, translate the node into css key-value pairs and
 * compare the output to the reference styles required to make a
 * visually hidden element.
 *
 * @returns {number} A fraction between 0-1 depending on the object's likeness.
 */
export declare const getObjectLikeness: (node: ObjectExpression) => number;
export declare const countMatchingKeyValues: (styleEntries: KeyValue[]) => number;
export {};
