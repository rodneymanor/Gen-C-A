import type { Rule } from 'eslint';
type SingleRuleListener = Rule.RuleListener[keyof Rule.RuleListener] & ((...args: any[]) => void);
type ErrorBoundaryConfig = undefined | boolean | {
    failSilently?: boolean;
} | {
    config: {
        failSilently?: boolean;
    };
};
/**
 * ESLint rules should NEVER throw exceptions, because that breaks the VSCode ESLint server
 * (and probably the IntelliJ one too), which causes linting to fail in a file.
 *
 * It also breaks CI, which was the reason this error boundary was added. It's a final
 * catch all.
 */
export declare function errorBoundary<R extends SingleRuleListener | Rule.RuleListener>(ruleOrRules: R, config?: ErrorBoundaryConfig): R;
export {};
