import type { Rule, Scope } from 'eslint';
import { type CallExpression, type EslintNode, type Expression, type TaggedTemplateExpression } from 'eslint-codemod-utils';
export declare const isDecendantOfGlobalToken: (node: EslintNode) => boolean;
export declare const isDecendantOfType: (node: Rule.Node, type: Rule.Node["type"], skipNode?: boolean) => boolean;
export declare const isPropertyKey: (node: Rule.Node) => boolean;
export declare const isDecendantOfStyleJsxAttribute: (node: Rule.Node) => boolean;
export declare const isDecendantOfSvgElement: (node: Rule.Node) => boolean;
export declare const isDecendantOfPrimitive: (node: Rule.Node, context: Rule.RuleContext) => boolean;
export declare const isCssInJsTemplateNode: (node?: Expression | null) => node is TaggedTemplateExpression;
export declare const isCssInJsCallNode: (node?: Expression | null) => node is CallExpression;
export declare const isCssInJsObjectNode: (node?: Expression | null) => node is CallExpression;
export declare const isDecendantOfXcssBlock: (node: Rule.Node, referencesInScope: Scope.Reference[], importSources: string[]) => boolean;
export declare const isDecendantOfStyleBlock: (node: Rule.Node) => boolean;
export declare const isChildOfType: (node: Rule.Node, type: Rule.Node["type"]) => boolean;
