import type { Rule } from 'eslint';
import { type ImportDeclaration, type ObjectExpression, type Property, type StringableASTNode } from 'eslint-codemod-utils';
import { type RuleConfig } from '../config';
import { type TokenValueMap } from '../utils';
interface MetaData {
    context: Rule.RuleContext;
    config: RuleConfig;
}
interface Refs {
    fontSizeNode: Property;
    fontSizeRaw: string | number;
    tokensImportNode: ImportDeclaration | undefined;
    themeImportNode: ImportDeclaration | undefined;
    shouldAddFallback: boolean;
    shouldAddFallbackImport: 'full' | 'specifier' | false;
}
type Check = {
    success: boolean;
    refs?: Refs;
};
interface FixerRefs {
    matchingToken: TokenValueMap;
    nodesToReplace: Property[];
    tokensImportNode: ImportDeclaration | undefined;
    themeImportNode: ImportDeclaration | undefined;
    shouldAddFallback: boolean;
    shouldAddFallbackImport: Refs['shouldAddFallbackImport'];
    fontWeightReplacement: StringableASTNode<Property> | undefined;
    fontFamilyReplacement: StringableASTNode<Property> | undefined;
    fontStyleReplacement: StringableASTNode<Property> | undefined;
}
export declare const StyleObject: {
    lint(node: Rule.Node, { context, config }: MetaData): {
        success: boolean;
    } | undefined;
    _check(node: ObjectExpression & Rule.NodeParentExtension, { context, config }: MetaData): Check;
    _fix(refs: FixerRefs, context: Rule.RuleContext): (fixer: Rule.RuleFixer) => Rule.Fix[];
};
export {};
