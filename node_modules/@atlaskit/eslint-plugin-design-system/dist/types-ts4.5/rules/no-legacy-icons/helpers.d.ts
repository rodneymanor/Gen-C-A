import type { Rule } from 'eslint';
import { type ImportDeclaration, type JSXAttribute, type Node } from 'eslint-codemod-utils';
import { type IconMigrationSizeGuidance } from '@atlaskit/icon/migration-map';
export type IconMigrationError = Rule.ReportDescriptor;
export type RangeList = {
    start: number;
    end: number;
}[];
export type ErrorListManual = {
    [loc: string]: {
        errors: IconMigrationError[];
        iconName: string;
        importSource: string;
    };
};
export type ErrorListAuto = {
    [loc: string]: IconMigrationError;
};
export type GuidanceList = {
    [loc: string]: string;
};
export type LegacyIconImportList = {
    [key: string]: {
        packageName: string;
        exported: boolean;
        importNode: ImportDeclaration;
        importSpecifier: string;
    };
};
export type MigrationIconImportList = {
    [key: string]: {
        packageName: string;
        exported: boolean;
        importNode: ImportDeclaration;
        importSpecifier: string;
    };
};
declare const sizes: readonly [
    "small",
    "medium",
    "large",
    "xlarge"
];
export type Size = (typeof sizes)[number];
export declare const isSize: (size: any) => size is Size;
/**
 * Returns the migration map object for a legacy icon or null if not found
 * @param iconPackage The name of the legacy icon package
 * @returns The migration map object for the legacy icon or null if not found
 */
export declare const getMigrationMapObject: (iconPackage: string) => {
    newIcon?: {
        name: string;
        type: string;
        package: string;
        isMigrationUnsafe?: boolean;
        shouldForceSmallIcon?: boolean;
    };
    additionalIcons?: {
        name: string;
        type: string;
        package: string;
    }[];
    sizeGuidance: Record<import("@atlaskit/icon").Size, IconMigrationSizeGuidance>;
} | null;
export declare const getUpcomingIcons: (iconPackage: string) => {
    sizeGuidance: Record<Size, IconMigrationSizeGuidance>;
} | null;
/**
 * Checks if a new icon can be auto-migrated based on guidance from the migration map
 */
export declare const canAutoMigrateNewIconBasedOnSize: (guidance?: IconMigrationSizeGuidance) => boolean;
/**
 * Creates the written guidance for migrating a legacy icon to a new icon
 */
export declare const createGuidance: ({ iconPackage, insideNewButton, size: initialSize, shouldUseMigrationPath, shouldForceSmallIcon, }: {
    iconPackage: string;
    insideNewButton?: boolean;
    size?: Size;
    shouldUseMigrationPath?: boolean;
    shouldForceSmallIcon?: boolean;
}) => string;
/**
 * Checks if the color can be migrated
 * @param color String representing the color to check
 * @returns True if the color can be migrated, false otherwise
 */
export declare const canMigrateColor: (color: string) => boolean;
export declare const locToString: (node: Node) => string;
export declare const createCantMigrateReExportError: (node: Node, packageName: string, exportName: string, errors: ErrorListManual) => void;
export declare const createCantMigrateIdentifierMapOrArrayError: (node: Node, packageName: string, exportName: string, errors: ErrorListManual) => void;
export declare const createCantMigrateIdentifierError: (node: Node, packageName: string, exportName: string, errors: ErrorListManual) => void;
export declare const createCantFindSuitableReplacementError: (node: Node, importSource: string, iconName: string, errors: ErrorListManual, sizeIssue?: boolean) => void;
export declare const createCantMigrateFunctionUnknownError: (node: Node, importSource: string, iconName: string, errors: ErrorListManual) => void;
export declare const createCantMigrateColorError: (node: Node, colorValue: string, errors: ErrorListManual, importSource: string, iconName: string) => void;
export declare const createCantMigrateSpreadPropsError: (node: Node, missingProps: string[], errors: ErrorListManual, importSource: string, iconName: string) => void;
export declare const createCantMigrateSizeUnknown: (node: Node, errors: ErrorListManual, importSource: string, iconName: string) => void;
export declare const createAutoMigrationError: ({ node, importSource, iconName, errors, spacing, insideNewButton, shouldForceSmallIcon, }: {
    node: Node;
    importSource: string;
    iconName: string;
    errors: ErrorListAuto;
    spacing?: string;
    insideNewButton?: boolean;
    shouldForceSmallIcon?: boolean;
}) => void;
export declare const createHelpers: (ctx: Rule.RuleContext) => {
    /**
     * Extracts the primaryColor value from a JSXAttribute
     */
    getPrimaryColor(attr: JSXAttribute): string | null;
    getTokenCallValue: (value: any) => string | undefined;
    getConfigFlag: (key: string, defaultValue: boolean) => boolean;
};
export declare const addToListOfRanges: (node: Node, sortedListOfRangesForErrors: RangeList) => void;
/**
 *
 * @param node Icon JSXelement
 * @param newButtonImports list of new button import specifiers
 * @returns if Icon is inside a new button
 */
export declare const isInsideNewButton: (node: Rule.Node, newButtonImports: Set<string>) => boolean;
/**
 *
 * @param node Icon JSXelement
 * @param newButtonImports list of legacy button import specifiers
 * @returns if Icon is inside a legacy button
 */
export declare const isInsideLegacyButton: (node: Rule.Node, legacyButtonImports: Set<string>) => boolean;
/**
 *
 * @param node Icon JSXelement
 * @param newButtonImports list of legacy button import specifiers
 * @returns if Icon is inside a legacy button
 */
export declare const isInsideIconOnlyLegacyButton: (node: Rule.Node, legacyButtonImports: Set<string>) => boolean;
export declare const getComponentName: (name: string) => string;
export declare const throwManualErrors: ({ errorsManual, errorRanges, guidance, context, isQuietMode, }: {
    errorsManual: ErrorListManual;
    errorRanges: RangeList;
    guidance: GuidanceList;
    context: Rule.RuleContext;
    isQuietMode: boolean;
}) => void;
export declare const throwAutoErrors: ({ errorsManual, errorsAuto, iconSizesInfo, legacyIconImports, guidance, migrationIconImports, shouldUseMigrationPath, context, }: {
    errorsManual: ErrorListManual;
    errorsAuto: ErrorListAuto;
    iconSizesInfo: Record<string, {
        small: string[];
        usageCount: number;
    }>;
    legacyIconImports: LegacyIconImportList;
    guidance: GuidanceList;
    migrationIconImports: MigrationIconImportList;
    shouldUseMigrationPath: boolean;
    context: Rule.RuleContext;
}) => void;
export {};
