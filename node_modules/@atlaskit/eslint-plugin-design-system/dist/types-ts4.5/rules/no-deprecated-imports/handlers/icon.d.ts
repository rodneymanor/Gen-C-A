import type { Rule } from 'eslint';
import { type ExportNamedDeclaration, type ImportDeclaration, type JSXElement } from 'eslint-codemod-utils';
import { type DeprecatedImportConfigEntry } from '../../utils/types';
export type ImportIconDeprecationError = Rule.ReportDescriptor & {
    node: ImportDeclaration;
};
export type ExportIconDeprecationError = Rule.ReportDescriptor & {
    node: ExportNamedDeclaration;
};
export type ImportIconDeprecationErrorListAuto = {
    [key: string]: ImportIconDeprecationError;
};
export type ExportIconDeprecationErrorListAuto = {
    [key: string]: ExportIconDeprecationError;
};
type DeprecationIconHandler = (context: Rule.RuleContext) => {
    createImportError: (args: {
        node: ImportDeclaration;
        importSource: string;
        config: DeprecatedImportConfigEntry;
    }) => void;
    createExportError: (args: {
        node: ExportNamedDeclaration;
        importSource: string;
        config: DeprecatedImportConfigEntry;
    }) => void;
    checkJSXElement: (node: JSXElement) => void;
    checkIdentifier: (node: Rule.Node) => void;
    throwErrors: () => void;
};
/**
 * __Deprecation icon handler__
 *
 * A deprecation icon handler which is responsible for displaying an error for deprecated icons.
 * It also includes a fixer to replace the deprecated icon with the new icon if a replacement exists.
 */
export declare const getDeprecationIconHandler: DeprecationIconHandler;
export {};
