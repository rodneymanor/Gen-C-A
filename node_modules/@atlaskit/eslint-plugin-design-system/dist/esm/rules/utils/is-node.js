import { isNodeOfType } from 'eslint-codemod-utils';
import { getSourceCode } from '@atlaskit/eslint-utils/context-compat';
import { isXcss } from '@atlaskit/eslint-utils/is-supported-import';
import { Root } from '../../ast-nodes';
var _isDecendantOfGlobalToken = function isDecendantOfGlobalToken(node) {
  if (isNodeOfType(node, 'CallExpression') && isNodeOfType(node.callee, 'Identifier') && (node.callee.name === 'token' || node.callee.name === 'getTokenValue')) {
    return true;
  }
  if (node.parent) {
    return _isDecendantOfGlobalToken(node.parent);
  }
  return false;
};
export { _isDecendantOfGlobalToken as isDecendantOfGlobalToken };
var _isDecendantOfType = function isDecendantOfType(node, type) {
  var skipNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (!skipNode && node.type === type) {
    return true;
  }
  if (node.parent) {
    return _isDecendantOfType(node.parent, type, false);
  }
  return false;
};
export { _isDecendantOfType as isDecendantOfType };
export var isPropertyKey = function isPropertyKey(node) {
  if (isNodeOfType(node, 'Identifier') && _isDecendantOfType(node, 'Property')) {
    var parent = node.parent;
    return node === parent.key || parent.shorthand;
  }
  return false;
};
var _isDecendantOfStyleJsxAttribute = function isDecendantOfStyleJsxAttribute(node) {
  if (isNodeOfType(node, 'JSXAttribute')) {
    return true;
  }
  if (node.parent) {
    return _isDecendantOfStyleJsxAttribute(node.parent);
  }
  return false;
};
export { _isDecendantOfStyleJsxAttribute as isDecendantOfStyleJsxAttribute };
var _isDecendantOfSvgElement = function isDecendantOfSvgElement(node) {
  if (isNodeOfType(node, 'JSXElement')) {
    // @ts-ignore
    if (node.openingElement.name.name === 'svg') {
      return true;
    }
  }
  if (node.parent) {
    return _isDecendantOfSvgElement(node.parent);
  }
  return false;
};
export { _isDecendantOfSvgElement as isDecendantOfSvgElement };
var _isDecendantOfPrimitive = function isDecendantOfPrimitive(node, context) {
  var primitivesToCheck = ['Box', 'Text'];
  if (isNodeOfType(node, 'JSXElement')) {
    // @ts-ignore
    if (primitivesToCheck.includes(node.openingElement.name.name)) {
      var importDeclaration = Root.findImportsByModule(getSourceCode(context).ast.body, ['@atlaskit/primitives', '@atlaskit/primitives/box', '@atlaskit/primitives/text', '@atlaskit/primitives/compiled']);
      if (importDeclaration.length) {
        return true;
      }
    }
  }
  if (node.parent) {
    return _isDecendantOfPrimitive(node.parent, context);
  }
  return false;
};
export { _isDecendantOfPrimitive as isDecendantOfPrimitive };
var cssInJsCallees = ['css', 'styled', 'styled2'];
export var isCssInJsTemplateNode = function isCssInJsTemplateNode(node) {
  return (node === null || node === void 0 ? void 0 : node.type) === 'TaggedTemplateExpression' && node.tag.type === 'MemberExpression' && node.tag.object.type === 'Identifier' && node.tag.object.name === 'styled';
};
export var isCssInJsCallNode = function isCssInJsCallNode(node) {
  return (node === null || node === void 0 ? void 0 : node.type) === 'CallExpression' && node.callee.type === 'Identifier' && cssInJsCallees.includes(node.callee.name);
};
export var isCssInJsObjectNode = function isCssInJsObjectNode(node) {
  return (node === null || node === void 0 ? void 0 : node.type) === 'CallExpression' && node.callee.type === 'MemberExpression' && node.callee.object.type === 'Identifier' && cssInJsCallees.includes(node.callee.object.name);
};
var _isDecendantOfXcssBlock = function isDecendantOfXcssBlock(node, referencesInScope, importSources) {
  // xcss contains types for all properties that accept tokens, so ignore xcss for linting as it will report false positives
  if (node.type === 'CallExpression' && isXcss(node.callee, referencesInScope, importSources)) {
    return true;
  }
  if (node.parent) {
    return _isDecendantOfXcssBlock(node.parent, referencesInScope, importSources);
  }
  return false;
};
export { _isDecendantOfXcssBlock as isDecendantOfXcssBlock };
var _isDecendantOfStyleBlock = function isDecendantOfStyleBlock(node) {
  if (node.type === 'VariableDeclarator') {
    if (node.id.type !== 'Identifier') {
      return false;
    }
    if (
    // @ts-ignore typeAnnotation is not defined by types
    node.id.typeAnnotation &&
    // @ts-ignore typeAnnotation is not defined by types
    node.id.typeAnnotation.typeAnnotation.type === 'GenericTypeAnnotation' &&
    // @ts-ignore typeAnnotation is not defined by types
    node.id.typeAnnotation.typeAnnotation.id.type === 'Identifier') {
      // @ts-ignore typeAnnotation is not defined by types
      var typeName = node.id.typeAnnotation.typeAnnotation.id.name;
      var hasCSSType = ['CSSProperties', 'CSSObject'].some(function (el) {
        return typeName.includes(el);
      });
      if (hasCSSType) {
        return true;
      }
    }

    // @ts-ignore Name is not defined in types
    var varName = node.id.name.toLowerCase();
    return ['style', 'css', 'theme'].some(function (el) {
      return varName.includes(el);
    });
  }
  if (isCssInJsCallNode(node) || isCssInJsObjectNode(node) || isCssInJsTemplateNode(node)) {
    return true;
  }
  if (node.type === 'TaggedTemplateExpression' && node.tag.type === 'Identifier' && node.tag.name === 'css') {
    return true;
  }
  if (node.parent) {
    return _isDecendantOfStyleBlock(node.parent);
  }
  return false;
};
export { _isDecendantOfStyleBlock as isDecendantOfStyleBlock };
export var isChildOfType = function isChildOfType(node, type) {
  return isNodeOfType(node.parent, type);
};