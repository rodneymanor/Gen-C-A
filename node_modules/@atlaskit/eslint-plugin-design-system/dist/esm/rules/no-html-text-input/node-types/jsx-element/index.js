function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
import { isNodeOfType } from 'eslint-codemod-utils';
import { getSourceCode } from '@atlaskit/eslint-utils/context-compat';
import * as ast from '../../../../ast-nodes';
import { isSupportedForLint } from '../supported';
function isImportDeclaration(node) {
  return node.type === 'ImportDeclaration';
}
export var JSXElement = {
  lint: function lint(node, _ref) {
    var context = _ref.context;
    if (!isSupportedForLint(node)) {
      return;
    }
    var nodeName = ast.JSXElement.getName(node);
    var sourceCode = getSourceCode(context);
    var importDeclarations = sourceCode.ast.body.filter(isImportDeclaration);
    var existingTextfieldName = null;
    var usedNames = new Set();

    // Check for existing imports
    var _iterator = _createForOfIteratorHelper(importDeclarations),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var declaration = _step.value;
        var _iterator2 = _createForOfIteratorHelper(declaration.specifiers),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var specifier = _step2.value;
            usedNames.add(specifier.local.name);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (declaration.source.value === '@atlaskit/textfield') {
          var defaultSpecifier = declaration.specifiers.find(function (specifier) {
            return specifier.type === 'ImportDefaultSpecifier';
          });
          if (defaultSpecifier) {
            existingTextfieldName = defaultSpecifier.local.name;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var generateUniqueName = function generateUniqueName(baseName) {
      var index = 1;
      var newName = baseName;
      while (usedNames.has(newName)) {
        newName = "".concat(baseName).concat(index);
        index++;
      }
      return newName;
    };
    var textfieldName = existingTextfieldName || generateUniqueName('Textfield');
    context.report({
      node: node.openingElement,
      messageId: 'noHtmlTextInput',
      data: {
        name: nodeName
      },
      suggest: [{
        desc: 'Replace with Textfield component from @atlaskit/textfield',
        fix: function fix(fixer) {
          var _node$closingElement;
          var openingTagRange = node.openingElement.range;
          var closingTagRange = (_node$closingElement = node.closingElement) === null || _node$closingElement === void 0 ? void 0 : _node$closingElement.range;
          var attributesText = node.openingElement.attributes.filter(function (attr) {
            return !isNodeOfType(attr, 'JSXAttribute') || attr.name.name !== 'type';
          }).map(function (attr) {
            return sourceCode.getText(attr);
          }).join(' ');
          var fixers = [];

          // Replace <img> with <textfield> and retain attributes
          if (openingTagRange) {
            if (node.openingElement.selfClosing) {
              fixers.push(fixer.replaceTextRange([openingTagRange[0] + 1, openingTagRange[1] - 1], "".concat(textfieldName).concat(attributesText ? " ".concat(attributesText) : '', " /")));
            } else {
              fixers.push(fixer.replaceTextRange([openingTagRange[0] + 1, openingTagRange[1] - 1], "".concat(textfieldName).concat(attributesText ? " ".concat(attributesText) : '')));
            }
          }
          if (closingTagRange && !node.openingElement.selfClosing) {
            fixers.push(fixer.replaceTextRange([closingTagRange[0] + 2, closingTagRange[1] - 1], textfieldName));
          }

          // Add import if not present
          if (!existingTextfieldName) {
            var importStatement = "import ".concat(textfieldName, " from '@atlaskit/textfield';\n");
            fixers.push(fixer.insertTextBefore(sourceCode.ast, importStatement));
          }
          return fixers;
        }
      }]
    });
  }
};