import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/* eslint-disable @repo/internal/react/require-jsdoc */

import { isNodeOfType } from 'eslint-codemod-utils';
import * as ast from '../../../ast-nodes';
import { allowedAttrs, updateTestIdAttributeFix } from './common';
var tagSizeMap = {
  h1: 'xlarge',
  h2: 'large',
  h3: 'medium',
  h4: 'small',
  h5: 'xsmall',
  h6: 'xxsmall'
};
export var NativeElements = {
  lint: function lint(node, _ref) {
    var context = _ref.context,
      config = _ref.config;
    // Check whether all criteria needed to make a transformation are met
    var _NativeElements$_chec = NativeElements._check(node, {
        context: context,
        config: config
      }),
      success = _NativeElements$_chec.success,
      autoFixable = _NativeElements$_chec.autoFixable;
    if (success && autoFixable) {
      var fix = NativeElements._fix(node, {
        context: context,
        config: config
      });
      context.report(_objectSpread({
        node: node,
        messageId: 'preferHeading'
      }, config.enableUnsafeAutofix ? {
        fix: fix
      } : {
        suggest: [{
          desc: "Convert to Heading",
          fix: fix
        }]
      }));
    } else if (success && config.enableUnsafeReport) {
      context.report({
        node: node,
        messageId: 'preferHeading'
      });
    }
  },
  _check: function _check(node, _ref2) {
    var config = _ref2.config;
    if (!config.patterns.includes('native-elements')) {
      return {
        success: false
      };
    }
    if (!isNodeOfType(node, 'JSXElement')) {
      return {
        success: false
      };
    }
    if (!node.children.length) {
      return {
        success: false
      };
    }
    var elementName = ast.JSXElement.getName(node);
    if (!Object.keys(tagSizeMap).includes(elementName)) {
      return {
        success: false
      };
    }
    if (!node.parent) {
      return {
        success: true,
        autoFixable: false
      };
    }

    // Element has to be first element of its siblings
    if (!(isNodeOfType(node.parent, 'JSXElement') || isNodeOfType(node.parent, 'JSXFragment'))) {
      return {
        success: true,
        autoFixable: false
      };
    }
    var siblings = ast.JSXElement.getChildren(node.parent);
    if (siblings.length > 1) {
      var _siblings$0$range, _node$range, _siblings$0$range2, _node$range2;
      // Only report if element is first child element
      if (((_siblings$0$range = siblings[0].range) === null || _siblings$0$range === void 0 ? void 0 : _siblings$0$range[0]) !== ((_node$range = node.range) === null || _node$range === void 0 ? void 0 : _node$range[0]) || ((_siblings$0$range2 = siblings[0].range) === null || _siblings$0$range2 === void 0 ? void 0 : _siblings$0$range2[1]) !== ((_node$range2 = node.range) === null || _node$range2 === void 0 ? void 0 : _node$range2[1])) {
        return {
          success: true,
          autoFixable: false
        };
      }
    }
    if (!ast.JSXElement.hasAllowedAttrsOnly(node, allowedAttrs)) {
      return {
        success: true,
        autoFixable: false
      };
    }
    return {
      success: true,
      autoFixable: true
    };
  },
  _fix: function _fix(node, _ref3) {
    var context = _ref3.context;
    return function (fixer) {
      // change to default import
      var importFix = ast.Root.upsertDefaultImportDeclaration({
        module: '@atlaskit/heading',
        localName: 'Heading'
      }, context, fixer);
      var elementName = ast.JSXElement.getName(node);
      var elementNameFixes = ast.JSXElement.updateName(node, 'Heading', fixer);
      var size = tagSizeMap[elementName];
      var asAttributeFix = ast.JSXElement.addAttribute(node, 'size', size, fixer);
      var testAttributeFix = updateTestIdAttributeFix(node, fixer);
      return [importFix].concat(_toConsumableArray(elementNameFixes), [asAttributeFix, testAttributeFix]).filter(function (fix) {
        return Boolean(fix);
      }); // Some of the transformers can return arrays with undefined, so filter them out
    };
  }
};