import { isNodeOfType } from 'eslint-codemod-utils';
import * as ast from '../../../ast-nodes';
// Rename data-testid prop to testId if present
export function updateTestIdAttributeFix(node, fixer) {
  var testIdAttr = ast.JSXElement.getAttributeByName(node, 'data-testid');
  if (testIdAttr) {
    return ast.JSXAttribute.updateName(testIdAttr, 'testId', fixer);
  }
}

// Add color="inherit" prop depending on config
export function addColorInheritAttributeFix(node, config, fixer) {
  if (!config.inheritColor) {
    return;
  }
  return ast.JSXElement.addAttribute(node, 'color', 'inherit', fixer);
}
export var allowedAttrs = ['id', 'data-testid', 'key'];

// Only allow elements with strings as children
// The use of `<FormattedMessage ... />` component and `{formatMessage(...)}` are allowed as these are used for i18n
export function hasTextChildrenOnly(node) {
  var _node$children;
  return (_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.every(function (child) {
    if (isNodeOfType(child, 'JSXText')) {
      return true;
    }

    // JSX child element <span><FormattedMessage /></span>
    if (isNodeOfType(child, 'JSXElement') && ast.JSXElement.getName(child) === 'FormattedMessage') {
      return true;
    }

    // JSX expression <span>{formatMessage(...)}</span>
    if (isNodeOfType(child, 'JSXExpressionContainer') && isNodeOfType(child.expression, 'CallExpression')) {
      return ast.FunctionCall.getName(child.expression) === 'formatMessage';
    }
    return false;
  });
}