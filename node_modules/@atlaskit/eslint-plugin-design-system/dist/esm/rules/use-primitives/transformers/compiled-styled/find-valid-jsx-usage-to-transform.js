import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { isNodeOfType } from 'eslint-codemod-utils';
var JSX_IDENTIFIER = 'JSXIdentifier';
/**
 * Given a component name finds its JSX usages and performs some
 * additional validations to ensure transformation can be done correctly
 *
 * anyOrder: if true, the order of the references doesn't matter (JSX or style declaration)
 */
export var findValidJsxUsageToTransform = function findValidJsxUsageToTransform(componentName, scope) {
  var _variableDeclaration$;
  var anyOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var variableDeclaration = scope.variables.find(function (v) {
    return v.name === componentName;
  });
  if (!variableDeclaration) {
    return;
  }

  // length here should be exactly 2 to indicate only two references:
  // one being the variable declaration itself
  // second being the JSX call site
  // we might consider handling multiple local JSX call sites in the future
  // but "this is good enough for now"™️
  if (variableDeclaration.references.length !== 2) {
    return;
  }
  var jsxUsage = (_variableDeclaration$ = variableDeclaration.references[1]) === null || _variableDeclaration$ === void 0 ? void 0 : _variableDeclaration$.identifier;
  if (anyOrder) {
    var _variableDeclaration$2 = variableDeclaration.references.map(function (ref) {
        return ref === null || ref === void 0 ? void 0 : ref.identifier;
      }),
      _variableDeclaration$3 = _slicedToArray(_variableDeclaration$2, 2),
      firstIdentifier = _variableDeclaration$3[0],
      secondIdentifier = _variableDeclaration$3[1];
    // Check if the first reference is a JSXOpeningElement and the second is not or vice versa
    if (isNodeOfType(firstIdentifier, JSX_IDENTIFIER) && !isNodeOfType(secondIdentifier, JSX_IDENTIFIER)) {
      jsxUsage = firstIdentifier;
    } else if (isNodeOfType(secondIdentifier, JSX_IDENTIFIER) && !isNodeOfType(firstIdentifier, JSX_IDENTIFIER)) {
      jsxUsage = secondIdentifier;
    } else {
      return;
    }
  }
  if (!isNodeOfType(jsxUsage, 'JSXIdentifier')) {
    return;
  }
  var jsxOpeningElement = jsxUsage.parent;
  // we could relatively easily support some safe attributes like
  // "id" or "testId" but support will be expanded as we go
  if (!isNodeOfType(jsxOpeningElement, 'JSXOpeningElement') || jsxOpeningElement.attributes.length > 0) {
    return;
  }
  return jsxOpeningElement;
};