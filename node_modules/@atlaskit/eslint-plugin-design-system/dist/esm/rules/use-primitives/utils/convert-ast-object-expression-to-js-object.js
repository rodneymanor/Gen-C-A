import { isNodeOfType } from 'eslint-codemod-utils';
export var SPREAD_SYNTAX = Symbol('SPREAD_SYNTAX');
/**
 * Note: Not recursive. Only handles top level key/value pairs
 */
export var convertASTObjectExpressionToJSObject = function convertASTObjectExpressionToJSObject(styles) {
  var styleObj = {
    unsupported: []
  };

  // if we see any spread props we indicate that as unsupported
  if (!styles.properties.every(function (prop) {
    return isNodeOfType(prop, 'Property');
  })) {
    styleObj.unsupported.push(SPREAD_SYNTAX);
  }
  styles.properties.forEach(function (prop) {
    if (!isNodeOfType(prop, 'Property')) {
      return;
    }
    if (!isNodeOfType(prop.key, 'Identifier')) {
      return;
    }

    // a literal string value, the base case
    if (isNodeOfType(prop.value, 'Literal') && typeof prop.value.value === 'string') {
      styleObj[prop.key.name] = prop.value.value;
      return;
    }

    // try to handle a direct call to `token`
    if (isNodeOfType(prop.value, 'CallExpression')) {
      var callExpression = prop.value;
      // strictly handle calls to `token`
      if (isNodeOfType(callExpression.callee, 'Identifier') && callExpression.callee.name === 'token') {
        // only two valid cases are supported
        // one argument  => token('space.100')
        // two arguments => token('space.100', '8px')
        if ((callExpression.arguments.length === 1 || callExpression.arguments.length === 2) && isNodeOfType(callExpression.arguments[0], 'Literal') && (typeof callExpression.arguments[1] === 'undefined' || isNodeOfType(callExpression.arguments[1], 'Literal'))) {
          var _callExpression$argum;
          styleObj[prop.key.name] = {
            tokenName: String(callExpression.arguments[0].value),
            fallbackValue: (_callExpression$argum = callExpression.arguments[1]) !== null && _callExpression$argum !== void 0 && _callExpression$argum.value ? String(callExpression.arguments[1].value) : undefined
          };
          return;
        }
      }
    }

    // if we get here we have an unsupported value
    styleObj.unsupported.push(prop.key.name);
  });
  return styleObj;
};