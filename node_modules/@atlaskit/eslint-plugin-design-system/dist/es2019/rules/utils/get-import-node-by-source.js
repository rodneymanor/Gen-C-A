/**
 * @param {SourceCode} source The eslint source
 * @param {string} path The path specified to find
 * @returns {ImportDeclaration}
 */
export const getImportedNodeBySource = (source, path) => {
  return source.ast.body.filter(node => node.type === 'ImportDeclaration').find(node => node.source.value === path);
};

/**
 * Returns the module name of an identifier, if one exists.
 *
 * getModuleOfIdentifier(source, 'Button'); // "@atlaskit/button"
 */
export const getModuleOfIdentifier = (source, identifierName) => {
  for (const node of source.ast.body) {
    if (node.type === 'ImportDeclaration') {
      for (const spec of node.specifiers) {
        if (spec.type === 'ImportDefaultSpecifier' && spec.local.name === identifierName) {
          return {
            moduleName: node.source.value + '',
            importName: identifierName
          };
        }
        if (spec.type === 'ImportSpecifier' && 'name' in spec.imported && spec.local.name === identifierName) {
          return {
            moduleName: node.source.value + '',
            importName: spec.imported.name
          };
        }
      }
    }
  }
  return undefined;
};