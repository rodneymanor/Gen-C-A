import React, { createContext, useContext } from 'react';

// Allows support for heading levels 1-9 via aria-level

const HeadingLevelContext = /*#__PURE__*/createContext(0);

/**
 * @internal
 * @returns The current heading level context.
 */
const useHeadingLevel = () => {
  return useContext(HeadingLevelContext);
};

/**
 * Infers the correct heading markup based on the current heading level context.
 */
export const useHeading = fallback => {
  const hLevel = useHeadingLevel();
  /**
   * Order here is important, we for now apply
   * 1. inferred a11y level (this only applies if context is present)
   * 2. default final fallback
   */
  return [hLevel, hLevel && (hLevel > 6 ? 'div' : `h${hLevel}`) || fallback];
};
/**
 * __Heading level provider__
 *
 * The Heading level provider injects the heading level to all `Heading` components below it in the component tree.
 *
 * @example
 * ```tsx
 * // Will correctly infer the heading level
 * <HeadingContext value={1}>
 *  <Heading>H1</Heading>
 *  <HeadingContext>
 *    <Heading>H2</Heading>
 *  </HeadingContext>
 * </HeadingContext>
 * ```
 */
const HeadingLevelContextProvider = ({
  children,
  value
}) => {
  const parentHeadingLevel = useHeadingLevel();
  const headingLevel = parentHeadingLevel + 1;
  return /*#__PURE__*/React.createElement(HeadingLevelContext.Provider, {
    value: value || headingLevel
  }, children);
};
export default HeadingLevelContextProvider;