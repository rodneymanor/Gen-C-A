"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHeading = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
// Allows support for heading levels 1-9 via aria-level

var HeadingLevelContext = /*#__PURE__*/(0, _react.createContext)(0);

/**
 * @internal
 * @returns The current heading level context.
 */
var useHeadingLevel = function useHeadingLevel() {
  return (0, _react.useContext)(HeadingLevelContext);
};

/**
 * Infers the correct heading markup based on the current heading level context.
 */
var useHeading = exports.useHeading = function useHeading(fallback) {
  var hLevel = useHeadingLevel();
  /**
   * Order here is important, we for now apply
   * 1. inferred a11y level (this only applies if context is present)
   * 2. default final fallback
   */
  return [hLevel, hLevel && (hLevel > 6 ? 'div' : "h".concat(hLevel)) || fallback];
};
/**
 * __Heading level provider__
 *
 * The Heading level provider injects the heading level to all `Heading` components below it in the component tree.
 *
 * @example
 * ```tsx
 * // Will correctly infer the heading level
 * <HeadingContext value={1}>
 *  <Heading>H1</Heading>
 *  <HeadingContext>
 *    <Heading>H2</Heading>
 *  </HeadingContext>
 * </HeadingContext>
 * ```
 */
var HeadingLevelContextProvider = function HeadingLevelContextProvider(_ref) {
  var children = _ref.children,
    value = _ref.value;
  var parentHeadingLevel = useHeadingLevel();
  var headingLevel = parentHeadingLevel + 1;
  return /*#__PURE__*/_react.default.createElement(HeadingLevelContext.Provider, {
    value: value || headingLevel
  }, children);
};
var _default = exports.default = HeadingLevelContextProvider;