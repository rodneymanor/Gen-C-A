/* indicators.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadingIndicatorCSS = exports.dropdownIndicatorCSS = exports.clearIndicatorCSS = exports.LoadingIndicator = exports.DropdownIndicator = exports.ClearIndicator = void 0;
require("./indicators.compiled.css");
var React = _interopRequireWildcard(require("react"));
var _runtime = require("@compiled/react/runtime");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react2 = require("@compiled/react");
var _chevronDown = _interopRequireDefault(require("@atlaskit/icon/core/migration/chevron-down"));
var _crossCircleSelectClear = _interopRequireDefault(require("@atlaskit/icon/core/migration/cross-circle--select-clear"));
var _compiled = require("@atlaskit/primitives/compiled");
var _spinner = _interopRequireDefault(require("@atlaskit/spinner"));
var _utils = require("../utils");
var _excluded = ["innerProps", "isRtl", "size", "isCompact", "xcss"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// ==============================
// Dropdown & Clear Icons
// ==============================

var iconContainerStyles = {
  root: "_kkk2n7od _12ji1r31 _1qu219ly _12y31o36 _1e0c1txw _4cvr1h6o _1bah1h6o _ca0qv77o _u5f3v77o _n3tdv77o _19bvv77o"
};
var dropdownWrapperStyles = {
  root: "_ca0q12x7 _u5f312x7 _n3td12x7 _19bv12x7"
};

// ==============================
// Dropdown & Clear Buttons
// ==============================

var dropdownStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz1gjq _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf",
  disabled: "_syaz1lh4"
};
var dropdownIndicatorCSS = exports.dropdownIndicatorCSS = function dropdownIndicatorCSS() {
  return {};
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var DropdownIndicator = exports.DropdownIndicator = function DropdownIndicator(props) {
  var innerProps = props.innerProps,
    children = props.children,
    isDisabled = props.isDisabled,
    isCompact = props.isCompact,
    xcss = props.xcss;
  var _getStyleProps = (0, _utils.getStyleProps)(props, 'dropdownIndicator', {
      indicator: true,
      'dropdown-indicator': true
    }),
    css = _getStyleProps.css,
    className = _getStyleProps.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: (0, _runtime.ax)([dropdownStyles.default, isDisabled && dropdownStyles.disabled, isCompact && dropdownStyles.compact, (0, _react2.cx)(className, xcss, '-indicatorContainer')])
  }, innerProps), children ? children : /*#__PURE__*/React.createElement(_compiled.Inline, {
    as: "span",
    xcss: dropdownWrapperStyles.root
  }, /*#__PURE__*/React.createElement(_chevronDown.default, {
    color: "currentColor",
    label: "open",
    LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)",
    size: "small"
  })));
};
var clearIndicatorCSS = exports.clearIndicatorCSS = function clearIndicatorCSS() {
  return {};
};
var clearIndicatorStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz131l _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf"
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var ClearIndicator = exports.ClearIndicator = function ClearIndicator(props) {
  var innerProps = props.innerProps,
    _props$clearControlLa = props.clearControlLabel,
    clearControlLabel = _props$clearControlLa === void 0 ? 'clear' : _props$clearControlLa,
    isCompact = props.isCompact,
    xcss = props.xcss;
  var _getStyleProps2 = (0, _utils.getStyleProps)(props, 'clearIndicator', {
      indicator: true,
      'clear-indicator': true
    }),
    css = _getStyleProps2.css,
    className = _getStyleProps2.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: (0, _runtime.ax)([clearIndicatorStyles.default, isCompact && clearIndicatorStyles.compact, (0, _react2.cx)(className, xcss, '-indicatorContainer')])
  }, innerProps), /*#__PURE__*/React.createElement(_compiled.Pressable, {
    xcss: iconContainerStyles.root,
    tabIndex: -1,
    "aria-label": clearControlLabel
  }, /*#__PURE__*/React.createElement(_crossCircleSelectClear.default, {
    label: "",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)",
    size: "small"
  })));
};

// ==============================
// Loading
// ==============================

var loadingIndicatorCSS = exports.loadingIndicatorCSS = function loadingIndicatorCSS() {
  return {};
};
var loadingIndicatorStyles = {
  default: "_ca0q12x7 _u5f3u2gc _n3td12x7 _19bvu2gc",
  compact: "_ca0qidpf _n3tdidpf"
};
// eslint-disable-next-line @repo/internal/react/require-jsdoc
var LoadingIndicator = exports.LoadingIndicator = function LoadingIndicator(_ref) {
  var innerProps = _ref.innerProps,
    isRtl = _ref.isRtl,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 4 : _ref$size,
    isCompact = _ref.isCompact,
    xcss = _ref.xcss,
    restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _getStyleProps3 = (0, _utils.getStyleProps)(_objectSpread(_objectSpread({}, restProps), {}, {
      innerProps: innerProps,
      isRtl: isRtl,
      size: size
    }), 'loadingIndicator', {
      indicator: true,
      'loading-indicator': true
    }),
    css = _getStyleProps3.css,
    className = _getStyleProps3.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: (0, _runtime.ax)([loadingIndicatorStyles.default, isCompact && loadingIndicatorStyles.compact, (0, _react2.cx)(className, xcss, '-loadingIndicator')])
  }, innerProps), /*#__PURE__*/React.createElement(_spinner.default, {
    size: "small"
  }));
};