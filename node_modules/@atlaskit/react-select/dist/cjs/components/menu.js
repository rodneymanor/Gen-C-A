/* menu.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noOptionsMessageCSS = exports.menuPortalCSS = exports.menuListCSS = exports.menuCSS = exports.loadingMessageCSS = exports.default = exports.NoOptionsMessage = exports.MenuPortal = exports.MenuPlacer = exports.MenuList = exports.LoadingMessage = void 0;
require("./menu.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react2 = require("@compiled/react");
var _dom = require("@floating-ui/dom");
var _reactDom = require("react-dom");
var _useIsomorphicLayoutEffect = _interopRequireDefault(require("use-isomorphic-layout-effect"));
var _compiled = require("@atlaskit/primitives/compiled");
var _utils = require("../utils");
var _excluded = ["children", "innerProps", "xcss"],
  _excluded2 = ["children", "innerProps", "xcss"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// ==============================
// Menu
// ==============================

// Get Menu Placement
// ------------------------------

function getMenuPlacement(_ref) {
  var preferredMaxHeight = _ref.maxHeight,
    menuEl = _ref.menuEl,
    minHeight = _ref.minHeight,
    preferredPlacement = _ref.placement,
    shouldScroll = _ref.shouldScroll,
    isFixedPosition = _ref.isFixedPosition,
    controlHeight = _ref.controlHeight;
  var scrollParent = (0, _utils.getScrollParent)(menuEl);
  var defaultState = {
    placement: 'bottom',
    maxHeight: preferredMaxHeight
  };

  // something went wrong, return default state
  if (!menuEl || !menuEl.offsetParent) {
    return defaultState;
  }

  // we can't trust `scrollParent.scrollHeight` --> it may increase when
  // the menu is rendered
  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(),
    scrollHeight = _scrollParent$getBoun.height;
  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(),
    menuBottom = _menuEl$getBoundingCl.bottom,
    menuHeight = _menuEl$getBoundingCl.height,
    menuTop = _menuEl$getBoundingCl.top;
  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(),
    containerTop = _menuEl$offsetParent$.top;
  var viewHeight = isFixedPosition ? window.innerHeight : (0, _utils.normalizedHeight)(scrollParent);
  var scrollTop = (0, _utils.getScrollTop)(scrollParent);
  var menuTopFromParent = menuTop;
  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
  var viewSpaceAbove = containerTop - marginTop;
  var viewSpaceBelow = viewHeight - menuTopFromParent;
  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
  var scrollSpaceBelow = scrollHeight - scrollTop - menuTopFromParent;
  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
  var scrollUp = scrollTop + menuTop - marginTop;
  var scrollDuration = 160;
  switch (preferredPlacement) {
    case 'auto':
    case 'bottom':
      // 1: the menu will fit, do nothing
      if (viewSpaceBelow >= menuHeight) {
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollDown, scrollDuration);
        }
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }

      // 3: the menu will fit, if constrained
      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollDown, scrollDuration);
        }

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
        return {
          placement: 'bottom',
          maxHeight: constrainedHeight
        };
      }

      // 4. Forked beviour when there isn't enough space below

      // AUTO: flip the menu, render above
      if (preferredPlacement === 'auto' || isFixedPosition) {
        // may need to be constrained after flipping
        var _constrainedHeight = preferredMaxHeight;
        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
        if (spaceAbove >= minHeight) {
          _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);
        }
        return {
          placement: 'top',
          maxHeight: _constrainedHeight
        };
      }

      // BOTTOM: allow browser to increase scrollable area and immediately set scroll
      if (preferredPlacement === 'bottom') {
        if (shouldScroll) {
          (0, _utils.scrollTo)(scrollParent, scrollDown);
        }
        return {
          placement: 'bottom',
          maxHeight: preferredMaxHeight
        };
      }
      break;
    case 'top':
      // 1: the menu will fit, do nothing
      if (viewSpaceAbove >= menuHeight) {
        return {
          placement: 'top',
          maxHeight: preferredMaxHeight
        };
      }

      // 2: the menu will fit, if scrolled
      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: 'top',
          maxHeight: preferredMaxHeight
        };
      }

      // 3: the menu will fit, if constrained
      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
        var _constrainedHeight2 = preferredMaxHeight;

        // we want to provide as much of the menu as possible to the user,
        // so give them whatever is available below rather than the minHeight.
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
        }
        if (shouldScroll) {
          (0, _utils.animatedScrollTo)(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: 'top',
          maxHeight: _constrainedHeight2
        };
      }

      // 4. not enough space, the browser WILL NOT increase scrollable area when
      // absolutely positioned element rendered above the viewport (only below).
      // Flip the menu, render below
      return {
        placement: 'bottom',
        maxHeight: preferredMaxHeight
      };
    default:
      throw new Error("Invalid placement provided \"".concat(preferredPlacement, "\"."));
  }
  return defaultState;
}

// Menu Component
// ------------------------------

var coercePlacement = function coercePlacement(p) {
  return p === 'auto' ? 'bottom' : p;
};
var menuStyles = {
  root: "_2rko12b0 _kqswstnw _1bsb1osq _1pbykb7n _otyru2gc _19pku2gc _bfhk1bhr _16qsd0yg",
  bottom: "_154i1osq",
  top: "_94n51osq"
};
var menuCSS = exports.menuCSS = function menuCSS() {
  return {};
};
var PortalPlacementContext = /*#__PURE__*/(0, _react.createContext)(null);

// NOTE: internal only
// eslint-disable-next-line @repo/internal/react/require-jsdoc
var MenuPlacer = exports.MenuPlacer = function MenuPlacer(props) {
  var children = props.children,
    minMenuHeight = props.minMenuHeight,
    maxMenuHeight = props.maxMenuHeight,
    menuPlacement = props.menuPlacement,
    menuPosition = props.menuPosition,
    menuShouldScrollIntoView = props.menuShouldScrollIntoView;
  var _ref2 = (0, _react.useContext)(PortalPlacementContext) || {},
    setPortalPlacement = _ref2.setPortalPlacement;
  var ref = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(maxMenuHeight),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    maxHeight = _useState2[0],
    setMaxHeight = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    placement = _useState4[0],
    setPlacement = _useState4[1];
  // The minimum height of the control
  var controlHeight = 38;
  (0, _useIsomorphicLayoutEffect.default)(function () {
    var menuEl = ref.current;
    if (!menuEl) {
      return;
    }

    // DO NOT scroll if position is fixed
    var isFixedPosition = menuPosition === 'fixed';
    var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
    var state = getMenuPlacement({
      maxHeight: maxMenuHeight,
      menuEl: menuEl,
      minHeight: minMenuHeight,
      placement: menuPlacement,
      shouldScroll: shouldScroll,
      isFixedPosition: isFixedPosition,
      controlHeight: controlHeight
    });
    setMaxHeight(state.maxHeight);
    setPlacement(state.placement);
    setPortalPlacement === null || setPortalPlacement === void 0 || setPortalPlacement(state.placement);
  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight]);
  return children({
    ref: ref,
    placerProps: _objectSpread(_objectSpread({}, props), {}, {
      placement: placement || coercePlacement(menuPlacement),
      maxHeight: maxHeight
    })
  });
};
var Menu = function Menu(props) {
  var children = props.children,
    innerRef = props.innerRef,
    innerProps = props.innerProps,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'bottom' : _props$placement,
    xcss = props.xcss;
  var _getStyleProps = (0, _utils.getStyleProps)(props, 'menu', {
      menu: true
    }),
    css = _getStyleProps.css,
    className = _getStyleProps.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: (0, _runtime.ax)([menuStyles.root, menuStyles[placement], (0, _react2.cx)(xcss, className, '-menu')])
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: css,
    ref: innerRef
  }, innerProps), children);
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = Menu; // ==============================
// Menu List
// ==============================
var menuListCSS = exports.menuListCSS = function menuListCSS() {
  return {};
};
var menuListStyles = null;

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var MenuList = exports.MenuList = function MenuList(props) {
  var children = props.children,
    innerProps = props.innerProps,
    innerRef = props.innerRef,
    isMulti = props.isMulti,
    maxHeight = props.maxHeight,
    xcss = props.xcss;
  var _getStyleProps2 = (0, _utils.getStyleProps)(props, 'menuList', {
      'menu-list': true,
      'menu-list--is-multi': isMulti
    }),
    css = _getStyleProps2.css,
    className = _getStyleProps2.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: (0, _runtime.ax)(["_kqswh2mm _18m91wug _85i5u2gc _1q51u2gc _8am5i4x0", (0, _react2.cx)(className, xcss, '-MenuList')])
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: _objectSpread(_objectSpread({}, css), {}, {
      maxHeight: maxHeight
    }),
    ref: innerRef
  }, innerProps, {
    tabIndex: -1
  }), children);
};

// ==============================
// Menu Notices
// ==============================

var noticeCSS = function noticeCSS() {
  return {};
};
var noticeStyles = null;
var noOptionsMessageCSS = exports.noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = exports.loadingMessageCSS = noticeCSS;
// eslint-disable-next-line @repo/internal/react/require-jsdoc
var NoOptionsMessage = exports.NoOptionsMessage = function NoOptionsMessage(_ref3) {
  var _ref3$children = _ref3.children,
    children = _ref3$children === void 0 ? 'No options' : _ref3$children,
    innerProps = _ref3.innerProps,
    xcss = _ref3.xcss,
    restProps = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
  var _getStyleProps3 = (0, _utils.getStyleProps)(_objectSpread(_objectSpread({}, restProps), {}, {
      children: children,
      innerProps: innerProps
    }), 'noOptionsMessage', {
      'menu-notice': true,
      'menu-notice--no-options': true
    }),
    css = _getStyleProps3.css,
    className = _getStyleProps3.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: (0, _runtime.ax)(["_85i5u2gc _1q51u2gc _y4tiutpp _bozgutpp _y3gn1h6o", (0, _react2.cx)(className, xcss, '-NoOptionsMessage')])
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: css
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    ,
    role: "option"
  }, innerProps), /*#__PURE__*/React.createElement(_compiled.Text, {
    color: "color.text.subtle"
  }, children));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var LoadingMessage = exports.LoadingMessage = function LoadingMessage(_ref4) {
  var _ref4$children = _ref4.children,
    children = _ref4$children === void 0 ? 'Loading...' : _ref4$children,
    innerProps = _ref4.innerProps,
    xcss = _ref4.xcss,
    restProps = (0, _objectWithoutProperties2.default)(_ref4, _excluded2);
  var _getStyleProps4 = (0, _utils.getStyleProps)(_objectSpread(_objectSpread({}, restProps), {}, {
      children: children,
      innerProps: innerProps
    }), 'loadingMessage', {
      'menu-notice': true,
      'menu-notice--loading': true
    }),
    css = _getStyleProps4.css,
    className = _getStyleProps4.className;
  return /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: (0, _runtime.ax)(["_85i5u2gc _1q51u2gc _y4tiutpp _bozgutpp _y3gn1h6o", (0, _react2.cx)(className, xcss, '-LoadingMessage')])
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: css
  }, innerProps, {
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    role: "option"
  }), /*#__PURE__*/React.createElement(_compiled.Text, {
    color: "color.text.subtle"
  }, children));
};

// ==============================
// Menu Portal
// ==============================

var menuPortalCSS = exports.menuPortalCSS = function menuPortalCSS() {
  return {};
};
var menuPortalStyles = {
  root: "_1pbykb7n _1ltva1vk _kqswcp1v _154i1nmo _1bsb1qxj"
};
// eslint-disable-next-line @repo/internal/react/require-jsdoc
var MenuPortal = exports.MenuPortal = function MenuPortal(props) {
  var appendTo = props.appendTo,
    children = props.children,
    controlElement = props.controlElement,
    innerProps = props.innerProps,
    menuPlacement = props.menuPlacement,
    menuPosition = props.menuPosition,
    xcss = props.xcss;
  var menuPortalRef = (0, _react.useRef)(null);
  var cleanupRef = (0, _react.useRef)(null);
  var _useState5 = (0, _react.useState)(coercePlacement(menuPlacement)),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    placement = _useState6[0],
    setPortalPlacement = _useState6[1];
  var portalPlacementContext = (0, _react.useMemo)(function () {
    return {
      setPortalPlacement: setPortalPlacement
    };
  }, []);
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    computedPosition = _useState8[0],
    setComputedPosition = _useState8[1];
  var updateComputedPosition = (0, _react.useCallback)(function () {
    if (!controlElement) {
      return;
    }
    var rect = (0, _utils.getBoundingClientObj)(controlElement);
    var scrollDistance = menuPosition === 'fixed' ? 0 : window.pageYOffset;
    var offset = rect[placement] + scrollDistance;
    if (offset !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
      setComputedPosition({
        offset: offset,
        rect: rect
      });
    }
  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
  (0, _useIsomorphicLayoutEffect.default)(function () {
    updateComputedPosition();
  }, [updateComputedPosition]);
  var runAutoUpdate = (0, _react.useCallback)(function () {
    if (typeof cleanupRef.current === 'function') {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (controlElement && menuPortalRef.current) {
      cleanupRef.current = (0, _dom.autoUpdate)(controlElement, menuPortalRef.current, updateComputedPosition, {
        elementResize: 'ResizeObserver' in window
      });
    }
  }, [controlElement, updateComputedPosition]);
  (0, _useIsomorphicLayoutEffect.default)(function () {
    runAutoUpdate();
  }, [runAutoUpdate]);
  var setMenuPortalElement = (0, _react.useCallback)(function (menuPortalElement) {
    menuPortalRef.current = menuPortalElement;
    runAutoUpdate();
  }, [runAutoUpdate]);

  // bail early if required elements aren't present
  if (!appendTo && menuPosition !== 'fixed' || !computedPosition) {
    return null;
  }
  var _getStyleProps5 = (0, _utils.getStyleProps)(_objectSpread(_objectSpread({}, props), {}, {
      offset: computedPosition.offset,
      position: menuPosition,
      rect: computedPosition.rect
    }), 'menuPortal', {
      'menu-portal': true
    }),
    css = _getStyleProps5.css,
    className = _getStyleProps5.className;

  // same wrapper element whether fixed or portalled
  var menuWrapper = /*#__PURE__*/React.createElement("div", (0, _extends2.default)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: (0, _runtime.ax)([menuPortalStyles.root, (0, _react2.cx)(className, xcss, '-MenuPortal')]),
    ref: setMenuPortalElement,
    style: _objectSpread({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      '--menu-left': "".concat(computedPosition.rect.left, "px"),
      '--menu-position': menuPosition,
      '--menu-top': "".concat(computedPosition.offset, "px"),
      '--menu-width': "".concat(computedPosition.rect.width, "px")
    }, css)
  }, innerProps), children);
  return /*#__PURE__*/React.createElement(PortalPlacementContext.Provider, {
    value: portalPlacementContext
  }, appendTo ? /*#__PURE__*/(0, _reactDom.createPortal)(menuWrapper, appendTo) : menuWrapper);
};