import { type ComponentType } from 'react';
import { type GroupBase } from '../types';
import { type ContainerProps, type IndicatorsContainerProps, type ValueContainerProps } from './containers';
import { type ControlProps } from './control';
import { type GroupHeadingProps, type GroupProps } from './group';
import { type ClearIndicatorProps, type DropdownIndicatorProps, type LoadingIndicatorProps } from './indicators';
import { type InputProps } from './input';
import { type MenuListProps, type MenuPortalProps, type MenuProps, type NoticeProps } from './menu';
import { type MultiValueGenericProps, type MultiValueProps, MultiValueRemove, type MultiValueRemoveProps } from './multi-value';
import { type OptionProps } from './option';
import { type PlaceholderProps } from './placeholder';
import { type SingleValueProps } from './single-value';
export interface SelectComponents<Option, IsMulti extends boolean, Group extends GroupBase<Option>> {
    ClearIndicator: ComponentType<ClearIndicatorProps<Option, IsMulti, Group>>;
    Control: ComponentType<ControlProps<Option, IsMulti, Group>>;
    DropdownIndicator: ComponentType<DropdownIndicatorProps<Option, IsMulti, Group>> | null;
    Group: ComponentType<GroupProps<Option, IsMulti, Group>>;
    GroupHeading: ComponentType<GroupHeadingProps<Option, IsMulti, Group>>;
    IndicatorsContainer: ComponentType<IndicatorsContainerProps<Option, IsMulti, Group>>;
    Input: ComponentType<InputProps<Option, IsMulti, Group>>;
    LoadingIndicator: ComponentType<LoadingIndicatorProps<Option, IsMulti, Group>>;
    Menu: ComponentType<MenuProps<Option, IsMulti, Group>>;
    MenuList: ComponentType<MenuListProps<Option, IsMulti, Group>>;
    MenuPortal: ComponentType<MenuPortalProps<Option, IsMulti, Group>>;
    LoadingMessage: ComponentType<NoticeProps<Option, IsMulti, Group>>;
    NoOptionsMessage: ComponentType<NoticeProps<Option, IsMulti, Group>>;
    MultiValue: ComponentType<MultiValueProps<Option, IsMulti, Group>>;
    MultiValueContainer: ComponentType<MultiValueGenericProps<Option, IsMulti, Group>>;
    MultiValueLabel: ComponentType<MultiValueGenericProps<Option, IsMulti, Group>>;
    MultiValueRemove: ComponentType<MultiValueRemoveProps<Option, IsMulti, Group>>;
    Option: ComponentType<OptionProps<Option, IsMulti, Group>>;
    Placeholder: ComponentType<PlaceholderProps<Option, IsMulti, Group>>;
    SelectContainer: ComponentType<ContainerProps<Option, IsMulti, Group>>;
    SingleValue: ComponentType<SingleValueProps<Option, IsMulti, Group>>;
    ValueContainer: ComponentType<ValueContainerProps<Option, IsMulti, Group>>;
}
export type SelectComponentsConfig<Option, IsMulti extends boolean, Group extends GroupBase<Option>> = Partial<SelectComponents<Option, IsMulti, Group>>;
export declare const components: {
    ClearIndicator: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ClearIndicatorProps<Option, IsMulti, Group>) => JSX.Element;
    Control: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ControlProps<Option, IsMulti, Group>) => JSX.Element;
    DropdownIndicator: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: DropdownIndicatorProps<Option, IsMulti, Group>) => JSX.Element;
    Group: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: GroupProps<Option, IsMulti, Group>) => JSX.Element;
    GroupHeading: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: GroupHeadingProps<Option, IsMulti, Group>) => JSX.Element;
    IndicatorsContainer: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: IndicatorsContainerProps<Option, IsMulti, Group>) => JSX.Element;
    Input: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: InputProps<Option, IsMulti, Group>) => JSX.Element;
    LoadingIndicator: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ innerProps, isRtl, size, isCompact, xcss, ...restProps }: LoadingIndicatorProps<Option, IsMulti, Group>) => JSX.Element;
    Menu: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: MenuProps<Option, IsMulti, Group>) => JSX.Element;
    MenuList: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: MenuListProps<Option, IsMulti, Group>) => JSX.Element;
    MenuPortal: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: MenuPortalProps<Option, IsMulti, Group>) => JSX.Element | null;
    LoadingMessage: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ children, innerProps, xcss, ...restProps }: NoticeProps<Option, IsMulti, Group>) => JSX.Element;
    NoOptionsMessage: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ children, innerProps, xcss, ...restProps }: NoticeProps<Option, IsMulti, Group>) => JSX.Element;
    MultiValue: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: MultiValueProps<Option, IsMulti, Group>) => JSX.Element;
    MultiValueContainer: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ children, innerProps, isFocused, isDisabled, className, xcss, }: MultiValueGenericProps<Option, IsMulti, Group>) => JSX.Element;
    MultiValueLabel: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ children, innerProps, isDisabled, hasEllipsis, className, xcss, }: MultiValueGenericProps<Option, IsMulti, Group>) => JSX.Element;
    MultiValueRemove: typeof MultiValueRemove;
    Option: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: OptionProps<Option, IsMulti, Group>) => JSX.Element;
    Placeholder: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: PlaceholderProps<Option, IsMulti, Group>) => JSX.Element;
    SelectContainer: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ContainerProps<Option, IsMulti, Group>) => JSX.Element;
    SingleValue: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: SingleValueProps<Option, IsMulti, Group>) => JSX.Element;
    ValueContainer: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ValueContainerProps<Option, IsMulti, Group>) => JSX.Element;
};
type SelectComponentsGeneric = typeof components;
interface ComponentsProps<Option, IsMulti extends boolean, Group extends GroupBase<Option>> {
    components: SelectComponentsConfig<Option, IsMulti, Group>;
}
export declare const defaultComponents: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ComponentsProps<Option, IsMulti, Group>) => SelectComponentsGeneric;
export {};
