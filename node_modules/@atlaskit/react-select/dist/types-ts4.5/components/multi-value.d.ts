/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { type ComponentType, type CSSProperties, type ReactNode } from 'react';
import { type XCSSProp } from '@compiled/react';
import type { XCSSAllProperties, XCSSAllPseudos } from '@atlaskit/css';
import { type SelectProps } from '../select';
import { type CommonPropsAndClassName, type GroupBase } from '../types';
interface MultiValueComponents<Option, IsMulti extends boolean, Group extends GroupBase<Option>> {
    Container: ComponentType<MultiValueGenericProps<Option, IsMulti, Group>>;
    Label: ComponentType<MultiValueGenericProps<Option, IsMulti, Group>>;
    Remove: ComponentType<MultiValueRemoveProps<Option, IsMulti, Group>>;
}
export interface MultiValueProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> extends CommonPropsAndClassName<Option, IsMulti, Group> {
    children: ReactNode;
    components: MultiValueComponents<Option, IsMulti, Group>;
    cropWithEllipsis?: boolean;
    data: Option;
    innerProps: JSX.IntrinsicElements['div'];
    isFocused: boolean;
    isDisabled: boolean;
    removeProps: JSX.IntrinsicElements['div'];
    index: number;
}
export declare const multiValueCSS: () => {};
export declare const multiValueLabelCSS: () => {};
export declare const multiValueRemoveCSS: () => {};
export interface MultiValueGenericProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
    children: ReactNode;
    data: any;
    innerProps: {
        className?: string;
        style?: CSSProperties;
    };
    selectProps: SelectProps<Option, IsMulti, Group>;
    isFocused?: boolean;
    isDisabled?: boolean;
    hasEllipsis?: boolean;
    className?: string | undefined;
    xcss?: XCSSProp<XCSSAllProperties, XCSSAllPseudos> | undefined;
}
export declare const MultiValueContainer: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ children, innerProps, isFocused, isDisabled, className, xcss, }: MultiValueGenericProps<Option, IsMulti, Group>) => JSX.Element;
export declare const MultiValueLabel: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ children, innerProps, isDisabled, hasEllipsis, className, xcss, }: MultiValueGenericProps<Option, IsMulti, Group>) => JSX.Element;
export interface MultiValueRemoveProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> {
    children?: ReactNode;
    data: Option;
    innerProps: JSX.IntrinsicElements['div'];
    selectProps: SelectProps<Option, IsMulti, Group>;
    isDisabled: boolean;
    isFocused?: boolean;
    className?: string | undefined;
    xcss?: XCSSProp<XCSSAllProperties, XCSSAllPseudos> | undefined;
}
export declare function MultiValueRemove<Option, IsMulti extends boolean, Group extends GroupBase<Option>>({ isDisabled, isFocused, innerProps, className, xcss, }: MultiValueRemoveProps<Option, IsMulti, Group>): JSX.Element;
declare const MultiValue: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: MultiValueProps<Option, IsMulti, Group>) => JSX.Element;
export default MultiValue;
