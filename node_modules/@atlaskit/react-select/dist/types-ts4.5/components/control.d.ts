/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import { type ReactNode, type Ref } from 'react';
import { type CommonPropsAndClassName, type GroupBase } from '../types';
export interface ControlProps<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> extends CommonPropsAndClassName<Option, IsMulti, Group> {
    /**
     * Children to render.
     */
    children: ReactNode;
    innerRef: Ref<HTMLDivElement>;
    /**
     * The mouse down event and the innerRef to pass down to the controller element.
     */
    innerProps: {};
    /**
     * Whether the select is disabled.
     */
    isDisabled: boolean;
    /**
     * Whether the select is focused.
     */
    isFocused: boolean;
    /**
     * Whether the select is invalid.
     */
    isInvalid: boolean | undefined;
    /**
     * Whether the select is compact.
     */
    isCompact?: boolean;
    appearance?: 'default' | 'subtle' | 'none';
    /**
     * Whether the select is expanded.
     */
    menuIsOpen: boolean;
}
export declare const css: () => {};
declare const Control: <Option, IsMulti extends boolean, Group extends GroupBase<Option>>(props: ControlProps<Option, IsMulti, Group>) => JSX.Element;
export default Control;
