import { useCallback, useMemo } from 'react';
import { getOptionLabel as baseGetOptionLabel, getOptionValue as baseGetOptionValue } from './builtins';
import { cleanValue, valueTernary } from './utils';
const compareOption = (inputValue = '', option, accessors) => {
  const candidate = String(inputValue).toLowerCase();
  const optionValue = String(accessors.getOptionValue(option)).toLowerCase();
  const optionLabel = String(accessors.getOptionLabel(option)).toLowerCase();
  return optionValue === candidate || optionLabel === candidate;
};
const builtins = {
  formatCreateLabel: inputValue => `Create "${inputValue}"`,
  isValidNewOption: (inputValue, selectValue, selectOptions, accessors) => !(!inputValue || selectValue.some(option => compareOption(inputValue, option, accessors)) || selectOptions.some(option => compareOption(inputValue, option, accessors))),
  getNewOptionData: (inputValue, optionLabel) => ({
    label: optionLabel,
    value: inputValue,
    __isNew__: true
  })
};

// TODO: Fill in the hook {description}.
/**
 * {description}.
 */
export default function useCreatable({
  allowCreateWhileLoading = false,
  createOptionPosition = 'last',
  formatCreateLabel = builtins.formatCreateLabel,
  isValidNewOption = builtins.isValidNewOption,
  //@ts-ignore
  getNewOptionData = builtins.getNewOptionData,
  onCreateOption,
  options: propsOptions = [],
  onChange: propsOnChange,
  ...restSelectProps
}) {
  const {
    getOptionValue = baseGetOptionValue,
    getOptionLabel = baseGetOptionLabel,
    inputValue,
    isLoading,
    isMulti,
    value,
    name
  } = restSelectProps;
  const newOption = useMemo(() => isValidNewOption(inputValue, cleanValue(value), propsOptions, {
    getOptionValue,
    getOptionLabel
  }) ? getNewOptionData(inputValue, formatCreateLabel(inputValue)) : undefined, [formatCreateLabel, getNewOptionData, getOptionLabel, getOptionValue, inputValue, isValidNewOption, propsOptions, value]);
  const options = useMemo(() => (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === 'first' ? [newOption, ...propsOptions] : [...propsOptions, newOption] : propsOptions, [allowCreateWhileLoading, createOptionPosition, isLoading, newOption, propsOptions]);
  const onChange = useCallback((newValue, actionMeta) => {
    if (actionMeta.action !== 'select-option') {
      return propsOnChange(newValue, actionMeta);
    }
    const valueArray = Array.isArray(newValue) ? newValue : [newValue];
    if (valueArray[valueArray.length - 1] === newOption) {
      if (onCreateOption) {
        onCreateOption(inputValue);
      } else {
        const newOptionData = getNewOptionData(inputValue, inputValue);
        const newActionMeta = {
          action: 'create-option',
          name,
          option: newOptionData
        };
        propsOnChange(valueTernary(isMulti, [...cleanValue(value), newOptionData], newOptionData), newActionMeta);
      }
      return;
    }
    propsOnChange(newValue, actionMeta);
  }, [getNewOptionData, inputValue, isMulti, name, newOption, onCreateOption, propsOnChange, value]);
  return {
    ...restSelectProps,
    options,
    onChange
  };
}