import memoizeOne from 'memoize-one';
import { stripDiacritics } from './diacritics';
const memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
const trimString = str => str.replace(/^\s+|\s+$/g, '');
const defaultStringify = option => `${option.label} ${option.value}`;
export const createFilter = config => (option, rawInput) => {
  if (option.data.__isNew__) {
    return true;
  }
  const {
    ignoreCase,
    ignoreAccents,
    stringify,
    trim,
    matchFrom
  } = {
    ignoreCase: true,
    ignoreAccents: true,
    stringify: defaultStringify,
    trim: true,
    matchFrom: 'any',
    ...config
  };
  let input = trim ? trimString(rawInput) : rawInput;
  let candidate = trim ? trimString(stringify(option)) : stringify(option);
  if (ignoreCase) {
    input = input.toLowerCase();
    candidate = candidate.toLowerCase();
  }
  if (ignoreAccents) {
    input = memoizedStripDiacriticsForInput(input);
    candidate = stripDiacritics(candidate);
  }
  return matchFrom === 'start' ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
};