import { containerCSS, indicatorsContainerCSS, valueContainerCSS } from './components/containers';
import { css as controlCSS } from './components/control';
import { groupCSS, groupHeadingCSS } from './components/group';
import { clearIndicatorCSS, dropdownIndicatorCSS, loadingIndicatorCSS } from './components/indicators';
import { inputCSS } from './components/input';
import { loadingMessageCSS, menuCSS, menuListCSS, menuPortalCSS, noOptionsMessageCSS } from './components/menu';
import { multiValueCSS, multiValueLabelCSS, multiValueRemoveCSS } from './components/multi-value';
import { optionCSS } from './components/option';
import { placeholderCSS } from './components/placeholder';
import { css as singleValueCSS } from './components/single-value';
export const defaultStyles = {
  clearIndicator: clearIndicatorCSS,
  container: containerCSS,
  control: controlCSS,
  dropdownIndicator: dropdownIndicatorCSS,
  group: groupCSS,
  groupHeading: groupHeadingCSS,
  indicatorsContainer: indicatorsContainerCSS,
  input: inputCSS,
  loadingIndicator: loadingIndicatorCSS,
  loadingMessage: loadingMessageCSS,
  menu: menuCSS,
  menuList: menuListCSS,
  menuPortal: menuPortalCSS,
  multiValue: multiValueCSS,
  multiValueLabel: multiValueLabelCSS,
  multiValueRemove: multiValueRemoveCSS,
  noOptionsMessage: noOptionsMessageCSS,
  option: optionCSS,
  placeholder: placeholderCSS,
  singleValue: singleValueCSS,
  valueContainer: valueContainerCSS
};
// Merge Utility
// Allows consumers to extend a base Select with additional styles

export function mergeStyles(source, target = {}) {
  // initialize with source styles
  const styles = {
    ...source
  };

  // massage in target styles
  Object.keys(target).forEach(keyAsString => {
    const key = keyAsString;
    if (source[key]) {
      styles[key] = (rsCss, props) => {
        return target[key](source[key](rsCss, props), props);
      };
    } else {
      styles[key] = target[key];
    }
  });
  return styles;
}