/* containers.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./containers.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { cx } from '@compiled/react';
import { fg } from '@atlaskit/platform-feature-flags';
import { getStyleProps } from '../../utils';

// ==============================
// Root Container
// ==============================

export const containerCSS = () => ({});
const containerStyles = {
  default: "_11c82smr _kqswh2mm _lcxv1rj4",
  rtl: "_1eim1xrj",
  disabled: "_80om13gf",
  ff_safari_input_fix: "_11c81ixg _1tn22smr"
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const SelectContainer = props => {
  const {
    children,
    innerProps,
    isDisabled,
    isRtl,
    xcss
  } = props;
  const {
    className,
    css
  } = getStyleProps(props, 'container', {
    '--is-disabled': isDisabled,
    '--is-rtl': isRtl
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([containerStyles.default, isRtl && containerStyles.rtl, isDisabled && containerStyles.disabled, fg('platform_design_system_team_safari_input_fix') && containerStyles.ff_safari_input_fix, cx(className, xcss, '-container')])
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: css
  }, innerProps), children);
};

// ==============================
// Value Container
// ==============================

export const valueContainerCSS = () => ({});
const valueContainerStyles = {
  default: "_16jlkb7n _1o9zkb7n _i0dlf1ug _1reo15vq _18m915vq _4cvr1h6o _1e0c11p5 _1n261g80 _8am5i4x0 _kqswh2mm _ca0qv77o _u5f312x7 _n3tdv77o _19bv12x7",
  flex: "_1e0c1txw",
  compact: "_ca0qze3t _u5f312x7 _n3tdze3t _19bv12x7"
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const ValueContainer = props => {
  const {
    children,
    innerProps,
    isMulti,
    hasValue,
    isCompact,
    xcss,
    selectProps: {
      controlShouldRenderValue
    }
  } = props;
  const {
    css,
    className
  } = getStyleProps(props, 'valueContainer', {
    'value-container': true,
    'value-container--is-multi': isMulti,
    'value-container--has-value': hasValue
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([valueContainerStyles.default, isMulti && hasValue && controlShouldRenderValue && valueContainerStyles.flex, isCompact && valueContainerStyles.compact, cx(className, xcss, '-ValueContainer')])
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    ,
    style: css
  }, innerProps), children);
};

// ==============================
// Indicator Container
// ==============================

export const indicatorsContainerCSS = () => ({});
const indicatorContainerStyles = null;

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const IndicatorsContainer = props => {
  const {
    children,
    innerProps,
    xcss
  } = props;
  const {
    css,
    className
  } = getStyleProps(props, 'indicatorsContainer', {
    indicators: true
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax(["_1e0c1txw _4cvr1h6o _1o9zidpf _1wpz1fhb _y4ti1b66", cx(className, xcss, '-IndicatorsContainer')])
  }, innerProps), children);
};