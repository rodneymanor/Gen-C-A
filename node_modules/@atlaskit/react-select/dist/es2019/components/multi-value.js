/* multi-value.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./multi-value.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { cx } from '@compiled/react';
import CrossIcon from '@atlaskit/icon/core/cross';
import LegacySelectClearIcon from '@atlaskit/icon/glyph/select-clear';
import { fg } from '@atlaskit/platform-feature-flags';
import { getStyleProps } from '../utils';
const multiValueStyles = {
  root: "_2rkolb4i _1e0c1txw _1ul9ze3t _1pfhv77o _12l2v77o _6rthv77o _ahbqv77o _bfhkm7j4 _p12f1osq _syazjpor _3yq3glyw",
  disabled: "_syaz1lh4 _bfhkm7j4",
  focused: "_syaz1wum _bfhkfg4m _16qs7ex6 _1aewe4h9 _6up51j28 _1xdnnqa1",
  refresh: "_2rko12b0 _1h6d14je _1dqonqa1 _189ee4h9 _bfhk1j9a"
};
export const multiValueCSS = () => ({});
export const multiValueLabelCSS = () => ({});
const multiValueLabelStyles = {
  root: "_1reo15vq _18m915vq _2rkolb4i _11c8dcr7 _o5721q9c _1q51v77o _y4tiv77o _85i5v77o _bozg12x7 _syaz1kw7",
  disabled: "_syaz1lh4",
  ellipsis: "_1bto1l2s",
  refresh: "_11c82smr _1q51idpf _85i5idpf _bozg1b66"
};
export const multiValueRemoveCSS = () => ({});
const multiValueRemoveStyles = {
  focused: "_bfhkb1q9 _lswu1rrc",
  root: "_2rko19qg _4cvr1h6o _1e0c1txw _lswu1dx5 _bozgv77o _y4tiv77o _irr31yvi _13br1jjn _1di61io2 _i5f81jjn",
  refresh: "_19itglyw _2rko12b0 _bfhksm61 _4cvr1h6o _1bah1h6o _1wpz1h6o _r06hglyw _syaz1fxt _1q51v77o _y4tiv77o _85i5v77o _bozgv77o _12l2v77o _1ah312gs _irr3166n _1di61dty"
};
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const MultiValueContainer = ({
  children,
  innerProps,
  isFocused,
  isDisabled,
  className,
  xcss
}) => {
  return /*#__PURE__*/React.createElement("div", _extends({}, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([multiValueStyles.root, isDisabled && multiValueStyles.disabled, isFocused && multiValueStyles.focused, fg('platform-component-visual-refresh') && multiValueStyles.refresh, cx(className, xcss, '-multiValue')])
  }), children);
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const MultiValueLabel = ({
  children,
  innerProps,
  isDisabled,
  hasEllipsis,
  className,
  xcss
}) => {
  return /*#__PURE__*/React.createElement("div", _extends({}, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([multiValueLabelStyles.root, isDisabled && multiValueLabelStyles.disabled, hasEllipsis && multiValueLabelStyles.ellipsis, fg('platform-component-visual-refresh') && multiValueLabelStyles.refresh, cx(className, xcss, '-MultiValueLabel')])
  }), children);
};
const disabledStyles = null;
const enabledStyles = null;
export function MultiValueRemove({
  isDisabled,
  isFocused,
  innerProps,
  className,
  xcss
}) {
  return /*#__PURE__*/React.createElement("div", _extends({}, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([multiValueRemoveStyles.root, isFocused && multiValueRemoveStyles.focused, fg('platform-component-visual-refresh') && multiValueRemoveStyles.refresh, cx(className, xcss, '-MultiValueRemove')])
  }), /*#__PURE__*/React.createElement("div", {
    "data-testid": isDisabled ? 'hide-clear-icon' : 'show-clear-icon',
    className: ax([isDisabled && "_1e0cglyw", !isDisabled && "_1e0c1kw7"])
  }, /*#__PURE__*/React.createElement(CrossIcon, {
    label: "",
    color: "currentColor",
    LEGACY_fallbackIcon: LegacySelectClearIcon,
    LEGACY_primaryColor: "transparent",
    LEGACY_secondaryColor: "inherit",
    LEGACY_size: "small",
    size: "small"
  })));
}
const MultiValue = props => {
  const {
    children,
    components,
    data,
    innerProps,
    isDisabled,
    isFocused,
    removeProps,
    selectProps,
    cropWithEllipsis
  } = props;
  const {
    Container,
    Label,
    Remove
  } = components;
  const ariaLabel = typeof children === 'string' ? children : data.label;
  const {
    css: containerCss,
    className: containerClassName
  } = getStyleProps(props, 'multiValue', {
    'multi-value': true,
    'multi-value--is-disabled': isDisabled
  });
  const {
    css: labelCss,
    className: labelClassName
  } = getStyleProps(props, 'multiValueLabel', {
    'multi-value__label': true
  });
  const {
    css: removeCss,
    className: removeClassName
  } = getStyleProps(props, 'multiValueRemove', {
    'multi-value__remove': true
  });
  return /*#__PURE__*/React.createElement(Container, {
    data: data,
    innerProps: {
      style: containerCss,
      className: containerClassName,
      ...innerProps
    }
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: containerClassName,
    isFocused: isFocused,
    isDisabled: isDisabled,
    selectProps: selectProps
  }, /*#__PURE__*/React.createElement(Label, {
    data: data,
    innerProps: {
      style: labelCss,
      className: labelClassName
    }
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: labelClassName,
    hasEllipsis: cropWithEllipsis || cropWithEllipsis === undefined,
    selectProps: selectProps
  }, children), /*#__PURE__*/React.createElement(Remove, {
    data: data,
    innerProps: {
      style: removeCss,
      className: removeClassName,
      role: 'button',
      tabIndex: -1,
      'aria-label': `${ariaLabel || 'option'}, remove`,
      ...removeProps
    }
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    ,
    className: removeClassName,
    isDisabled: isDisabled,
    selectProps: selectProps
  }));
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export default MultiValue;