/* indicators.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./indicators.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { cx } from '@compiled/react';
import DownIcon from '@atlaskit/icon/core/migration/chevron-down';
import CrossIcon from '@atlaskit/icon/core/migration/cross-circle--select-clear';
import { Inline, Pressable } from '@atlaskit/primitives/compiled';
import Spinner from '@atlaskit/spinner';
import { getStyleProps } from '../utils';

// ==============================
// Dropdown & Clear Icons
// ==============================

const iconContainerStyles = {
  root: "_kkk2n7od _12ji1r31 _1qu219ly _12y31o36 _1e0c1txw _4cvr1h6o _1bah1h6o _ca0qv77o _u5f3v77o _n3tdv77o _19bvv77o"
};
const dropdownWrapperStyles = {
  root: "_ca0q12x7 _u5f312x7 _n3td12x7 _19bv12x7"
};

// ==============================
// Dropdown & Clear Buttons
// ==============================

const dropdownStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz1gjq _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf",
  disabled: "_syaz1lh4"
};
export const dropdownIndicatorCSS = () => ({});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const DropdownIndicator = props => {
  const {
    innerProps,
    children,
    isDisabled,
    isCompact,
    xcss
  } = props;
  const {
    css,
    className
  } = getStyleProps(props, 'dropdownIndicator', {
    indicator: true,
    'dropdown-indicator': true
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax([dropdownStyles.default, isDisabled && dropdownStyles.disabled, isCompact && dropdownStyles.compact, cx(className, xcss, '-indicatorContainer')])
  }, innerProps), children ? children : /*#__PURE__*/React.createElement(Inline, {
    as: "span",
    xcss: dropdownWrapperStyles.root
  }, /*#__PURE__*/React.createElement(DownIcon, {
    color: "currentColor",
    label: "open",
    LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)",
    size: "small"
  })));
};
export const clearIndicatorCSS = () => ({});
const clearIndicatorStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz131l _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf"
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const ClearIndicator = props => {
  const {
    innerProps,
    clearControlLabel = 'clear',
    isCompact,
    xcss
  } = props;
  const {
    css,
    className
  } = getStyleProps(props, 'clearIndicator', {
    indicator: true,
    'clear-indicator': true
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax([clearIndicatorStyles.default, isCompact && clearIndicatorStyles.compact, cx(className, xcss, '-indicatorContainer')])
  }, innerProps), /*#__PURE__*/React.createElement(Pressable, {
    xcss: iconContainerStyles.root,
    tabIndex: -1,
    "aria-label": clearControlLabel
  }, /*#__PURE__*/React.createElement(CrossIcon, {
    label: "",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)",
    size: "small"
  })));
};

// ==============================
// Loading
// ==============================

export const loadingIndicatorCSS = () => ({});
const loadingIndicatorStyles = {
  default: "_ca0q12x7 _u5f3u2gc _n3td12x7 _19bvu2gc",
  compact: "_ca0qidpf _n3tdidpf"
};
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export const LoadingIndicator = ({
  innerProps,
  isRtl,
  size = 4,
  isCompact,
  xcss,
  ...restProps
}) => {
  const {
    css,
    className
  } = getStyleProps({
    ...restProps,
    innerProps,
    isRtl,
    size
  }, 'loadingIndicator', {
    indicator: true,
    'loading-indicator': true
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax([loadingIndicatorStyles.default, isCompact && loadingIndicatorStyles.compact, cx(className, xcss, '-loadingIndicator')])
  }, innerProps), /*#__PURE__*/React.createElement(Spinner, {
    size: "small"
  }));
};