/* indicators.tsx generated by @compiled/babel-plugin v0.36.1 */
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["innerProps", "isRtl", "size", "isCompact", "xcss"];
import "./indicators.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import { cx } from '@compiled/react';
import DownIcon from '@atlaskit/icon/core/migration/chevron-down';
import CrossIcon from '@atlaskit/icon/core/migration/cross-circle--select-clear';
import { Inline, Pressable } from '@atlaskit/primitives/compiled';
import Spinner from '@atlaskit/spinner';
import { getStyleProps } from '../utils';

// ==============================
// Dropdown & Clear Icons
// ==============================

var iconContainerStyles = {
  root: "_kkk2n7od _12ji1r31 _1qu219ly _12y31o36 _1e0c1txw _4cvr1h6o _1bah1h6o _ca0qv77o _u5f3v77o _n3tdv77o _19bvv77o"
};
var dropdownWrapperStyles = {
  root: "_ca0q12x7 _u5f312x7 _n3td12x7 _19bv12x7"
};

// ==============================
// Dropdown & Clear Buttons
// ==============================

var dropdownStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz1gjq _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf",
  disabled: "_syaz1lh4"
};
export var dropdownIndicatorCSS = function dropdownIndicatorCSS() {
  return {};
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export var DropdownIndicator = function DropdownIndicator(props) {
  var innerProps = props.innerProps,
    children = props.children,
    isDisabled = props.isDisabled,
    isCompact = props.isCompact,
    xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, 'dropdownIndicator', {
      indicator: true,
      'dropdown-indicator': true
    }),
    css = _getStyleProps.css,
    className = _getStyleProps.className;
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax([dropdownStyles.default, isDisabled && dropdownStyles.disabled, isCompact && dropdownStyles.compact, cx(className, xcss, '-indicatorContainer')])
  }, innerProps), children ? children : /*#__PURE__*/React.createElement(Inline, {
    as: "span",
    xcss: dropdownWrapperStyles.root
  }, /*#__PURE__*/React.createElement(DownIcon, {
    color: "currentColor",
    label: "open",
    LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)",
    size: "small"
  })));
};
export var clearIndicatorCSS = function clearIndicatorCSS() {
  return {};
};
var clearIndicatorStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz131l _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf"
};

// eslint-disable-next-line @repo/internal/react/require-jsdoc
export var ClearIndicator = function ClearIndicator(props) {
  var innerProps = props.innerProps,
    _props$clearControlLa = props.clearControlLabel,
    clearControlLabel = _props$clearControlLa === void 0 ? 'clear' : _props$clearControlLa,
    isCompact = props.isCompact,
    xcss = props.xcss;
  var _getStyleProps2 = getStyleProps(props, 'clearIndicator', {
      indicator: true,
      'clear-indicator': true
    }),
    css = _getStyleProps2.css,
    className = _getStyleProps2.className;
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax([clearIndicatorStyles.default, isCompact && clearIndicatorStyles.compact, cx(className, xcss, '-indicatorContainer')])
  }, innerProps), /*#__PURE__*/React.createElement(Pressable, {
    xcss: iconContainerStyles.root,
    tabIndex: -1,
    "aria-label": clearControlLabel
  }, /*#__PURE__*/React.createElement(CrossIcon, {
    label: "",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)",
    size: "small"
  })));
};

// ==============================
// Loading
// ==============================

export var loadingIndicatorCSS = function loadingIndicatorCSS() {
  return {};
};
var loadingIndicatorStyles = {
  default: "_ca0q12x7 _u5f3u2gc _n3td12x7 _19bvu2gc",
  compact: "_ca0qidpf _n3tdidpf"
};
// eslint-disable-next-line @repo/internal/react/require-jsdoc
export var LoadingIndicator = function LoadingIndicator(_ref) {
  var innerProps = _ref.innerProps,
    isRtl = _ref.isRtl,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 4 : _ref$size,
    isCompact = _ref.isCompact,
    xcss = _ref.xcss,
    restProps = _objectWithoutProperties(_ref, _excluded);
  var _getStyleProps3 = getStyleProps(_objectSpread(_objectSpread({}, restProps), {}, {
      innerProps: innerProps,
      isRtl: isRtl,
      size: size
    }), 'loadingIndicator', {
      indicator: true,
      'loading-indicator': true
    }),
    css = _getStyleProps3.css,
    className = _getStyleProps3.className;
  return /*#__PURE__*/React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    ,
    className: ax([loadingIndicatorStyles.default, isCompact && loadingIndicatorStyles.compact, cx(className, xcss, '-loadingIndicator')])
  }, innerProps), /*#__PURE__*/React.createElement(Spinner, {
    size: "small"
  }));
};