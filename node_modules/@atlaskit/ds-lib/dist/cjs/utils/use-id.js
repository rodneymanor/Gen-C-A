"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof3 = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdProvider = void 0;
exports.useId = useId;
exports.useIdSeed = useIdSeed;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _react = _interopRequireWildcard(require("react"));
var _reactUid = require("react-uid");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _React$useId;
/**
 * I suggest using this as a reference for the feature gate tidy:
 * @see https://bitbucket.org/atlassian/atlassian-frontend-monorepo/pull-requests/211376
 */
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof3(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
// Type copied from https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L12
// Copied rather than inferred to make the type transparent

// @ts-ignore - useId is not accessible in React 16
var react18UseId = (_React$useId = _react.default.useId) !== null && _React$useId !== void 0 ? _React$useId : undefined;

/**
 * Based on a feature gate, returns a unique id using `react-uid` or `React.useId()`
 * or `React.useId()` with a string replace to match React 19 functionality
 * @see https://github.com/facebook/react/pull/33422
 *
 * Generally, you should just use `React.useId()` directly as we're on React 18.
 * You can use this function if you need to use the generated id in a HTML selector
 * as `React.useId()` currently does not generate HTML selector safe ids.
 * However, using these identifiers in selectors should be avoided, even in tests,
 * so `React.useId()` is heavily encouraged.
 */
function useId() {
  if (react18UseId && (0, _platformFeatureFlags.fg)('platform-dst-react-18-use-id')) {
    if ((0, _platformFeatureFlags.fg)('platform-dst-react-18-use-id-selector-safe')) {
      // tl;dr: React uses `:` or `«»` in selectors which breaks `document.querySelector(…)`
      // in hundreds of tests. So we replace it with a safe string of `_` to match future
      // React 19 functionality: https://github.com/facebook/react/pull/33422
      return react18UseId().replace(/[:«»]/g, '_');
    }
    return react18UseId();
  }
  return "uid".concat((0, _reactUid.useUID)());
}
/**
 * A wrapper component that allows access to an id generated by useId within a class component.
 *
 * This component is only intended for class components, function components
 * should probably use `React.useId()` directly.
 *
 * @private
 * @deprecated This import shouldn't be used, suggested to use `React.useId()` directly. It is kept for class component compatibility.
 */
var IdProvider = exports.IdProvider = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
    _ref$postfix = _ref.postfix,
    postfix = _ref$postfix === void 0 ? '' : _ref$postfix,
    _ref$prefix = _ref.prefix,
    prefix = _ref$prefix === void 0 ? '' : _ref$prefix;
  var id = "".concat(prefix).concat(useId()).concat(postfix);
  (0, _react.useEffect)(function () {
    if (!ref) {
      return;
    }
    switch ((0, _typeof2.default)(ref)) {
      case 'function':
        ref(id);
        break;
      case 'object':
        ref.current = id;
        break;
      default:
        throw new Error("Unreachable case for unsupported type of ref \"".concat((0, _typeof2.default)(ref), "\""));
    }
  }, [id, ref]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, typeof children === 'function' ? children({
    id: id
  }) : children);
});

/**
 * Returns an id generator
 *
 * @private
 * @deprecated This import shouldn't be used, suggested to use `React.useId()` directly.
 */
function useIdSeed() {
  if (react18UseId && (0, _platformFeatureFlags.fg)('platform-dst-react-18-use-id')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks -- cleanup with feature gating
    var uid = useId();
    return function (id) {
      return "".concat(uid, "-").concat(id.toString());
    };
  }
  return (0, _reactUid.useUIDSeed)();
}