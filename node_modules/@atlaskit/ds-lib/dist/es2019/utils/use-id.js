var _React$useId;
import React, { forwardRef, useEffect } from 'react';
import { useUID as react16UseId, useUIDSeed as react16UseIdSeed } from 'react-uid';

/**
 * I suggest using this as a reference for the feature gate tidy:
 * @see https://bitbucket.org/atlassian/atlassian-frontend-monorepo/pull-requests/211376
 */
import { fg } from '@atlaskit/platform-feature-flags';

// Type copied from https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L12
// Copied rather than inferred to make the type transparent

// @ts-ignore - useId is not accessible in React 16
const react18UseId = (_React$useId = React.useId) !== null && _React$useId !== void 0 ? _React$useId : undefined;

/**
 * Based on a feature gate, returns a unique id using `react-uid` or `React.useId()`
 * or `React.useId()` with a string replace to match React 19 functionality
 * @see https://github.com/facebook/react/pull/33422
 *
 * Generally, you should just use `React.useId()` directly as we're on React 18.
 * You can use this function if you need to use the generated id in a HTML selector
 * as `React.useId()` currently does not generate HTML selector safe ids.
 * However, using these identifiers in selectors should be avoided, even in tests,
 * so `React.useId()` is heavily encouraged.
 */
export function useId() {
  if (react18UseId && fg('platform-dst-react-18-use-id')) {
    if (fg('platform-dst-react-18-use-id-selector-safe')) {
      // tl;dr: React uses `:` or `«»` in selectors which breaks `document.querySelector(…)`
      // in hundreds of tests. So we replace it with a safe string of `_` to match future
      // React 19 functionality: https://github.com/facebook/react/pull/33422
      return react18UseId().replace(/[:«»]/g, '_');
    }
    return react18UseId();
  }
  return `uid${react16UseId()}`;
}
/**
 * A wrapper component that allows access to an id generated by useId within a class component.
 *
 * This component is only intended for class components, function components
 * should probably use `React.useId()` directly.
 *
 * @private
 * @deprecated This import shouldn't be used, suggested to use `React.useId()` directly. It is kept for class component compatibility.
 */
export const IdProvider = /*#__PURE__*/forwardRef(({
  children,
  postfix = '',
  prefix = ''
}, ref) => {
  const id = `${prefix}${useId()}${postfix}`;
  useEffect(() => {
    if (!ref) {
      return;
    }
    switch (typeof ref) {
      case 'function':
        ref(id);
        break;
      case 'object':
        ref.current = id;
        break;
      default:
        throw new Error(`Unreachable case for unsupported type of ref "${typeof ref}"`);
    }
  }, [id, ref]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, typeof children === 'function' ? children({
    id
  }) : children);
});

/**
 * Returns an id generator
 *
 * @private
 * @deprecated This import shouldn't be used, suggested to use `React.useId()` directly.
 */
export function useIdSeed() {
  if (react18UseId && fg('platform-dst-react-18-use-id')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks -- cleanup with feature gating
    const uid = useId();
    return id => `${uid}-${id.toString()}`;
  }
  return react16UseIdSeed();
}