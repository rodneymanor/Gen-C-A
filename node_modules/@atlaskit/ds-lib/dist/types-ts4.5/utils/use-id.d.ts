import React, { type ReactNode } from 'react';
type SeedGenerator = (id: any) => string;
/**
 * Based on a feature gate, returns a unique id using `react-uid` or `React.useId()`
 * or `React.useId()` with a string replace to match React 19 functionality
 * @see https://github.com/facebook/react/pull/33422
 *
 * Generally, you should just use `React.useId()` directly as we're on React 18.
 * You can use this function if you need to use the generated id in a HTML selector
 * as `React.useId()` currently does not generate HTML selector safe ids.
 * However, using these identifiers in selectors should be avoided, even in tests,
 * so `React.useId()` is heavily encouraged.
 */
export declare function useId(): string;
export interface IdProviderProps {
    /**
     * Children to render.
     * Maybe a function that receives the unique id as an argument.
     */
    children: ReactNode | ((props: {
        id: string;
    }) => ReactNode);
    /**
     * A prefix to be added to the generated id.
     */
    prefix?: string;
    /**
     * A postfix to be added to the generated id.
     */
    postfix?: string;
}
/**
 * A wrapper component that allows access to an id generated by useId within a class component.
 *
 * This component is only intended for class components, function components
 * should probably use `React.useId()` directly.
 *
 * @private
 * @deprecated This import shouldn't be used, suggested to use `React.useId()` directly. It is kept for class component compatibility.
 */
export declare const IdProvider: React.ForwardRefExoticComponent<IdProviderProps & React.RefAttributes<string>>;
/**
 * Returns an id generator
 *
 * @private
 * @deprecated This import shouldn't be used, suggested to use `React.useId()` directly.
 */
export declare function useIdSeed(): SeedGenerator;
export {};
