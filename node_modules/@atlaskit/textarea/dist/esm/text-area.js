/* text-area.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["resize", "appearance", "isCompact", "isRequired", "isReadOnly", "isDisabled", "isInvalid", "isMonospaced", "minimumRows", "testId", "maxHeight", "onBlur", "onFocus", "onChange", "value", "style"];
import "./text-area.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { forwardRef, memo, useCallback, useEffect, useMemo, useRef } from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { B200, N0, N10, N20, N200, N30, N70, N900, R400 } from '@atlaskit/theme/colors';
var packageName = "@atlaskit/textarea";
var packageVersion = "0.0.0-development";
var analyticsParams = {
  componentName: 'textArea',
  packageName: packageName,
  packageVersion: packageVersion
};
var lineHeightBase = 20;
var lineHeightCompact = 16;
var compactVerticalPadding = 2;
var verticalPadding = 6;
var transitionDuration = '0.2s';
var borderWidth = 2;
var baseStyles = null;
var appearanceStyles = {
  standard: "_1dqonqa1 _kp821elr _1ltx1j9a _1bqs13gt _z1pvsyzs _19wt1elr _12ym1d5g _19qkv77o _1dbiv77o _1etu1v6z _zedr1v6z _1itd12x7 _1a4912x7 _17km1v6z _wg601v6z _858u1p6i _jomrr01l _7ehiq049 _186j1p6i _qu18syzs",
  subtle: "_1dqonqa1 _kp821j28 _1ltx1j28 _19wt1elr _12ym1d5g _19qkv77o _1dbiv77o _1etu1v6z _zedr1v6z _1itd12x7 _1a4912x7 _wg601v6z _17km1v6z _858u1p6i _jomrr01l _7ehiq049",
  none: "_1dqoglyw _kp821j28 _1ltx1j28 _19wt1j28 _12ym1j28 _19qkv77o _zedr12x7 _1dbiv77o _1etu12x7 _1itd12x7 _wg6012x7 _1a4912x7 _17km12x7 _858u1j28 _jomr1j28 _7ehi3sij"
};
var fontStyles = {
  default: "_ect41gqc",
  monospace: "_ect41odn _1tn22smr _14mdudxr",
  large: "_11c81ixg _1tn22smr"
};
var resizeStyles = {
  horizontal: "_14zg1e08",
  vertical: "_14zg1e54",
  auto: "_14zg1hrf",
  smart: "_14zgglyw",
  none: "_14zgglyw"
};
var setSmartHeight = function setSmartHeight(el) {
  // Always reset height to auto before calculating new height
  el.style.height = 'auto';
  var borderHeight = borderWidth;
  var paddingBoxHeight = el.scrollHeight;
  var borderBoxHeight = paddingBoxHeight + borderHeight * 2;
  el.style.height = "".concat(borderBoxHeight, "px");
};
var InnerTextArea = /*#__PURE__*/forwardRef(function (props, ref) {
  var ourRef = useRef(null);
  var _props$resize = props.resize,
    resize = _props$resize === void 0 ? 'smart' : _props$resize,
    _props$appearance = props.appearance,
    appearance = _props$appearance === void 0 ? 'standard' : _props$appearance,
    _props$isCompact = props.isCompact,
    isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
    _props$isRequired = props.isRequired,
    isRequired = _props$isRequired === void 0 ? false : _props$isRequired,
    _props$isReadOnly = props.isReadOnly,
    isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly,
    _props$isDisabled = props.isDisabled,
    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,
    _props$isInvalid = props.isInvalid,
    isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid,
    _props$isMonospaced = props.isMonospaced,
    isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced,
    _props$minimumRows = props.minimumRows,
    minimumRows = _props$minimumRows === void 0 ? 2 : _props$minimumRows,
    testId = props.testId,
    _props$maxHeight = props.maxHeight,
    maxHeight = _props$maxHeight === void 0 ? '50vh' : _props$maxHeight,
    onBlur = props.onBlur,
    onFocus = props.onFocus,
    onChange = props.onChange,
    value = props.value,
    style = props.style,
    rest = _objectWithoutProperties(props, _excluded);
  var borderHeight = useMemo(function () {
    return appearance === 'none' ? 2 : 1;
  }, [appearance]);
  useEffect(function () {
    var el = ourRef.current;
    if (resize === 'smart' && el) {
      setSmartHeight(el);
    }
  }, [resize, value]);
  var onBlurWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event) {
      onBlur && onBlur(event);
    },
    action: 'blurred'
  }, analyticsParams));
  var onFocusWithAnalytics = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event) {
      onFocus && onFocus(event);
    },
    action: 'focused'
  }, analyticsParams));
  var getTextAreaRef = function getTextAreaRef(elementRef) {
    ourRef.current = elementRef;
    if (ref && _typeof(ref) === 'object') {
      // @ts-ignore
      ref.current = elementRef;
    }
    if (ref && typeof ref === 'function') {
      ref(elementRef);
    }
  };
  var handleOnChange = useCallback(function (e) {
    var el = ourRef.current;
    if (resize === 'smart' && el) {
      setSmartHeight(el);
    }
    onChange && onChange(e);
  }, [onChange, resize]);
  var controlProps = {
    'data-invalid': isInvalid ? isInvalid : undefined,
    'data-compact': isCompact ? isCompact : undefined,
    'data-testid': testId ? testId : undefined
  };
  var compactMinHeightStyles = null;
  return /*#__PURE__*/React.createElement("textarea", _extends({}, controlProps, {
    value: value,
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    ref: getTextAreaRef,
    onChange: handleOnChange,
    onBlur: onBlurWithAnalytics,
    onFocus: onFocusWithAnalytics,
    rows: minimumRows
  }, rest, {
    className: ax(["_19pkidpf _2hwxidpf _otyridpf _18u0idpf _16jlkb7n _1o9zkb7n _i0dl1osq _2rkofajl _11c82smr _12ji1r31 _1qu2glyw _12y31o36 _1reo1wug _18m91wug _v5641gs0 _189ee4h9 _1e0c1ule _vchhusvi _1bsb1osq _1ul9idpf _p12f1osq _kqswh2mm _syazovqm _slp31hna _153gksl0 _usy41kd8 _1a2sh9qi _vbqbhxcb _j5dh13gf _cfjqkb7n _k3o7n7od _1goxglyw _13xeglyw _1fraksl0 _ibjd12ci _6zpvh9qi _19k01ouc _1idrpsu8 _1lephxcb _nmhq1fiz _1n388sxn _1luh3zdg _ndzbkwt5 _1vj0119y", appearanceStyles[appearance], fg('platform_design_system_team_safari_input_fix') && fontStyles['large'], fontStyles[isMonospaced ? 'monospace' : 'default'], resizeStyles[resize], "_uzq71d1b _16lw1cn1"]),
    style: _objectSpread(_objectSpread({}, style), {}, {
      maxHeight: maxHeight,
      "--_5xk3r4": ix("var(--ds-text, ".concat(N900, ")")),
      "--_19uzta9": ix("background-color ".concat(transitionDuration, " ease-in-out,\n               border-color ").concat(transitionDuration, " ease-in-out")),
      "--_dnrmjm": ix("var(--ds-text-disabled, ".concat(N70, ")")),
      "--_t0vtv2": ix("var(--ds-background-input-pressed, ".concat(N0, ")")),
      "--_xjqa3d": ix("var(--ds-border-focused, ".concat(B200, ")")),
      "--_1n75f5r": ix("inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", "var(--ds-border-focused, ".concat(B200, ")"))),
      "--_4mkb4g": ix("var(--ds-background-input, ".concat(N10, ")")),
      "--_1u9fbts": ix("var(--ds-border-danger, ".concat(R400, ")")),
      "--_1l1juom": ix("inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", "var(--ds-border-danger, ".concat(R400, ")"))),
      "--_r5pknd": ix("var(--ds-background-disabled, ".concat(N20, ")")),
      "--_1z08gfx": ix("var(--ds-background-input-hovered, ".concat(N30, ")")),
      "--_vrm7dk": ix("var(--ds-text-subtlest, ".concat(N200, ")")),
      "--_dqsusn": ix("".concat(lineHeightCompact * minimumRows + compactVerticalPadding * 2 + borderHeight * 2, "px")),
      "--_n9nqvh": ix("".concat(lineHeightBase * minimumRows + verticalPadding * 2 + borderHeight * 2, "px"))
    })
  }));
});

/**
 * __Text area__
 *
 * A text area lets users enter long form text which spans over multiple lines.
 *
 * - [Examples](https://atlassian.design/components/textarea/examples)
 * - [Code](https://atlassian.design/components/textarea/code)
 * - [Usage](https://atlassian.design/components/textarea/usage)
 */
var TextArea = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TextArea(props, ref) {
  return /*#__PURE__*/React.createElement(InnerTextArea, _extends({
    ref: ref
  }, props));
}));
TextArea.displayName = 'TextArea';
export default TextArea;