/* text-area.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import "./text-area.compiled.css";
import { ax, ix } from "@compiled/react/runtime";
import React, { forwardRef, memo, useCallback, useEffect, useMemo, useRef } from 'react';
import { usePlatformLeafEventHandler } from '@atlaskit/analytics-next';
import { fg } from '@atlaskit/platform-feature-flags';
import { B200, N0, N10, N20, N200, N30, N70, N900, R400 } from '@atlaskit/theme/colors';
const packageName = "@atlaskit/textarea";
const packageVersion = "0.0.0-development";
const analyticsParams = {
  componentName: 'textArea',
  packageName,
  packageVersion
};
const lineHeightBase = 20;
const lineHeightCompact = 16;
const compactVerticalPadding = 2;
const verticalPadding = 6;
const transitionDuration = '0.2s';
const borderWidth = 2;
const baseStyles = null;
const appearanceStyles = {
  standard: "_1dqonqa1 _kp821elr _1ltx1j9a _1bqs13gt _z1pvsyzs _19wt1elr _12ym1d5g _19qkv77o _1dbiv77o _1etu1v6z _zedr1v6z _1itd12x7 _1a4912x7 _17km1v6z _wg601v6z _858u1p6i _jomrr01l _7ehiq049 _186j1p6i _qu18syzs",
  subtle: "_1dqonqa1 _kp821j28 _1ltx1j28 _19wt1elr _12ym1d5g _19qkv77o _1dbiv77o _1etu1v6z _zedr1v6z _1itd12x7 _1a4912x7 _wg601v6z _17km1v6z _858u1p6i _jomrr01l _7ehiq049",
  none: "_1dqoglyw _kp821j28 _1ltx1j28 _19wt1j28 _12ym1j28 _19qkv77o _zedr12x7 _1dbiv77o _1etu12x7 _1itd12x7 _wg6012x7 _1a4912x7 _17km12x7 _858u1j28 _jomr1j28 _7ehi3sij"
};
const fontStyles = {
  default: "_ect41gqc",
  monospace: "_ect41odn _1tn22smr _14mdudxr",
  large: "_11c81ixg _1tn22smr"
};
const resizeStyles = {
  horizontal: "_14zg1e08",
  vertical: "_14zg1e54",
  auto: "_14zg1hrf",
  smart: "_14zgglyw",
  none: "_14zgglyw"
};
const setSmartHeight = el => {
  // Always reset height to auto before calculating new height
  el.style.height = 'auto';
  const borderHeight = borderWidth;
  const paddingBoxHeight = el.scrollHeight;
  const borderBoxHeight = paddingBoxHeight + borderHeight * 2;
  el.style.height = `${borderBoxHeight}px`;
};
const InnerTextArea = /*#__PURE__*/forwardRef((props, ref) => {
  const ourRef = useRef(null);
  const {
    resize = 'smart',
    appearance = 'standard',
    isCompact = false,
    isRequired = false,
    isReadOnly = false,
    isDisabled = false,
    isInvalid = false,
    isMonospaced = false,
    minimumRows = 2,
    testId,
    maxHeight = '50vh',
    onBlur,
    onFocus,
    onChange,
    value,
    style,
    ...rest
  } = props;
  const borderHeight = useMemo(() => appearance === 'none' ? 2 : 1, [appearance]);
  useEffect(() => {
    const el = ourRef.current;
    if (resize === 'smart' && el) {
      setSmartHeight(el);
    }
  }, [resize, value]);
  const onBlurWithAnalytics = usePlatformLeafEventHandler({
    fn: event => {
      onBlur && onBlur(event);
    },
    action: 'blurred',
    ...analyticsParams
  });
  const onFocusWithAnalytics = usePlatformLeafEventHandler({
    fn: event => {
      onFocus && onFocus(event);
    },
    action: 'focused',
    ...analyticsParams
  });
  const getTextAreaRef = elementRef => {
    ourRef.current = elementRef;
    if (ref && typeof ref === 'object') {
      // @ts-ignore
      ref.current = elementRef;
    }
    if (ref && typeof ref === 'function') {
      ref(elementRef);
    }
  };
  const handleOnChange = useCallback(e => {
    const el = ourRef.current;
    if (resize === 'smart' && el) {
      setSmartHeight(el);
    }
    onChange && onChange(e);
  }, [onChange, resize]);
  const controlProps = {
    'data-invalid': isInvalid ? isInvalid : undefined,
    'data-compact': isCompact ? isCompact : undefined,
    'data-testid': testId ? testId : undefined
  };
  const compactMinHeightStyles = null;
  return /*#__PURE__*/React.createElement("textarea", _extends({}, controlProps, {
    value: value,
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    ref: getTextAreaRef,
    onChange: handleOnChange,
    onBlur: onBlurWithAnalytics,
    onFocus: onFocusWithAnalytics,
    rows: minimumRows
  }, rest, {
    className: ax(["_19pkidpf _2hwxidpf _otyridpf _18u0idpf _16jlkb7n _1o9zkb7n _i0dl1osq _2rkofajl _11c82smr _12ji1r31 _1qu2glyw _12y31o36 _1reo1wug _18m91wug _v564r5cv _189ee4h9 _1e0c1ule _vchhusvi _1bsb1osq _1ul9idpf _p12f1osq _kqswh2mm _syazj3m3 _slp31hna _153g78r2 _usy4mag2 _1a2sr6rt _vbqb9jg2 _j5dh13gf _cfjqkb7n _k3o7n7od _1goxglyw _13xeglyw _1fra78r2 _ibjd10ko _6zpvr6rt _19k01y1w _1idr1wmz _1lep9jg2 _nmhq1fiz _1n388sxn _1luh194a _ndzbr01l _1vj01cu8", appearanceStyles[appearance], fg('platform_design_system_team_safari_input_fix') && fontStyles['large'], fontStyles[isMonospaced ? 'monospace' : 'default'], resizeStyles[resize], "_uzq71i7i _16lwuel1"]),
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      ...style,
      maxHeight,
      "--_6ny3x7": ix(lineHeightCompact * minimumRows + compactVerticalPadding * 2 + borderHeight * 2, "px"),
      "--_eorxnz": ix(lineHeightBase * minimumRows + verticalPadding * 2 + borderHeight * 2, "px")
    }
  }));
});

/**
 * __Text area__
 *
 * A text area lets users enter long form text which spans over multiple lines.
 *
 * - [Examples](https://atlassian.design/components/textarea/examples)
 * - [Code](https://atlassian.design/components/textarea/code)
 * - [Usage](https://atlassian.design/components/textarea/usage)
 */
const TextArea = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function TextArea(props, ref) {
  return /*#__PURE__*/React.createElement(InnerTextArea, _extends({
    ref: ref
  }, props));
}));
TextArea.displayName = 'TextArea';
export default TextArea;