"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAppearanceIconStyles = getAppearanceIconStyles;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _discoveryEditorNote = _interopRequireDefault(require("@atlaskit/icon/core/migration/discovery--editor-note"));
var _questionCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/question-circle"));
var _statusErrorError = _interopRequireDefault(require("@atlaskit/icon/core/migration/status-error--error"));
var _statusInformationInfo = _interopRequireDefault(require("@atlaskit/icon/core/migration/status-information--info"));
var _statusSuccessCheckCircle = _interopRequireDefault(require("@atlaskit/icon/core/migration/status-success--check-circle"));
var _statusWarningWarning = _interopRequireDefault(require("@atlaskit/icon/core/migration/status-warning--warning"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _colors = require("@atlaskit/theme/colors");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var appearanceIconSchema = {
  information: {
    backgroundColor: "var(--ds-background-information, ".concat(_colors.B50, ")"),
    Icon: _statusInformationInfo.default,
    primaryIconColor: "var(--ds-icon-information, ".concat(_colors.B500, ")")
  },
  warning: {
    backgroundColor: "var(--ds-background-warning, ".concat(_colors.Y50, ")"),
    Icon: _statusWarningWarning.default,
    primaryIconColor: "var(--ds-icon-warning, ".concat(_colors.Y500, ")")
  },
  error: {
    backgroundColor: "var(--ds-background-danger, ".concat(_colors.R50, ")"),
    Icon: _statusErrorError.default,
    primaryIconColor: "var(--ds-icon-danger, ".concat(_colors.R500, ")")
  },
  success: {
    backgroundColor: "var(--ds-background-success, ".concat(_colors.G50, ")"),
    Icon: _statusSuccessCheckCircle.default,
    primaryIconColor: "var(--ds-icon-success, ".concat(_colors.G500, ")")
  },
  discovery: {
    backgroundColor: "var(--ds-background-discovery, ".concat(_colors.P50, ")"),
    Icon: _questionCircle.default,
    primaryIconColor: "var(--ds-icon-discovery, ".concat(_colors.P500, ")")
  },
  discoveryUpdated: {
    backgroundColor: "var(--ds-background-discovery, ".concat(_colors.P50, ")"),
    Icon: _discoveryEditorNote.default,
    primaryIconColor: "var(--ds-icon-discovery, ".concat(_colors.P500, ")")
  }
};
function getAppearanceIconStyles(appearance, icon) {
  var appearanceIconStyles = appearanceIconSchema[appearance === 'discovery' && (0, _platformFeatureFlags.fg)('platform_dst_section_message_discovery_icon') ? 'discoveryUpdated' : appearance] || appearanceIconSchema.information;
  var AppearanceIcon = function AppearanceIcon(_ref) {
    var size = _ref.size,
      primaryColor = _ref.primaryColor,
      secondaryColor = _ref.secondaryColor;
    return /*#__PURE__*/_react.default.createElement(appearanceIconStyles.Icon, {
      LEGACY_size: size,
      color: primaryColor,
      spacing: "spacious",
      LEGACY_primaryColor: primaryColor,
      LEGACY_secondaryColor: secondaryColor,
      label: appearance
    });
  };
  var Icon = icon || AppearanceIcon;
  return _objectSpread(_objectSpread({}, appearanceIconStyles), {}, {
    Icon: Icon
  });
}