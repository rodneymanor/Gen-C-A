/**
 * TODO: Consider whether this should be replaced by ESLint's compat library.
 * Either way, this should be removed once we no longer need to support ESLint versions less than 8.40.
 */

/**
 * Returns the SourceCode object from the ESLint rule context.
 * Compatibility layer to support older versions of ESLint.
 * @param context - The ESLint rule context
 */

export function getSourceCode(context) {
  var _context$sourceCode;
  // `context.sourceCode` is the preferred way to access SourceCode, as
  // `context.getSourceCode()` is deprecated in v8 and removed in v9.
  // this needs to be ts-ignore because if other products use a different eslint/typescript-eslint version, it will fail in
  // those builds, but not for platform
  // @ts-ignore platform uses typescript-eslint v6 which doesn't have `context.sourceCode` yet
  return (_context$sourceCode = context.sourceCode) !== null && _context$sourceCode !== void 0 ? _context$sourceCode : context.getSourceCode();
}

/**
 * Returns the Scope object from the ESLint rule context.
 * Compatibility layer to support older versions of ESLint.
 * @param context - The ESLint rule context
 * @param node - The node to get the scope for
 */

export function getScope(context, node) {
  var _getSourceCode$getSco, _getSourceCode, _getSourceCode$getSco2;
  // `context.sourceCode.getScope()` is the preferred way to access Scope, as
  // `context.getScope()` was removed in v9.
  // @ts-expect-error difference in types between typescript eslint and eslint
  return (_getSourceCode$getSco = (_getSourceCode = getSourceCode(context)) === null || _getSourceCode === void 0 || (_getSourceCode$getSco2 = _getSourceCode.getScope) === null || _getSourceCode$getSco2 === void 0 ? void 0 : _getSourceCode$getSco2.call(_getSourceCode, node)) !== null && _getSourceCode$getSco !== void 0 ? _getSourceCode$getSco : context.getScope();
}
export function getAncestors(context, node) {
  // `context.getAncestors()` is only available in ESLint v8.40.0+.
  // @ts-expect-error difference in types between typescript eslint and eslint
  var sourceCode = getSourceCode(context);
  // @ts-expect-error platform uses typescript-eslint v6 which doesn't have `context.sourceCode.getAncestors` yet
  return sourceCode.getAncestors ? sourceCode.getAncestors(node) : context.getAncestors();
}

// compatibility layer for `context.getAllComments()` -> `context.sourceCode.getAllComments()`

export function getAllComments(context) {
  // `context.getAllComments()` is only available in ESLint v8.40.0+.
  // @ts-expect-error difference in types between typescript eslint and eslint
  var sourceCode = getSourceCode(context);
  // @ts-expect-error type mismatch between the overloads
  return sourceCode.getAllComments ? sourceCode.getAllComments() : context.getAllComments();
}

// `context.getDeclaredVariables()` -> `context.sourceCode.getDeclaredVariables(node)`

export function getDeclaredVariables(context, node) {
  // `context.getDeclaredVariables()` is only available in ESLint v8.40.0+.
  // @ts-expect-error difference in types between typescript eslint and eslint
  var sourceCode = getSourceCode(context);
  // @ts-expect-error mismatch between the overloads and ts eslint/eslint
  return sourceCode.getDeclaredVariables ?
  // @ts-expect-error mismatch between the overloads and ts eslint/eslint
  sourceCode.getDeclaredVariables(node) :
  // @ts-expect-error mismatch between the overloads and ts eslint/eslint
  context.getDeclaredVariables(node);
}