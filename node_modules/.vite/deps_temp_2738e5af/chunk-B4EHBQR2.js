import {
  Popper,
  useNotifyOpenLayerObserver
} from "./chunk-LGAGC2D5.js";
import {
  layers
} from "./chunk-PLHDLCB6.js";
import {
  N0,
  N800
} from "./chunk-XIW5VD7B.js";
import {
  require_react_dom
} from "./chunk-G52XTN3B.js";
import {
  useIdSeed
} from "./chunk-AHQOMMXQ.js";
import {
  noop
} from "./chunk-KXQMNIDH.js";
import {
  usePlatformLeafSyntheticEventHandler
} from "./chunk-UHS3SSUE.js";
import {
  require_dist
} from "./chunk-CGH4DJNJ.js";
import {
  fg,
  init_esm
} from "./chunk-GTO4PDQE.js";
import {
  _slicedToArray,
  _toConsumableArray,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-XN5DX7DZ.js";
import {
  ax,
  cssCustomPropertyValue,
  init_runtime
} from "./chunk-ZNWH4LFA.js";
import {
  _defineProperty,
  init_defineProperty
} from "./chunk-LBGAJG32.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/ds-lib/dist/esm/utils/keycodes.js
var KEY_UP = "ArrowUp";
var KEY_DOWN = "ArrowDown";
var KEY_HOME = "Home";
var KEY_END = "End";
var KEY_TAB = "Tab";
var KEY_ENTER = "Enter";
var KEY_SPACE = "Space";
var ESCAPE = "Escape";

// node_modules/@atlaskit/motion/dist/esm/entering/exiting-persistence.js
init_slicedToArray();
var import_react = __toESM(require_react());
var emptyContext = {
  // Motions will always appear if not inside a exiting persistence component.
  appear: true,
  isExiting: false
};
var ExitingContext = (0, import_react.createContext)(emptyContext);
var wrapChildWithContextProvider = function wrapChildWithContextProvider2(child) {
  var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyContext;
  return import_react.default.createElement(ExitingContext.Provider, {
    key: "".concat(child.key, "-provider"),
    value
  }, child);
};
var childrenToArray = function childrenToArray2(children) {
  var childrenAsArray = [];
  import_react.Children.toArray(children).forEach(function(child) {
    if (typeof child !== "boolean" && Boolean(child)) {
      childrenAsArray.push(child);
    }
  });
  return childrenAsArray;
};
var spliceNewElementsIntoPrevious = function spliceNewElementsIntoPrevious2(current, previous) {
  var splicedChildren = previous.concat([]);
  var previousMap = childrenToObj(previous);
  for (var i = 0; i < current.length; i++) {
    var child = current[i];
    var childIsNew = !previousMap[child.key];
    if (childIsNew) {
      splicedChildren.splice(i + 1, 0, child);
    }
  }
  return splicedChildren;
};
var childrenToObj = function childrenToObj2(children) {
  return children.reduce(function(acc, child) {
    acc[child.key] = child;
    return acc;
  }, {});
};
var getMissingKeys = function getMissingKeys2(current, previous) {
  var currentMapKeys = new Set(current.map(function(child) {
    return child.key;
  }));
  var missing = /* @__PURE__ */ new Set();
  for (var i = 0; i < previous.length; i++) {
    var element = previous[i];
    var _key = element.key;
    if (!currentMapKeys.has(_key)) {
      missing.add(_key);
    }
  }
  return missing;
};
var ExitingPersistence = (0, import_react.memo)(function(_ref) {
  var _ref$appear = _ref.appear, appear = _ref$appear === void 0 ? false : _ref$appear, children = _ref.children, exitThenEnter = _ref.exitThenEnter;
  var _useState = (0, import_react.useState)([null, children]), _useState2 = _slicedToArray(_useState, 2), stateChildren = _useState2[0], setChildren = _useState2[1];
  var _useState3 = (0, import_react.useState)([]), _useState4 = _slicedToArray(_useState3, 2), exitingChildren = _useState4[0], setExitingChildren = _useState4[1];
  var _useState5 = (0, import_react.useState)(function() {
    return {
      appear,
      isExiting: false
    };
  }), _useState6 = _slicedToArray(_useState5, 2), defaultContext = _useState6[0], setDefaultContext = _useState6[1];
  (0, import_react.useEffect)(function() {
    if (!defaultContext.appear) {
      setDefaultContext({
        appear: true,
        isExiting: false
      });
    }
  }, []);
  if (typeof stateChildren === "boolean") {
    return children;
  }
  var _stateChildren = _slicedToArray(stateChildren, 2), previousChildren = _stateChildren[0], currentChildren = _stateChildren[1];
  var previous = childrenToArray(previousChildren);
  var current = childrenToArray(currentChildren);
  if (currentChildren !== children) {
    setChildren([currentChildren, children]);
  }
  var missingKeys = getMissingKeys(current, previous);
  var isSomeChildRemoved = !!missingKeys.size;
  var visibleChildren = current;
  if (isSomeChildRemoved) {
    visibleChildren = spliceNewElementsIntoPrevious(current, previous);
  }
  if (exitThenEnter) {
    if (exitingChildren.length) {
      visibleChildren = exitingChildren;
    } else {
      var nextExitingChildren = visibleChildren.filter(function(child) {
        return missingKeys.has(child.key);
      });
      if (nextExitingChildren.length) {
        setExitingChildren(nextExitingChildren);
      }
    }
  }
  if (missingKeys.size) {
    visibleChildren = visibleChildren.map(function(child) {
      var isExiting = missingKeys.has(child.key);
      return wrapChildWithContextProvider(child, {
        appear: true,
        isExiting,
        onFinish: isExiting ? function() {
          missingKeys.delete(child.key);
          if (missingKeys.size === 0) {
            setChildren([null, children]);
            setExitingChildren([]);
          }
        } : void 0
      });
    });
  } else {
    visibleChildren = visibleChildren.map(function(child) {
      return wrapChildWithContextProvider(child, defaultContext);
    });
  }
  return visibleChildren;
});
var useExitingPersistence = function useExitingPersistence2() {
  return (0, import_react.useContext)(ExitingContext);
};
ExitingPersistence.displayName = "ExitingPersistence";
var exiting_persistence_default = ExitingPersistence;

// node_modules/@atlaskit/motion/dist/esm/entering/fade-in.js
var import_react8 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.js
init_slicedToArray();
var import_react7 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.compiled.css";

// node_modules/@atlaskit/motion/dist/esm/utils/accessibility.js
init_slicedToArray();
var import_react2 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
var isMatchMediaAvailable = function isMatchMediaAvailable2() {
  return typeof window !== "undefined" && "matchMedia" in window;
};
var isReducedMotion = function isReducedMotion2() {
  if (!isMatchMediaAvailable()) {
    return false;
  }
  var _window$matchMedia = window.matchMedia("(prefers-reduced-motion: reduce)"), matches = _window$matchMedia.matches;
  return matches;
};

// node_modules/@atlaskit/motion/dist/esm/utils/durations.js
var durations = {
  none: 0,
  small: 100,
  medium: 350,
  large: 700
};
var EXITING_MOTION_MULTIPLIER = 0.5;
var exitingDurations = {
  none: durations.none,
  small: durations.small * EXITING_MOTION_MULTIPLIER,
  medium: durations.medium * EXITING_MOTION_MULTIPLIER,
  large: durations.large * EXITING_MOTION_MULTIPLIER
};

// node_modules/@atlaskit/motion/dist/esm/utils/timer-hooks.js
var import_react3 = __toESM(require_react());
var getHookDeps = function getHookDeps2(opts) {
  switch (opts.cleanup) {
    case "next-effect":
      return void 0;
    case "unmount":
    default:
      return [];
  }
};
var useSetTimeout = function useSetTimeout2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    cleanup: "unmount"
  };
  var timeouts = (0, import_react3.useRef)([]);
  (0, import_react3.useEffect)(function() {
    return function() {
      if (timeouts.current.length) {
        timeouts.current.forEach(function(id) {
          return clearTimeout(id);
        });
        timeouts.current = [];
      }
    };
  }, getHookDeps(opts));
  return (0, import_react3.useCallback)(function(handler, timeout) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var id = setTimeout.apply(void 0, [function() {
      timeouts.current = timeouts.current.filter(function(timeoutId) {
        return timeoutId !== id;
      });
      handler();
    }, timeout].concat(args));
    timeouts.current.push(id);
  }, []);
};

// node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js
init_slicedToArray();
var import_react6 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-layout-effect.js
var import_react4 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-unique-id.js
var import_react5 = __toESM(require_react());
function useUniqueId() {
  var identifier = (0, import_react5.useRef)("");
  if (!identifier.current) {
    identifier.current = "_" + (Number(String(Math.random()).slice(2)) + Date.now() + Math.round(performance.now())).toString(36);
  }
  return identifier.current;
}

// node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js
var StaggeredEntranceContext = (0, import_react6.createContext)(function() {
  return {
    isReady: true,
    delay: 0,
    ref: noop
  };
});
var useStaggeredEntrance = function useStaggeredEntrance2() {
  var indentifier = useUniqueId();
  var context = (0, import_react6.useContext)(StaggeredEntranceContext);
  return context(indentifier);
};

// node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.js
var EnteringMotion = function EnteringMotion2(_ref) {
  var children = _ref.children, animationTimingFunction = _ref.animationTimingFunction, _ref$animationTimingF = _ref.animationTimingFunctionExiting, animationTimingFunctionExiting = _ref$animationTimingF === void 0 ? animationTimingFunction : _ref$animationTimingF, enteringAnimation = _ref.enteringAnimation, _ref$exitingAnimation = _ref.exitingAnimation, exitingAnimation = _ref$exitingAnimation === void 0 ? enteringAnimation : _ref$exitingAnimation, isPaused = _ref.isPaused, onFinishMotion = _ref.onFinish, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? "large" : _ref$duration;
  var staggered = useStaggeredEntrance();
  var _useExitingPersistenc = useExitingPersistence(), isExiting = _useExitingPersistenc.isExiting, onExitFinished = _useExitingPersistenc.onFinish, appear = _useExitingPersistenc.appear;
  var setTimeout2 = useSetTimeout();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? "exiting" : "entering";
  var _useState = (0, import_react7.useState)(appear), _useState2 = _slicedToArray(_useState, 2), hasAnimationStyles = _useState2[0], setHasAnimationStyles = _useState2[1];
  (0, import_react7.useEffect)(function() {
    var isCancelled = false;
    if (paused) {
      return;
    }
    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    }
    var onAnimationEnd = function onAnimationEnd2() {
      if (state === "exiting") {
        onExitFinished === null || onExitFinished === void 0 || onExitFinished();
      }
      if (!isCancelled) {
        setHasAnimationStyles(false);
      }
      onFinishMotion === null || onFinishMotion === void 0 || onFinishMotion(state);
    };
    if (isReducedMotion()) {
      onAnimationEnd();
      return;
    }
    setHasAnimationStyles(true);
    setTimeout2(onAnimationEnd, isExiting ? exitingDurations[duration] : durations[duration] + delay);
    return function() {
      isCancelled = true;
    };
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout2]);
  return children({
    ref: staggered.ref,
    // @ts-expect-error: `ax` is not typed correctly
    className: hasAnimationStyles ? ax([ax(["_1o51eoah _1y0co91m _1bumglyw _sedtglyw"]), paused && ax(["_1y0ctrqk"]), duration === "small" && ax(["_5sag1yx9"]), duration === "medium" && ax(["_5sag1ttt"]), duration === "large" && ax(["_5sagpwmj"]), isExiting && duration === "small" && ax(["_5sag14ed"]), isExiting && duration === "medium" && ax(["_5sagluct"]), isExiting && duration === "large" && ax(["_5sag1ttt"]), isExiting && ax(["_ju255cps _1o51q7pw"]), !isExiting && animationTimingFunction === "linear" && ax(["_1pglp3kn"]), !isExiting && animationTimingFunction === "ease-out" && ax(["_1pgldkwg"]), !isExiting && animationTimingFunction === "ease-in" && ax(["_1pgl1nzg"]), !isExiting && animationTimingFunction === "ease-in-40-out" && ax(["_1pgl5y64"]), !isExiting && animationTimingFunction === "ease-in-60-out" && ax(["_1pgl1ddy"]), !isExiting && animationTimingFunction === "ease-in-80-out" && ax(["_1pglannl"]), !isExiting && animationTimingFunction === "ease-in-out" && ax(["_1pgl1fu8"]), isExiting && animationTimingFunction === "linear" && ax(["_1pglp3kn"]), isExiting && animationTimingFunctionExiting === "ease-out" && ax(["_1pgldkwg"]), isExiting && animationTimingFunctionExiting === "ease-in" && ax(["_1pgl1nzg"]), isExiting && animationTimingFunctionExiting === "ease-in-40-out" && ax(["_1pgl5y64"]), isExiting && animationTimingFunctionExiting === "ease-in-60-out" && ax(["_1pgl1ddy"]), isExiting && animationTimingFunctionExiting === "ease-in-80-out" && ax(["_1pglannl"]), isExiting && animationTimingFunctionExiting === "ease-in-out" && ax(["_1pgl1fu8"]), (!isExiting && enteringAnimation === "fade-in" || isExiting && exitingAnimation === "fade-in") && ax(["_j7hq1cgr"]), (!isExiting && enteringAnimation === "fade-out" || isExiting && exitingAnimation === "fade-out") && ax(["_j7hq1lln"]), (!isExiting && enteringAnimation === "zoom-in" || isExiting && exitingAnimation === "zoom-in") && ax(["_j7hqe8p0"]), (!isExiting && enteringAnimation === "zoom-out" || isExiting && exitingAnimation === "zoom-out") && ax(["_j7hqy6ql"]), (!isExiting && enteringAnimation === "slide-in-from-top" || isExiting && exitingAnimation === "slide-in-from-top") && ax(["_j7hqqshu"]), (!isExiting && enteringAnimation === "slide-out-from-top" || isExiting && exitingAnimation === "slide-out-from-top") && ax(["_j7hq7ri4"]), (!isExiting && enteringAnimation === "slide-in-from-right" || isExiting && exitingAnimation === "slide-in-from-right") && ax(["_j7hqdfjr"]), (!isExiting && enteringAnimation === "slide-out-from-right" || isExiting && exitingAnimation === "slide-out-from-right") && ax(["_j7hqonfj"]), (!isExiting && enteringAnimation === "slide-in-from-bottom" || isExiting && exitingAnimation === "slide-in-from-bottom") && ax(["_j7hq1liq"]), (!isExiting && enteringAnimation === "slide-out-from-bottom" || isExiting && exitingAnimation === "slide-out-from-bottom") && ax(["_j7hqhnf1"]), (!isExiting && enteringAnimation === "slide-in-from-left" || isExiting && exitingAnimation === "slide-in-from-left") && ax(["_j7hq1bh1"]), (!isExiting && enteringAnimation === "slide-out-from-left" || isExiting && exitingAnimation === "slide-out-from-left") && ax(["_j7hqj08w"]), (!isExiting && enteringAnimation === "fade-in-from-top" || isExiting && exitingAnimation === "fade-in-from-top") && ax(["_j7hq2iua"]), (!isExiting && enteringAnimation === "fade-out-from-top" || isExiting && exitingAnimation === "fade-out-from-top") && ax(["_j7hq39va"]), (!isExiting && enteringAnimation === "fade-in-from-left" || isExiting && exitingAnimation === "fade-in-from-left") && ax(["_j7hq15m2"]), (!isExiting && enteringAnimation === "fade-out-from-left" || isExiting && exitingAnimation === "fade-out-from-left") && ax(["_j7hq1yiv"]), (!isExiting && enteringAnimation === "fade-in-from-bottom" || isExiting && exitingAnimation === "fade-in-from-bottom") && ax(["_j7hq1w00"]), (!isExiting && enteringAnimation === "fade-out-from-bottom" || isExiting && exitingAnimation === "fade-out-from-bottom") && ax(["_j7hqzy3z"]), (!isExiting && enteringAnimation === "fade-in-from-right" || isExiting && exitingAnimation === "fade-in-from-right") && ax(["_j7hqpqak"]), (!isExiting && enteringAnimation === "fade-out-from-right" || isExiting && exitingAnimation === "fade-out-from-right") && ax(["_j7hq1ebg"]), (!isExiting && enteringAnimation === "fade-in-from-top-constant" || isExiting && exitingAnimation === "fade-in-from-top-constant") && ax(["_j7hqm2e2"]), (!isExiting && enteringAnimation === "fade-out-from-top-constant" || isExiting && exitingAnimation === "fade-out-from-top-constant") && ax(["_j7hq97jn"]), (!isExiting && enteringAnimation === "fade-in-from-left-constant" || isExiting && exitingAnimation === "fade-in-from-left-constant") && ax(["_j7hqovgq"]), (!isExiting && enteringAnimation === "fade-out-from-left-constant" || isExiting && exitingAnimation === "fade-out-from-left-constant") && ax(["_j7hq15do"]), (!isExiting && enteringAnimation === "fade-in-from-bottom-constant" || isExiting && exitingAnimation === "fade-in-from-bottom-constant") && ax(["_j7hq797a"]), (!isExiting && enteringAnimation === "fade-out-from-bottom-constant" || isExiting && exitingAnimation === "fade-out-from-bottom-constant") && ax(["_j7hqwo7r"]), (!isExiting && enteringAnimation === "fade-in-from-right-constant" || isExiting && exitingAnimation === "fade-in-from-right-constant") && ax(["_j7hqt8u5"]), (!isExiting && enteringAnimation === "fade-out-from-right-constant" || isExiting && exitingAnimation === "fade-out-from-right-constant") && ax(["_j7hq1pgp"])]) : "",
    style: {
      animationDelay: "".concat(delay, "ms")
    }
  }, state);
};
var keyframes_motion_default = EnteringMotion;

// node_modules/@atlaskit/motion/dist/esm/entering/fade-in.js
var invertedDirection = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var FadeIn = function FadeIn2(_ref) {
  var children = _ref.children, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? "large" : _ref$duration, entranceDirection = _ref.entranceDirection, exitDirection = _ref.exitDirection, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? "proportional" : _ref$distance, onFinish = _ref.onFinish, isPaused = _ref.isPaused;
  var invertedEntranceDirection = entranceDirection !== void 0 ? invertedDirection[entranceDirection] : void 0;
  var isExitDirect = Boolean(exitDirection || invertedEntranceDirection) ? "fade-out-from-".concat(exitDirection || invertedEntranceDirection).concat(distance === "proportional" ? "" : "-constant") : "fade-out";
  return import_react8.default.createElement(keyframes_motion_default, {
    duration,
    enteringAnimation: entranceDirection ? "fade-in-from-".concat(entranceDirection).concat(distance === "proportional" ? "" : "-constant") : "fade-in",
    exitingAnimation: isExitDirect,
    animationTimingFunction: "ease-in-out",
    onFinish,
    isPaused
  }, children);
};
var fade_in_default = FadeIn;

// node_modules/@atlaskit/portal/dist/esm/portal.js
var import_react14 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal.js
var import_react9 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@atlaskit/portal/dist/esm/internal/constants.js
var portalParentClassName = "atlaskit-portal-container";
var portalParentSelector = "body > .atlaskit-portal-container";
var portalClassName = "atlaskit-portal";

// node_modules/@atlaskit/portal/dist/esm/internal/utils/portal-dom-utils.js
var createContainer = function createContainer2(zIndex) {
  var container = document.createElement("div");
  container.className = portalClassName;
  container.style.zIndex = "".concat(zIndex);
  return container;
};
var getBody = function getBody2() {
  return document.body;
};
var getPortalParent = function getPortalParent2() {
  var parentElement = document.querySelector(portalParentSelector);
  if (!parentElement) {
    var _getBody;
    var parent = document.createElement("div");
    parent.className = portalParentClassName;
    parent.style.display = "flex";
    (_getBody = getBody()) === null || _getBody === void 0 || _getBody.appendChild(parent);
    return parent;
  }
  return parentElement;
};
var removePortalContainer = function removePortalContainer2(container) {
  getPortalParent().removeChild(container);
};
var appendPortalContainerIfNotAppended = function appendPortalContainerIfNotAppended2(container) {
  if (!container.parentElement) {
    getPortalParent().appendChild(container);
  }
};
var isDocumentDefined = function isDocumentDefined2() {
  return document !== void 0;
};
var createAtlaskitPortal = function createAtlaskitPortal2(zIndex) {
  if (isDocumentDefined()) {
    var atlaskitportal = document.createElement("div");
    atlaskitportal.className = portalClassName;
    atlaskitportal.style.zIndex = "".concat(zIndex);
    return atlaskitportal;
  }
};
var createPortalParent = function createPortalParent2() {
  if (isDocumentDefined()) {
    var parentElement = document.querySelector(portalParentSelector);
    if (!parentElement) {
      var _getBody2;
      var parent = document.createElement("div");
      parent.className = portalParentClassName;
      parent.style.display = "flex";
      (_getBody2 = getBody()) === null || _getBody2 === void 0 || _getBody2.appendChild(parent);
      return parent;
    }
    return parentElement;
  }
};

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal.js
function InternalPortal(props) {
  var zIndex = props.zIndex, children = props.children;
  var container = (0, import_react9.useMemo)(function() {
    return createContainer(zIndex);
  }, [zIndex]);
  appendPortalContainerIfNotAppended(container);
  (0, import_react9.useEffect)(function() {
    return function() {
      removePortalContainer(container);
    };
  }, [container]);
  return (0, import_react_dom.createPortal)(children, container);
}

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal-new.js
init_slicedToArray();
var import_react11 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-isomorphic-layout-effect.js
var import_react10 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react10.useLayoutEffect : import_react10.useEffect;

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal-new.js
function InternalPortalNew(props) {
  var zIndex = props.zIndex, children = props.children;
  var _useState = (0, import_react11.useState)(null), _useState2 = _slicedToArray(_useState, 2), atlaskitPortal = _useState2[0], setAtlaskitPortal = _useState2[1];
  useIsomorphicLayoutEffect(function() {
    var tempPortalContainer = createAtlaskitPortal(zIndex);
    setAtlaskitPortal(tempPortalContainer);
    var portalParent = createPortalParent();
    if (!tempPortalContainer || !portalParent) {
      return;
    }
    portalParent.appendChild(tempPortalContainer);
    return function() {
      if (tempPortalContainer) {
        portalParent.removeChild(tempPortalContainer);
      }
      setAtlaskitPortal(null);
    };
  }, [zIndex]);
  var suspendedChildren = import_react11.default.createElement(import_react11.Suspense, {
    fallback: null
  }, children);
  return atlaskitPortal ? (0, import_react_dom2.createPortal)(suspendedChildren, atlaskitPortal) : null;
}

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-is-subsequent-render.js
init_slicedToArray();
var import_react12 = __toESM(require_react());
var useIsSubsequentRender = function useIsSubsequentRender2(mountStrategy) {
  var _useState = (0, import_react12.useState)(false), _useState2 = _slicedToArray(_useState, 2), isSubsequentRender = _useState2[0], setIsSubsequentRender = _useState2[1];
  var _useState3 = (0, import_react12.useState)(function() {
    return mountStrategy === "layoutEffect" ? useIsomorphicLayoutEffect : import_react12.useEffect;
  }), _useState4 = _slicedToArray(_useState3, 1), useMountEffect = _useState4[0];
  useMountEffect(function() {
    setIsSubsequentRender(true);
  }, []);
  return isSubsequentRender;
};
var use_is_subsequent_render_default = useIsSubsequentRender;

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-portal-event.js
var import_react13 = __toESM(require_react());

// node_modules/@atlaskit/portal/dist/esm/constants.js
var PORTAL_MOUNT_EVENT = "akPortalMount";
var PORTAL_UNMOUNT_EVENT = "akPortalUnmount";

// node_modules/@atlaskit/portal/dist/esm/internal/utils/portal-custom-event.js
var zIndexToName = {
  100: "card",
  200: "navigation",
  300: "dialog",
  400: "layer",
  500: "blanket",
  510: "modal",
  600: "flag",
  700: "spotlight",
  9999: "tooltip"
};
var getLayerName = function getLayerName2(zIndex) {
  return zIndexToName.hasOwnProperty(zIndex) ? zIndexToName[zIndex] : null;
};
var getEvent = function getEvent2(eventName, zIndex) {
  var detail = {
    layer: getLayerName(Number(zIndex)),
    zIndex
  };
  return new CustomEvent(eventName, {
    detail
  });
};
function firePortalEvent(eventName, zIndex) {
  var event = getEvent(eventName, zIndex);
  window.dispatchEvent(event);
}

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-portal-event.js
var useFirePortalEvent = function useFirePortalEvent2(zIndex) {
  var zIndexNumber = Number(zIndex);
  (0, import_react13.useEffect)(function() {
    firePortalEvent(PORTAL_MOUNT_EVENT, zIndexNumber);
    return function() {
      firePortalEvent(PORTAL_UNMOUNT_EVENT, zIndexNumber);
    };
  }, [zIndexNumber]);
};
var use_portal_event_default = useFirePortalEvent;

// node_modules/@atlaskit/portal/dist/esm/portal.js
function Portal(_ref) {
  var _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex, children = _ref.children, _ref$mountStrategy = _ref.mountStrategy, mountStrategy = _ref$mountStrategy === void 0 ? "effect" : _ref$mountStrategy;
  var isSubsequentRender = use_is_subsequent_render_default(mountStrategy);
  use_portal_event_default(zIndex);
  return !fg("platform_design_system_team_portal_logic_r18_fix") ? isSubsequentRender ? import_react14.default.createElement(InternalPortal, {
    zIndex
  }, children) : null : import_react14.default.createElement(InternalPortalNew, {
    zIndex
  }, children);
}

// node_modules/@atlaskit/tooltip/dist/esm/tooltip.js
init_extends();
init_slicedToArray();
init_defineProperty();
var import_react26 = __toESM(require_react());
var import_bind_event_listener4 = __toESM(require_dist());

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-close-on-escape-press.js
var import_react15 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());
init_esm();
function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose, isDisabled = _ref.isDisabled;
  var escapePressed = (0, import_react15.useRef)(false);
  var onKeyDown = (0, import_react15.useCallback)(function(e) {
    if (isDisabled || escapePressed.current || e.key !== ESCAPE) {
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled]);
  var onKeyUp = (0, import_react15.useCallback)(function() {
    escapePressed.current = false;
  }, []);
  (0, import_react15.useEffect)(function() {
    if (isDisabled && fg("platform_only_attach_escape_handler_on_view")) {
      return;
    }
    return (0, import_bind_event_listener2.bindAll)(document, [{
      type: "keydown",
      listener: onKeyDown
    }, {
      type: "keyup",
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp, isDisabled]);
}

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-stable-ref.js
var import_react16 = __toESM(require_react());
function useStableRef(value) {
  var ref = (0, import_react16.useRef)(value);
  (0, import_react16.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref;
}

// node_modules/@atlaskit/motion/dist/esm/utils/curves.js
var easeInOut = "cubic-bezier(0.15,1,0.3,1)";

// node_modules/@atlaskit/motion/dist/esm/entering/animate-in.js
var import_react17 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/resizing/height.js
init_objectWithoutProperties();
init_slicedToArray();
var import_react20 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-element-ref.js
var import_react18 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-snapshot-before-update.js
var import_react19 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/zoom-in.js
var import_react21 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/slide-in.js
var import_react22 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/shrink-out.js
init_slicedToArray();

// node_modules/@atlaskit/tooltip/dist/esm/tooltip.js
init_esm();

// node_modules/@atlaskit/popper/dist/esm/popper.js
init_slicedToArray();
var import_react23 = __toESM(require_react());

// node_modules/@atlaskit/popper/dist/esm/max-size.js
init_slicedToArray();
function getMaxSizeModifiers(_ref) {
  var viewportPadding2 = _ref.viewportPadding;
  return [{
    /**
     * Performing DOM measurements in the 'read' phase,
     * which is the convention for popper modifiers
     */
    name: "maxSizeData",
    enabled: true,
    phase: "read",
    fn: function fn(_ref2) {
      var state = _ref2.state, name = _ref2.name;
      if (!window.visualViewport) {
        return;
      }
      state.modifiersData[name] = {
        viewport: {
          width: window.visualViewport.width,
          height: window.visualViewport.height
        }
      };
    }
  }, {
    /**
     * Applying max size CSS
     */
    name: "maxSize",
    enabled: true,
    phase: "beforeWrite",
    requiresIfExists: ["offset", "preventOverflow", "flip"],
    fn: function fn(_ref3) {
      var _data$viewport, _data$viewport2, _state$modifiersData$2, _state$modifiersData;
      var state = _ref3.state;
      var data = state.modifiersData.maxSizeData;
      if (typeof (data === null || data === void 0 || (_data$viewport = data.viewport) === null || _data$viewport === void 0 ? void 0 : _data$viewport.width) !== "number" || typeof (data === null || data === void 0 || (_data$viewport2 = data.viewport) === null || _data$viewport2 === void 0 ? void 0 : _data$viewport2.height) !== "number") {
        return;
      }
      var viewport = data.viewport;
      var _state$modifiersData$ = state.modifiersData.popperOffsets, popperOffsets = _state$modifiersData$ === void 0 ? {
        x: 0,
        y: 0
      } : _state$modifiersData$;
      var _state$placement$spli = state.placement.split("-"), _state$placement$spli2 = _slicedToArray(_state$placement$spli, 1), basePlacement = _state$placement$spli2[0];
      var placementOffset = (_state$modifiersData$2 = (_state$modifiersData = state.modifiersData) === null || _state$modifiersData === void 0 || (_state$modifiersData = _state$modifiersData.offset) === null || _state$modifiersData === void 0 ? void 0 : _state$modifiersData[state.placement]) !== null && _state$modifiersData$2 !== void 0 ? _state$modifiersData$2 : {
        x: 0,
        y: 0
      };
      var maxWidth = viewport.width - 2 * viewportPadding2;
      var maxHeight = viewport.height - 2 * viewportPadding2;
      if (basePlacement === "top") {
        maxHeight = state.rects.reference.y + // Viewport-relative position of reference element
        placementOffset.y - // Space between popper and reference
        viewportPadding2;
      }
      if (basePlacement === "bottom") {
        maxHeight = viewport.height - popperOffsets.y - // Viewport-relative position of popper
        viewportPadding2;
      }
      if (basePlacement === "left") {
        maxWidth = state.rects.reference.x + // Viewport-relative position of reference element
        placementOffset.x - // Space between popper and reference
        viewportPadding2;
      }
      if (basePlacement === "right") {
        maxWidth = viewport.width - popperOffsets.x - // Viewport-relative position of popper
        viewportPadding2;
      }
      state.styles.popper.maxWidth = "".concat(maxWidth, "px");
      state.styles.popper.maxHeight = "".concat(maxHeight, "px");
    }
  }];
}

// node_modules/@atlaskit/popper/dist/esm/popper.js
var viewportPadding = 5;
var constantModifiers = [{
  name: "flip",
  options: {
    flipVariations: false,
    padding: viewportPadding,
    boundary: "clippingParents",
    rootBoundary: "viewport"
  }
}];
function defaultChildrenFn() {
  return null;
}
var defaultOffset = [0, 8];
function Popper2(_ref) {
  var _ref$children = _ref.children, children = _ref$children === void 0 ? defaultChildrenFn : _ref$children, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? defaultOffset : _ref$offset, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom-start" : _ref$placement, _ref$referenceElement = _ref.referenceElement, referenceElement = _ref$referenceElement === void 0 ? void 0 : _ref$referenceElement, modifiers = _ref.modifiers, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "fixed" : _ref$strategy, _ref$shouldFitViewpor = _ref.shouldFitViewport, shouldFitViewport = _ref$shouldFitViewpor === void 0 ? false : _ref$shouldFitViewpor;
  var _offset = _slicedToArray(offset, 2), offsetX = _offset[0], offsetY = _offset[1];
  var internalModifiers = (0, import_react23.useMemo)(function() {
    var preventOverflowModifier = {
      name: "preventOverflow",
      options: {
        padding: viewportPadding,
        rootBoundary: shouldFitViewport ? "viewport" : "document"
      }
    };
    var offsetModifier = {
      name: "offset",
      options: {
        offset: [offsetX, offsetY]
      }
    };
    var maxSizeModifiers = shouldFitViewport ? getMaxSizeModifiers({
      viewportPadding
    }) : [];
    return [].concat(constantModifiers, [preventOverflowModifier, offsetModifier], _toConsumableArray(maxSizeModifiers));
  }, [offsetX, offsetY, shouldFitViewport]);
  var mergedModifiers = (0, import_react23.useMemo)(function() {
    if (modifiers == null) {
      return internalModifiers;
    }
    return [].concat(_toConsumableArray(internalModifiers), _toConsumableArray(modifiers));
  }, [internalModifiers, modifiers]);
  return import_react23.default.createElement(
    Popper,
    {
      modifiers: mergedModifiers,
      placement,
      strategy,
      referenceElement
    },
    children
  );
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/drag-manager.js
var import_bind_event_listener3 = __toESM(require_dist());
var registrations = /* @__PURE__ */ new Set();
var cleanupEndEventListeners = null;
function onDragStart() {
  if (cleanupEndEventListeners) {
    return;
  }
  cleanupEndEventListeners = (0, import_bind_event_listener3.bindAll)(window, [{
    type: "dragend",
    listener: onDragEnd
  }, {
    type: "pointerdown",
    listener: onDragEnd
  }, {
    type: "pointermove",
    listener: function() {
      var callCount = 0;
      return function listener() {
        if (callCount < 20) {
          callCount++;
          return;
        }
        onDragEnd();
      };
    }()
  }]);
  var clone = Array.from(registrations);
  clone.forEach(function(subscriber) {
    subscriber.onDragStart();
  });
}
function onDragEnd() {
  var _cleanupEndEventListe;
  (_cleanupEndEventListe = cleanupEndEventListeners) === null || _cleanupEndEventListe === void 0 || _cleanupEndEventListe();
  cleanupEndEventListeners = null;
  var clone = Array.from(registrations);
  clone.forEach(function(subscriber) {
    subscriber.onDragEnd();
  });
}
function bindStartEvents() {
  return (0, import_bind_event_listener3.bindAll)(window, [{
    type: "dragstart",
    listener: onDragStart
  }, {
    type: "dragenter",
    listener: onDragStart
  }]);
}
var cleanupStartEventListeners = null;
function register(registration) {
  if (!cleanupStartEventListeners) {
    cleanupStartEventListeners = bindStartEvents();
  }
  registrations.add(registration);
  registration.onRegister({
    isDragging: cleanupEndEventListeners !== null
  });
  return function unregister() {
    registrations.delete(registration);
    if (registrations.size === 0) {
      var _cleanupStartEventLis;
      (_cleanupStartEventLis = cleanupStartEventListeners) === null || _cleanupStartEventLis === void 0 || _cleanupStartEventLis();
      cleanupStartEventListeners = null;
    }
  };
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/shared-schedule.js
var delayId = null;
function clearScheduled() {
  if (delayId != null) {
    window.clearTimeout(delayId);
    delayId = null;
  }
}
function scheduleTimeout(fn, delay) {
  clearScheduled();
  delayId = window.setTimeout(function() {
    delayId = null;
    fn();
  }, delay);
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/tooltip-manager.js
var active = null;
function show(entry) {
  var phase = "waiting-to-show";
  function isActive() {
    return Boolean(active && active.entry === entry);
  }
  function cleanup() {
    if (isActive()) {
      clearScheduled();
      active = null;
    }
  }
  function done() {
    if (isActive()) {
      entry.done();
    }
    phase = "done";
    cleanup();
  }
  function immediatelyHideAndDone() {
    if (isActive()) {
      entry.hide({
        isImmediate: true
      });
    }
    done();
  }
  function keep() {
    if (!isActive()) {
      return;
    }
    if (phase === "waiting-to-hide") {
      phase = "shown";
      clearScheduled();
      return;
    }
    if (phase === "hide-animating") {
      phase = "shown";
      clearScheduled();
      entry.show({
        isImmediate: false
      });
      return;
    }
  }
  function requestHide(_ref) {
    var isImmediate = _ref.isImmediate;
    if (!isActive()) {
      return;
    }
    if (phase === "waiting-to-show") {
      immediatelyHideAndDone();
      return;
    }
    if (phase === "waiting-to-hide") {
      return;
    }
    if (isImmediate) {
      immediatelyHideAndDone();
      return;
    }
    phase = "waiting-to-hide";
    scheduleTimeout(function() {
      phase = "hide-animating";
      entry.hide({
        isImmediate: false
      });
    }, entry.delay);
  }
  function finishHideAnimation() {
    if (isActive() && phase === "hide-animating") {
      done();
    }
  }
  function isVisible() {
    return phase === "shown" || phase === "waiting-to-hide" || phase === "hide-animating";
  }
  function getInitialMouse() {
    if (entry.source.type === "mouse") {
      return entry.source.mouse;
    }
    return null;
  }
  function start() {
    var showImmediately = Boolean(active && active.isVisible());
    if (active) {
      clearScheduled();
      active.entry.hide({
        isImmediate: true
      });
      active.entry.done();
      active = null;
    }
    active = {
      entry,
      isVisible
    };
    function show2() {
      phase = "shown";
      entry.show({
        isImmediate: showImmediately
      });
    }
    if (showImmediately) {
      show2();
      return;
    }
    phase = "waiting-to-show";
    scheduleTimeout(show2, entry.delay);
  }
  start();
  var result = {
    keep,
    abort: cleanup,
    isActive,
    requestHide,
    finishHideAnimation,
    mousePosition: getInitialMouse()
  };
  return result;
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/use-unique-id.js
function useUniqueId2(prefix, shouldRenderId) {
  var seed = useIdSeed();
  return shouldRenderId ? "".concat(seed(prefix)) : void 0;
}

// node_modules/@atlaskit/tooltip/dist/esm/tooltip-container.js
init_defineProperty();
var React13 = __toESM(require_react());
init_runtime();
var import_react25 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/tooltip/dist/esm/tooltip-container.compiled.css";

// node_modules/@atlaskit/tooltip/dist/esm/tooltip-primitive.js
var React12 = __toESM(require_react());
init_runtime();
var import_react24 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/tooltip/dist/esm/tooltip-primitive.compiled.css";
var TooltipPrimitive = (0, import_react24.forwardRef)(function TooltipPrimitive2(_ref, ref) {
  var style = _ref.style, className = _ref.className, children = _ref.children, placement = _ref.placement, testId = _ref.testId, onMouseOut = _ref.onMouseOut, onMouseOver = _ref.onMouseOver, id = _ref.id;
  return React12.createElement("div", {
    ref,
    style,
    "data-testid": testId ? "".concat(testId, "--wrapper") : void 0
  }, React12.createElement("div", {
    role: "tooltip",
    className: ax(["_80om73ad", className]),
    onMouseOut,
    onMouseOver,
    "data-placement": placement,
    "data-testid": testId,
    id
  }, children));
});
TooltipPrimitive.displayName = "TooltipPrimitive";
var tooltip_primitive_default = TooltipPrimitive;

// node_modules/@atlaskit/tooltip/dist/esm/tooltip-container.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var TooltipContainer = (0, import_react25.forwardRef)(function TooltipContainer2(_ref, ref) {
  var style = _ref.style, className = _ref.className, children = _ref.children, truncate = _ref.truncate, placement = _ref.placement, testId = _ref.testId, onMouseOut = _ref.onMouseOut, onMouseOver = _ref.onMouseOver, id = _ref.id;
  return React13.createElement(tooltip_primitive_default, {
    ref,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax(["_2rkofajl _11c8dcr7 _vchhusvi _p12fp3fh _bfhkpioe _syaz1i9p _152tze3t _1e02ze3t _1i4q1hna _85i5v77o _1q51v77o _y4ti12x7 _bozg12x7 _slp31hna", truncate && "_1reo15vq _18m915vq _p12f1pna _1bto1l2s _o5721q9c", className]),
    placement,
    testId,
    id,
    onMouseOut,
    onMouseOver,
    style: _objectSpread(_objectSpread({}, style), {}, {
      "--_yr7xfv": cssCustomPropertyValue("var(--ds-background-neutral-bold, ".concat(N800, ")")),
      "--_ywovvi": cssCustomPropertyValue("var(--ds-text-inverse, ".concat(N0, ")"))
    })
  }, children);
});
TooltipContainer.displayName = "TooltipContainer";
var tooltip_container_default = TooltipContainer;

// node_modules/@atlaskit/tooltip/dist/esm/utilities.js
function getMousePosition(mouseCoordinates) {
  var safeMouse = mouseCoordinates || {
    top: 0,
    left: 0
  };
  var getBoundingClientRect = function getBoundingClientRect2() {
    return {
      top: safeMouse.top,
      left: safeMouse.left,
      bottom: safeMouse.top,
      right: safeMouse.left,
      width: 0,
      height: 0
    };
  };
  return {
    getBoundingClientRect,
    clientWidth: 0,
    clientHeight: 0
  };
}

// node_modules/@atlaskit/tooltip/dist/esm/tooltip.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var tooltipZIndex = layers.tooltip();
var analyticsAttributes = {
  componentName: "tooltip",
  packageName: "@atlaskit/tooltip",
  packageVersion: "0.0.0-development"
};
var invertedDirection2 = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var getDirectionFromPlacement = function getDirectionFromPlacement2(placement) {
  return placement.split("-")[0];
};
function Tooltip(_ref) {
  var children = _ref.children, _ref$position = _ref.position, position = _ref$position === void 0 ? "bottom" : _ref$position, _ref$mousePosition = _ref.mousePosition, mousePosition = _ref$mousePosition === void 0 ? "bottom" : _ref$mousePosition, content = _ref.content, _ref$truncate = _ref.truncate, truncate = _ref$truncate === void 0 ? false : _ref$truncate, _ref$component = _ref.component, Container = _ref$component === void 0 ? tooltip_container_default : _ref$component, _ref$tag = _ref.tag, TargetContainer = _ref$tag === void 0 ? "div" : _ref$tag, testId = _ref.testId, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 300 : _ref$delay, _ref$onShow = _ref.onShow, onShow = _ref$onShow === void 0 ? noop : _ref$onShow, _ref$onHide = _ref.onHide, onHide = _ref$onHide === void 0 ? noop : _ref$onHide, canAppear = _ref.canAppear, _ref$hideTooltipOnCli = _ref.hideTooltipOnClick, hideTooltipOnClick = _ref$hideTooltipOnCli === void 0 ? false : _ref$hideTooltipOnCli, _ref$hideTooltipOnMou = _ref.hideTooltipOnMouseDown, hideTooltipOnMouseDown = _ref$hideTooltipOnMou === void 0 ? false : _ref$hideTooltipOnMou, analyticsContext = _ref.analyticsContext, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "fixed" : _ref$strategy, _ref$ignoreTooltipPoi = _ref.ignoreTooltipPointerEvents, ignoreTooltipPointerEvents = _ref$ignoreTooltipPoi === void 0 ? false : _ref$ignoreTooltipPoi, _ref$isScreenReaderAn = _ref.isScreenReaderAnnouncementDisabled, isScreenReaderAnnouncementDisabled = _ref$isScreenReaderAn === void 0 ? false : _ref$isScreenReaderAn;
  var tooltipPosition = position === "mouse" ? mousePosition : position;
  var onShowHandler = usePlatformLeafSyntheticEventHandler(_objectSpread2({
    fn: onShow,
    action: "displayed",
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onHideHandler = usePlatformLeafSyntheticEventHandler(_objectSpread2({
    fn: onHide,
    action: "hidden",
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var apiRef = (0, import_react26.useRef)(null);
  var _useState = (0, import_react26.useState)("hide"), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var targetRef = (0, import_react26.useRef)(null);
  var containerRef = (0, import_react26.useRef)(null);
  var setImplicitRefFromChildren = function setImplicitRefFromChildren2(node) {
    containerRef.current = node;
    targetRef.current = node ? node.firstElementChild : null;
  };
  var setDirectRef = (0, import_react26.useCallback)(function(node) {
    targetRef.current = node;
  }, []);
  var stableState = useStableRef(state);
  var onShowHandlerStable = useStableRef(onShowHandler);
  var onHideHandlerStable = useStableRef(onHideHandler);
  var delayStable = useStableRef(delay);
  var canAppearStable = useStableRef(canAppear);
  var hasCalledShowHandler = (0, import_react26.useRef)(false);
  var start = (0, import_react26.useCallback)(function(api) {
    apiRef.current = api;
    hasCalledShowHandler.current = false;
  }, []);
  var done = (0, import_react26.useCallback)(function() {
    if (!apiRef.current) {
      return;
    }
    if (hasCalledShowHandler.current) {
      onHideHandlerStable.current();
    }
    apiRef.current = null;
    hasCalledShowHandler.current = false;
    setState("hide");
  }, [onHideHandlerStable]);
  var abort = (0, import_react26.useCallback)(function() {
    if (!apiRef.current) {
      return;
    }
    apiRef.current.abort();
    if (hasCalledShowHandler.current) {
      onHideHandlerStable.current();
    }
    apiRef.current = null;
  }, [onHideHandlerStable]);
  (0, import_react26.useEffect)(function mount() {
    return function unmount() {
      if (apiRef.current) {
        abort();
      }
    };
  }, [abort]);
  var isDraggingRef = (0, import_react26.useRef)(false);
  (0, import_react26.useEffect)(function() {
    return register({
      onRegister: function onRegister(_ref2) {
        var isDragging = _ref2.isDragging;
        isDraggingRef.current = isDragging;
      },
      onDragStart: function onDragStart2() {
        var _apiRef$current;
        (_apiRef$current = apiRef.current) === null || _apiRef$current === void 0 || _apiRef$current.requestHide({
          isImmediate: true
        });
        isDraggingRef.current = true;
      },
      onDragEnd: function onDragEnd2() {
        isDraggingRef.current = false;
      }
    });
  }, []);
  var tryShowTooltip = (0, import_react26.useCallback)(function(source) {
    var _canAppearStable$curr;
    if (isDraggingRef.current) {
      return;
    }
    if (apiRef.current && !apiRef.current.isActive()) {
      abort();
    }
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
    if (canAppearStable.current && !((_canAppearStable$curr = canAppearStable.current) !== null && _canAppearStable$curr !== void 0 && _canAppearStable$curr.call(canAppearStable))) {
      return;
    }
    var entry = {
      source,
      delay: delayStable.current,
      show: function show2(_ref3) {
        var isImmediate = _ref3.isImmediate;
        if (!hasCalledShowHandler.current) {
          hasCalledShowHandler.current = true;
          onShowHandlerStable.current();
        }
        setState(isImmediate ? "show-immediate" : "fade-in");
      },
      hide: function hide(_ref4) {
        var isImmediate = _ref4.isImmediate;
        if (isImmediate) {
          setState("hide");
        } else {
          setState("before-fade-out");
        }
      },
      done
    };
    var api = show(entry);
    start(api);
  }, [canAppearStable, delayStable, done, start, abort, onShowHandlerStable]);
  var hideTooltipOnEsc = (0, import_react26.useCallback)(function() {
    var _apiRef$current2;
    (_apiRef$current2 = apiRef.current) === null || _apiRef$current2 === void 0 || _apiRef$current2.requestHide({
      isImmediate: true
    });
  }, [apiRef]);
  useCloseOnEscapePress({
    onClose: hideTooltipOnEsc,
    isDisabled: state === "hide" || state === "fade-out"
  });
  (0, import_react26.useEffect)(function() {
    if (state === "hide") {
      return noop;
    }
    if (state === "before-fade-out") {
      setState("fade-out");
    }
    var unbind = (0, import_bind_event_listener4.bind)(window, {
      type: "scroll",
      listener: function listener() {
        if (apiRef.current) {
          apiRef.current.requestHide({
            isImmediate: true
          });
        }
      },
      options: {
        capture: true,
        passive: true,
        once: true
      }
    });
    return unbind;
  }, [state]);
  var onMouseDown = (0, import_react26.useCallback)(function() {
    if (hideTooltipOnMouseDown && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnMouseDown]);
  var onClick = (0, import_react26.useCallback)(function() {
    if (hideTooltipOnClick && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnClick]);
  var onMouseOver = (0, import_react26.useCallback)(function(event) {
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    var source = position === "mouse" ? {
      type: "mouse",
      // TODO: ideally not recalculating this object each time
      mouse: getMousePosition({
        left: event.clientX,
        top: event.clientY
      })
    } : {
      type: "keyboard"
    };
    tryShowTooltip(source);
  }, [position, tryShowTooltip]);
  var onMouseOut = (0, import_react26.useCallback)(function(event) {
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onMouseMove = position === "mouse" ? function(event) {
    var _apiRef$current3;
    if ((_apiRef$current3 = apiRef.current) !== null && _apiRef$current3 !== void 0 && _apiRef$current3.isActive()) {
      apiRef.current.mousePosition = getMousePosition({
        left: event.clientX,
        top: event.clientY
      });
    }
  } : void 0;
  var onMouseOverTooltip = (0, import_react26.useCallback)(function() {
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
  }, []);
  var onFocus = (0, import_react26.useCallback)(function(e) {
    try {
      if (!e.target.matches(":focus-visible") && fg("platform-tooltip-focus-visible-new")) {
        return;
      }
    } catch (_) {
    }
    tryShowTooltip({
      type: "keyboard"
    });
  }, [tryShowTooltip]);
  var onBlur = (0, import_react26.useCallback)(function() {
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onAnimationFinished = (0, import_react26.useCallback)(function(transition) {
    if (transition === "exiting" && stableState.current === "fade-out" && apiRef.current) {
      apiRef.current.finishHideAnimation();
    }
  }, [stableState]);
  var CastTargetContainer = TargetContainer;
  var shouldRenderTooltipPopup = state !== "hide" && Boolean(content);
  var shouldRenderHiddenContent = !isScreenReaderAnnouncementDisabled && shouldRenderTooltipPopup;
  var shouldRenderTooltipChildren = state !== "hide" && state !== "fade-out";
  var handleOpenLayerObserverCloseSignal = (0, import_react26.useCallback)(function() {
    var _apiRef$current4;
    (_apiRef$current4 = apiRef.current) === null || _apiRef$current4 === void 0 || _apiRef$current4.requestHide({
      isImmediate: true
    });
  }, []);
  useNotifyOpenLayerObserver({
    // Layer is only visually open if both the tooltip popup (container) and children are rendered.
    isOpen: shouldRenderTooltipPopup && shouldRenderTooltipChildren,
    /**
     * We don't strictly need to provide an onClose callback at this time, as there is
     * already code that handles hiding the tooltip when a drag is started (and the only
     * usage right now is closing all layers when the user resizes the side nav).
     *
     * However, for future-proofing and semantic reasons, it makes sense to close the tooltip
     * whenever the open layer observer requests a close.
     */
    onClose: handleOpenLayerObserverCloseSignal
  });
  var getReferenceElement = function getReferenceElement2() {
    var _apiRef$current5;
    if (position === "mouse" && (_apiRef$current5 = apiRef.current) !== null && _apiRef$current5 !== void 0 && _apiRef$current5.mousePosition) {
      var _apiRef$current6;
      return (_apiRef$current6 = apiRef.current) === null || _apiRef$current6 === void 0 ? void 0 : _apiRef$current6.mousePosition;
    }
    return targetRef.current || void 0;
  };
  var tooltipIdForHiddenContent = useUniqueId2("tooltip", shouldRenderHiddenContent);
  var tooltipTriggerProps = {
    onMouseOver,
    onMouseOut,
    onMouseMove,
    onMouseDown,
    onClick,
    onFocus,
    onBlur
  };
  if (testId) {
    tooltipTriggerProps["data-testid"] = "".concat(testId, "--container");
  }
  var isChildrenAFunction = typeof children === "function";
  (0, import_react26.useEffect)(function() {
    if (isChildrenAFunction) {
      return;
    }
    var target = targetRef.current;
    if (!target || !tooltipIdForHiddenContent) {
      return;
    }
    target.setAttribute("aria-describedby", tooltipIdForHiddenContent);
    return function() {
      return target.removeAttribute("aria-describedby");
    };
  }, [isChildrenAFunction, tooltipIdForHiddenContent]);
  var hiddenContent = shouldRenderHiddenContent ? import_react26.default.createElement("span", {
    "data-testid": testId ? "".concat(testId, "-hidden") : void 0,
    hidden: true,
    id: tooltipIdForHiddenContent
  }, typeof content === "function" ? content({}) : content) : null;
  return import_react26.default.createElement(import_react26.default.Fragment, null, typeof children === "function" ? (
    // once we deprecate the wrapped approach, we can put the aria
    // attribute back into the tooltipTriggerProps and make it required
    // instead of optional in `types`
    import_react26.default.createElement(import_react26.default.Fragment, null, children(_objectSpread2(_objectSpread2({}, tooltipTriggerProps), {}, {
      "aria-describedby": tooltipIdForHiddenContent,
      ref: setDirectRef
    })), hiddenContent)
  ) : import_react26.default.createElement(CastTargetContainer, _extends({}, tooltipTriggerProps, {
    ref: setImplicitRefFromChildren,
    role: "presentation"
  }), children, hiddenContent), shouldRenderTooltipPopup ? import_react26.default.createElement(Portal, {
    zIndex: tooltipZIndex
  }, import_react26.default.createElement(Popper2, {
    placement: tooltipPosition,
    referenceElement: getReferenceElement(),
    strategy
  }, function(_ref5) {
    var ref = _ref5.ref, style = _ref5.style, update = _ref5.update, placement = _ref5.placement;
    var direction = position === "mouse" ? void 0 : invertedDirection2[getDirectionFromPlacement(placement)];
    return import_react26.default.createElement(exiting_persistence_default, {
      appear: true
    }, shouldRenderTooltipChildren && import_react26.default.createElement(fade_in_default, {
      distance: "constant",
      entranceDirection: direction,
      exitDirection: direction,
      onFinish: onAnimationFinished,
      duration: state !== "show-immediate" ? "medium" : "none"
    }, function(_ref6) {
      var className = _ref6.className;
      return import_react26.default.createElement(Container, {
        ref,
        className: "Tooltip ".concat(className),
        style: _objectSpread2(_objectSpread2({}, style), ignoreTooltipPointerEvents && {
          pointerEvents: "none"
        }),
        truncate,
        placement: tooltipPosition,
        testId: getReferenceElement() ? testId : testId && "".concat(testId, "--unresolved"),
        onMouseOut,
        onMouseOver: onMouseOverTooltip
      }, typeof content === "function" ? content({
        update
      }) : content);
    }));
  })) : null);
}
var tooltip_default = Tooltip;

export {
  KEY_UP,
  KEY_DOWN,
  KEY_HOME,
  KEY_END,
  KEY_TAB,
  KEY_ENTER,
  KEY_SPACE,
  durations,
  easeInOut,
  useExitingPersistence,
  exiting_persistence_default,
  fade_in_default,
  Popper2 as Popper,
  Portal,
  tooltip_default
};
//# sourceMappingURL=chunk-B4EHBQR2.js.map
