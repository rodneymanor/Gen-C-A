import {
  _slicedToArray,
  init_slicedToArray
} from "./chunk-XN5DX7DZ.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-controlled.js
init_slicedToArray();
var import_react = __toESM(require_react());
function useControlled(propValue) {
  var getDefaultPropValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
    return propValue;
  };
  var isControlled = propValue !== void 0;
  var _useState = (0, import_react.useState)(getDefaultPropValue), _useState2 = _slicedToArray(_useState, 2), valueState = _useState2[0], setValue = _useState2[1];
  var isControlledRef = (0, import_react.useRef)(isControlled);
  (0, import_react.useEffect)(function() {
    isControlledRef.current = isControlled;
  }, [isControlled]);
  var value = isControlled ? propValue : valueState;
  var setValueIfUncontrolled = (0, import_react.useCallback)(function(newValue) {
    if (!isControlledRef.current) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

export {
  useControlled
};
//# sourceMappingURL=chunk-K4GGX2YM.js.map
