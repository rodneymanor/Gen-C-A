{
  "version": 3,
  "sources": ["../../@atlaskit/tokens/dist/esm/get-token.js", "../../@atlaskit/tokens/dist/esm/get-token-value.js", "../../@atlaskit/tokens/dist/esm/set-global-theme.js", "../../@atlaskit/tokens/dist/esm/utils/configure-page.js", "../../@atlaskit/tokens/dist/esm/get-theme-html-attrs.js", "../../@atlaskit/tokens/dist/esm/theme-state-transformer.js", "../../@atlaskit/tokens/dist/esm/utils/color-mode-listeners.js", "../../@atlaskit/tokens/dist/esm/utils/theme-loading.js", "../../@atlaskit/tokens/dist/esm/artifacts/theme-import-map.js", "../../@atlaskit/tokens/dist/esm/utils/contrast-mode-listeners.js", "../../@atlaskit/tokens/dist/esm/utils/get-theme-preferences.js", "../../@atlaskit/tokens/dist/esm/utils/get-increased-contrast-theme.js", "../../@atlaskit/tokens/dist/esm/enable-global-theme.js", "../../@atlaskit/tokens/dist/esm/get-theme-styles.js", "../../@atlaskit/tokens/dist/esm/get-ssr-auto-script.js", "../../@atlaskit/tokens/dist/esm/use-theme-observer.js", "../../@atlaskit/tokens/dist/esm/get-global-theme.js", "../../@atlaskit/tokens/dist/esm/theme-mutation-observer.js"],
  "sourcesContent": ["import warnOnce from '@atlaskit/ds-lib/warn-once';\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport tokens from './artifacts/token-names';\nimport { TOKEN_NOT_FOUND_CSS_VAR } from './constants';\n/**\n * Takes a dot-separated token name and an optional fallback, and returns the CSS custom property for the corresponding token.\n * This should be used to implement design decisions throughout your application.\n *\n * Note: With `@atlaskit/babel-plugin-tokens`, this function can be pre-compiled and a fallback value automatically inserted.\n *\n * @param {string} path - A dot-separated token name (example: `'color.background.brand'` or `'spacing.scale.100'`).\n * @param {string} [fallback] - The fallback value that should render when token CSS is not present in your app.\n *\n * @example\n * ```\n * <div\n *   css={{\n *     backgroundColor: token('elevation.surface.raised', N0),\n *     boxShadow: token('elevation.shadow.raised', `0 20px 32px -8px ${N50A}, 0 0 1px ${N60A}`),\n *     padding: token('spacing.scale.100', '8px'),\n *     fontWeight: token('font.weight.regular', '400'),\n *   }}\n * />\n * ```\n *\n */\nfunction token(path, fallback) {\n  var token = tokens[path];\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n    if (!token) {\n      warnOnce(\"Unknown token id at path: \".concat(path, \" in @atlaskit/tokens\"));\n    }\n    if (token === '--ds-icon-subtlest' && !fg('platform-component-visual-refresh')) {\n      warnOnce(\"Token \\\"color.icon.subtlest\\\" is only available when feature flag \\\"platform-component-visual-refresh\\\" is on, don't use it if the flag can't be turned on on this page\");\n    }\n  }\n\n  // if the token is not found - replacing it with variable name without any value, to avoid it being undefined which would result in invalid css\n  if (!token) {\n    token = TOKEN_NOT_FOUND_CSS_VAR;\n  }\n  var tokenCall = fallback ? \"var(\".concat(token, \", \").concat(fallback, \")\") : \"var(\".concat(token, \")\");\n  return tokenCall;\n}\nexport default token;", "import warnOnce from '@atlaskit/ds-lib/warn-once';\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport tokens from './artifacts/token-names';\n/**\n * Takes a dot-separated token name and and an optional fallback, and returns the current computed CSS value for the\n * resulting CSS Custom Property.\n * This should be used for when the CSS cascade isn't available, eg. `<canvas>` elements, JS charting libraries, etc.\n *\n * Note: these values change depending on the theme so consider pairing them with `useThemeObserver` in React, or the\n * `ThemeMutationObserver` class elsewhere.\n *\n * @param {string} path - A dot-separated token name (example: `'color.background.brand'` or `'spacing.scale.100'`).\n * @param {string} [fallback] - The fallback value that should render when token CSS is not present in your app.\n *\n * @example\n * ```\n * const theme = useThemeObserver();\n *\n * useEffect(() => {\n *  const lineColor = getTokenValue('color.background.accent.blue.subtle', B400);\n * }, [theme]);\n * ```\n *\n */\nfunction getTokenValue(tokenId) {\n  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var token = tokens[tokenId];\n  var tokenValue = fallback;\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n    if (!token) {\n      warnOnce(\"Unknown token id at path: \".concat(tokenId, \" in @atlaskit/tokens\"));\n    }\n    if (token === '--ds-icon-subtlest' && !fg('platform-component-visual-refresh')) {\n      warnOnce(\"Token \\\"color.icon.subtlest\\\" is only available when feature flag \\\"platform-component-visual-refresh\\\" is on, don't use it if the flag can't be turned on on this page\");\n    }\n  }\n  if (typeof window === 'undefined') {\n    return tokenValue;\n  }\n  tokenValue = window.getComputedStyle(document.documentElement).getPropertyValue(token).trim();\n  tokenValue = tokenValue || fallback;\n  return tokenValue;\n}\nexport default getTokenValue;", "import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport { themeStateDefaults } from './theme-config';\nimport { isValidBrandHex } from './utils/color-utils';\nimport configurePage from './utils/configure-page';\nimport { findMissingCustomStyleElements } from './utils/custom-theme-loading-utils';\nimport { getThemeOverridePreferences, getThemePreferences } from './utils/get-theme-preferences';\nimport { loadAndAppendThemeCss } from './utils/theme-loading';\n\n/**\n * Sets the theme globally at runtime. This updates the `data-theme` and `data-color-mode` attributes on your page's <html> tag.\n *\n * @param {Object<string, string>} themeState The themes and color mode that should be applied.\n * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.contrastMode The contrast mode theme to be applied. If set to `auto`, the theme applied will be determined by the OS setting.set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.\n * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.\n * @param {string} themeState.shape The shape theme to be applied.\n * @param {string} themeState.spacing The spacing theme to be applied.\n * @param {string} themeState.typography The typography theme to be applied.\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n * @param {function} themeLoader Callback function used to override the default theme loading functionality.\n *\n * @returns A Promise of an unbind function, that can be used to stop listening for changes to system theme.\n *\n * @example\n * ```\n * setGlobalTheme({colorMode: 'auto', light: 'light', dark: 'dark', spacing: 'spacing'});\n * ```\n */\nvar setGlobalTheme = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var _ref2,\n      _ref2$colorMode,\n      colorMode,\n      _ref2$contrastMode,\n      contrastMode,\n      _ref2$dark,\n      dark,\n      _ref2$light,\n      light,\n      _ref2$shape,\n      shape,\n      _ref2$spacing,\n      spacing,\n      _ref2$typography,\n      typography,\n      _ref2$UNSAFE_themeOpt,\n      UNSAFE_themeOptions,\n      themeLoader,\n      themeState,\n      themePreferences,\n      loadingStrategy,\n      loadingTasks,\n      mode,\n      attrOfMissingCustomStyles,\n      themeOverridePreferences,\n      _iterator,\n      _step,\n      themeId,\n      autoUnbind,\n      _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref2 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {}, _ref2$colorMode = _ref2.colorMode, colorMode = _ref2$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref2$colorMode, _ref2$contrastMode = _ref2.contrastMode, contrastMode = _ref2$contrastMode === void 0 ? themeStateDefaults['contrastMode'] : _ref2$contrastMode, _ref2$dark = _ref2.dark, dark = _ref2$dark === void 0 ? themeStateDefaults['dark'] : _ref2$dark, _ref2$light = _ref2.light, light = _ref2$light === void 0 ? themeStateDefaults['light'] : _ref2$light, _ref2$shape = _ref2.shape, shape = _ref2$shape === void 0 ? themeStateDefaults['shape'] : _ref2$shape, _ref2$spacing = _ref2.spacing, spacing = _ref2$spacing === void 0 ? themeStateDefaults['spacing'] : _ref2$spacing, _ref2$typography = _ref2.typography, typography = _ref2$typography === void 0 ? themeStateDefaults['typography']() : _ref2$typography, _ref2$UNSAFE_themeOpt = _ref2.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref2$UNSAFE_themeOpt === void 0 ? themeStateDefaults['UNSAFE_themeOptions'] : _ref2$UNSAFE_themeOpt;\n          themeLoader = _args3.length > 1 ? _args3[1] : undefined;\n          // CLEANUP: Remove. This blocks application of increased contrast themes\n          // without the feature flag enabled.\n          if (!fg('platform_increased-contrast-themes')) {\n            if (light === 'light-increased-contrast') {\n              light = 'light';\n            }\n            if (dark === 'dark-increased-contrast') {\n              dark = 'dark';\n            }\n          }\n          themeState = {\n            colorMode: colorMode,\n            contrastMode: contrastMode,\n            dark: dark,\n            light: light,\n            shape: shape,\n            spacing: spacing,\n            typography: typography,\n            UNSAFE_themeOptions: themeLoader ? undefined : UNSAFE_themeOptions\n          }; // Determine what to load and loading strategy\n          themePreferences = getThemePreferences(themeState);\n          loadingStrategy = themeLoader ? themeLoader : loadAndAppendThemeCss; // Load standard themes\n          loadingTasks = themePreferences.map( /*#__PURE__*/function () {\n            var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(themeId) {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return loadingStrategy(themeId);\n                  case 2:\n                    return _context.abrupt(\"return\", _context.sent);\n                  case 3:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            return function (_x) {\n              return _ref3.apply(this, arguments);\n            };\n          }()); // Load custom themes if needed\n          if (!themeLoader && UNSAFE_themeOptions && isValidBrandHex(UNSAFE_themeOptions === null || UNSAFE_themeOptions === void 0 ? void 0 : UNSAFE_themeOptions.brandColor)) {\n            mode = colorMode || themeStateDefaults['colorMode'];\n            attrOfMissingCustomStyles = findMissingCustomStyleElements(UNSAFE_themeOptions, mode);\n            if (attrOfMissingCustomStyles.length > 0) {\n              // Load custom theme styles\n              loadingTasks.push(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                var _yield$import, loadAndAppendCustomThemeCss;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-custom-theme\" */\n                      './custom-theme');\n                    case 2:\n                      _yield$import = _context2.sent;\n                      loadAndAppendCustomThemeCss = _yield$import.loadAndAppendCustomThemeCss;\n                      loadAndAppendCustomThemeCss({\n                        colorMode: attrOfMissingCustomStyles.length === 2 ? 'auto' :\n                        // only load the missing custom theme styles\n                        attrOfMissingCustomStyles[0],\n                        UNSAFE_themeOptions: UNSAFE_themeOptions\n                      });\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }, _callee2);\n              }))());\n            }\n          }\n          _context3.next = 10;\n          return Promise.all(loadingTasks);\n        case 10:\n          // Load override themes after standard themes\n          themeOverridePreferences = getThemeOverridePreferences(themeState);\n          _iterator = _createForOfIteratorHelper(themeOverridePreferences);\n          _context3.prev = 12;\n          _iterator.s();\n        case 14:\n          if ((_step = _iterator.n()).done) {\n            _context3.next = 20;\n            break;\n          }\n          themeId = _step.value;\n          _context3.next = 18;\n          return loadingStrategy(themeId);\n        case 18:\n          _context3.next = 14;\n          break;\n        case 20:\n          _context3.next = 25;\n          break;\n        case 22:\n          _context3.prev = 22;\n          _context3.t0 = _context3[\"catch\"](12);\n          _iterator.e(_context3.t0);\n        case 25:\n          _context3.prev = 25;\n          _iterator.f();\n          return _context3.finish(25);\n        case 28:\n          autoUnbind = configurePage(themeState);\n          return _context3.abrupt(\"return\", autoUnbind);\n        case 30:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[12, 22, 25, 28]]);\n  }));\n  return function setGlobalTheme() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default setGlobalTheme;", "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport getThemeHtmlAttrs from '../get-theme-html-attrs';\nimport ColorModeObserver from './color-mode-listeners';\nimport ContrastModeObserver from './contrast-mode-listeners';\n\n/**\n * Given ThemeState, sets appropriate html attributes on the documentElement,\n * adds a listener to keep colorMode updated, and returns a function to unbind.\n */\nexport default function configurePage(themeState) {\n  if (themeState.colorMode === 'auto') {\n    // Set colorMode based on the user preference\n    themeState.colorMode = ColorModeObserver.getColorMode();\n    // Bind a listener (if one doesn't already exist) to keep colorMode updated\n    ColorModeObserver.bind();\n  } else {\n    ColorModeObserver.unbind();\n  }\n  if (fg('platform_increased-contrast-themes')) {\n    if (themeState.contrastMode === 'auto') {\n      // Set contrastMode based on the user preference\n      themeState.contrastMode = ContrastModeObserver.getContrastMode();\n      // Bind a listener (if one doesn't already exist) to keep contrastMode updated\n      ContrastModeObserver.bind();\n    } else {\n      ContrastModeObserver.unbind();\n    }\n  }\n  var themeAttributes = getThemeHtmlAttrs(themeState);\n  Object.entries(themeAttributes).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      key = _ref2[0],\n      value = _ref2[1];\n    document.documentElement.setAttribute(key, value);\n  });\n  return function () {\n    ColorModeObserver.unbind();\n    if (fg('platform_increased-contrast-themes')) {\n      ContrastModeObserver.unbind();\n    }\n  };\n}", "import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport { COLOR_MODE_ATTRIBUTE, CONTRAST_MODE_ATTRIBUTE, CUSTOM_THEME_ATTRIBUTE, THEME_DATA_ATTRIBUTE } from './constants';\nimport { themeStateDefaults } from './theme-config';\nimport { themeObjectToString } from './theme-state-transformer';\nimport { isValidBrandHex } from './utils/color-utils';\nimport { hash } from './utils/hash';\nvar defaultColorMode = 'light';\nvar defaultContrastMode = 'no-preference';\n\n/**\n * Server-side rendering utility. Generates the valid HTML attributes for a given theme.\n * Note: this utility does not handle automatic theme switching.\n *\n * @param {Object<string, string>} themeOptions - Theme options object\n * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.\n * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.\n * @param {string} themeState.spacing The spacing theme to be applied.\n * @param {string} themeState.typography The typography theme to be applied.\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n *\n * @returns {Object} Object of HTML attributes to be applied to the document root\n */\nvar getThemeHtmlAttrs = function getThemeHtmlAttrs() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$colorMode = _ref.colorMode,\n    colorMode = _ref$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref$colorMode,\n    _ref$dark = _ref.dark,\n    dark = _ref$dark === void 0 ? themeStateDefaults['dark'] : _ref$dark,\n    _ref$light = _ref.light,\n    light = _ref$light === void 0 ? themeStateDefaults['light'] : _ref$light,\n    _ref$contrastMode = _ref.contrastMode,\n    contrastMode = _ref$contrastMode === void 0 ? themeStateDefaults['contrastMode'] : _ref$contrastMode,\n    _ref$shape = _ref.shape,\n    shape = _ref$shape === void 0 ? themeStateDefaults['shape'] : _ref$shape,\n    _ref$spacing = _ref.spacing,\n    spacing = _ref$spacing === void 0 ? themeStateDefaults['spacing'] : _ref$spacing,\n    _ref$typography = _ref.typography,\n    typography = _ref$typography === void 0 ? themeStateDefaults['typography']() : _ref$typography,\n    _ref$UNSAFE_themeOpti = _ref.UNSAFE_themeOptions,\n    UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults['UNSAFE_themeOptions'] : _ref$UNSAFE_themeOpti;\n  var themeAttribute = themeObjectToString({\n    dark: dark,\n    light: light,\n    shape: shape,\n    spacing: spacing,\n    typography: typography\n  });\n  var result = _defineProperty(_defineProperty({}, THEME_DATA_ATTRIBUTE, themeAttribute), COLOR_MODE_ATTRIBUTE, colorMode === 'auto' ? defaultColorMode : colorMode);\n  if (fg('platform_increased-contrast-themes')) {\n    result = _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, CONTRAST_MODE_ATTRIBUTE, contrastMode === 'auto' ? defaultContrastMode : contrastMode));\n  }\n  if (UNSAFE_themeOptions && isValidBrandHex(UNSAFE_themeOptions.brandColor)) {\n    var optionString = JSON.stringify(UNSAFE_themeOptions);\n    var uniqueId = hash(optionString);\n    result[CUSTOM_THEME_ATTRIBUTE] = uniqueId;\n  }\n  return result;\n};\nexport default getThemeHtmlAttrs;", "import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { themeIds } from './theme-config';\nvar themeKinds = ['light', 'dark', 'spacing', 'typography', 'shape'];\nvar customThemeOptions = 'UNSAFE_themeOptions';\nvar isThemeKind = function isThemeKind(themeKind) {\n  return themeKinds.find(function (kind) {\n    return kind === themeKind;\n  }) !== undefined;\n};\nvar isThemeIds = function isThemeIds(themeId) {\n  return themeIds.find(function (id) {\n    return id === themeId;\n  }) !== undefined;\n};\nvar isColorMode = function isColorMode(modeId) {\n  return ['light', 'dark', 'auto'].includes(modeId);\n};\n/**\n * Converts a string that is formatted for the `data-theme` HTML attribute\n * to an object that can be passed to `setGlobalTheme`.\n *\n * @param {string} themes The themes that should be applied.\n *\n * @example\n * ```\n * themeStringToObject('dark:dark light:legacy-light spacing:spacing');\n * // returns { dark: 'dark', light: 'legacy-light', spacing: 'spacing' }\n * ```\n */\nexport var themeStringToObject = function themeStringToObject(themeState) {\n  return themeState.split(' ')\n  // @ts-ignore - TS1501 TypeScript 5.9.2 upgrade\n  .map(function (theme) {\n    return theme.split(/:([^]*)/);\n  }).reduce(function (themeObject, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      kind = _ref2[0],\n      id = _ref2[1];\n    if (kind === 'colorMode' && isColorMode(id)) {\n      themeObject[kind] = id;\n    }\n    if (isThemeKind(kind) && isThemeIds(id)) {\n      // @ts-expect-error FIXME - this is a valid ts error\n      themeObject[kind] = id;\n    }\n    if (kind === customThemeOptions) {\n      try {\n        themeObject[customThemeOptions] = JSON.parse(id);\n      } catch (e) {\n        new Error('Invalid custom theme string');\n      }\n    }\n    return themeObject;\n  }, {});\n};\n\n/**\n * Converts a theme object to a string formatted for the `data-theme` HTML attribute.\n *\n * @param {object} themes The themes that should be applied.\n *\n * @example\n * ```\n * themeObjectToString({ dark: 'dark', light: 'legacy-light', spacing: 'spacing' });\n * // returns 'dark:dark light:legacy-light spacing:spacing'\n * ```\n */\nexport var themeObjectToString = function themeObjectToString(themeState) {\n  return Object.entries(themeState).reduce(function (themeString, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      kind = _ref4[0],\n      id = _ref4[1];\n    if (\n    // colorMode theme state\n    kind === 'colorMode' && typeof id === 'string' && isColorMode(id) ||\n    // custom theme state\n    kind === customThemeOptions && _typeof(id) === 'object' ||\n    // other theme states\n    isThemeKind(kind) && typeof id === 'string' && isThemeIds(id)) {\n      return themeString + \"\".concat(themeString ? ' ' : '') + \"\".concat(kind, \":\").concat(_typeof(id) === 'object' ? JSON.stringify(id) : id);\n    }\n    return themeString;\n  }, '');\n};", "import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { bind as _bind } from 'bind-event-listener';\nimport { COLOR_MODE_ATTRIBUTE } from '../constants';\nimport { darkModeMediaQuery } from './theme-loading';\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\n\n/**\n * Updates the current theme when the system theme changes. Should be bound\n * to an event listener listening on the '(prefers-color-scheme: dark)' query\n * @param e The event representing a change in system theme.\n */\nfunction checkNativeListener(e) {\n  var element = document.documentElement;\n  element.setAttribute(COLOR_MODE_ATTRIBUTE, e.matches ? 'dark' : 'light');\n}\nvar darkModeMql = isMatchMediaAvailable && window.matchMedia(darkModeMediaQuery);\nvar ColorModeObserver = /*#__PURE__*/function () {\n  function ColorModeObserver() {\n    _classCallCheck(this, ColorModeObserver);\n    _defineProperty(this, \"unbindThemeChangeListener\", null);\n  }\n  return _createClass(ColorModeObserver, [{\n    key: \"getColorMode\",\n    value: function getColorMode() {\n      if (!darkModeMql) {\n        return 'light';\n      }\n      return darkModeMql !== null && darkModeMql !== void 0 && darkModeMql.matches ? 'dark' : 'light';\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (darkModeMql && this.unbindThemeChangeListener === null) {\n        this.unbindThemeChangeListener = _bind(darkModeMql, {\n          type: 'change',\n          listener: checkNativeListener\n        });\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      if (this.unbindThemeChangeListener) {\n        this.unbindThemeChangeListener();\n        this.unbindThemeChangeListener = null;\n      }\n    }\n  }]);\n}();\n/**\n * A singleton color mode observer - binds \"auto\" switching logic to a single `mediaQueryList` listener\n * that can be unbound by any consumer when no longer needed.\n */\nvar SingletonColorModeObserver = new ColorModeObserver();\nexport default SingletonColorModeObserver;", "import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport themeImportMap from '../artifacts/theme-import-map';\nimport { CUSTOM_THEME_ATTRIBUTE, THEME_DATA_ATTRIBUTE } from '../constants';\nexport var loadAndAppendThemeCss = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(themeId) {\n    var themeCss, style;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!document.head.querySelector(\"style[\".concat(THEME_DATA_ATTRIBUTE, \"=\\\"\").concat(themeId, \"\\\"]:not([\").concat(CUSTOM_THEME_ATTRIBUTE, \"])\"))) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 2:\n          if (themeId) {\n            _context.next = 4;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 4:\n          _context.next = 6;\n          return loadThemeCss(themeId);\n        case 6:\n          themeCss = _context.sent;\n          style = document.createElement('style');\n          style.textContent = themeCss;\n          style.dataset.theme = themeId;\n          document.head.appendChild(style);\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function loadAndAppendThemeCss(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadThemeCss = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(themeId) {\n    var _yield$themeImportMap, themeCss;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if ((themeId === 'light' || themeId === 'dark') && fg('platform-component-visual-refresh')) {\n            themeId += '-brand-refresh';\n          }\n          _context2.next = 3;\n          return themeImportMap[themeId]();\n        case 3:\n          _yield$themeImportMap = _context2.sent;\n          themeCss = _yield$themeImportMap.default;\n          return _context2.abrupt(\"return\", themeCss);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function loadThemeCss(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var darkModeMediaQuery = '(prefers-color-scheme: dark)';\nexport var moreContrastMediaQuery = '(prefers-contrast: more)';", "/**\n * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n *\n * This file contains a dynamic import for each theme this package exports.\n * Themes are loaded asynchronously at runtime to minimise the amount of CSS we send to the client.\n * This allows users to compose their themes and only use the tokens that are requested.\n * When a new theme is created, the import should automatically be added to the map\n *\n * @codegen <<SignedSource::3db020c00d91d31fe8e413b082708618>>\n * @codegenCommand yarn build tokens\n */\n\nvar themeImportsMap = {\n  'light': function light() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-light\" */\n    './themes/atlassian-light');\n  },\n  'light-future': function lightFuture() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-light-future\" */\n    './themes/atlassian-light-future');\n  },\n  'light-increased-contrast': function lightIncreasedContrast() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-light-increased-contrast\" */\n    './themes/atlassian-light-increased-contrast');\n  },\n  'dark': function dark() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-dark\" */\n    './themes/atlassian-dark');\n  },\n  'dark-future': function darkFuture() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-dark-future\" */\n    './themes/atlassian-dark-future');\n  },\n  'dark-increased-contrast': function darkIncreasedContrast() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-dark-increased-contrast\" */\n    './themes/atlassian-dark-increased-contrast');\n  },\n  'legacy-light': function legacyLight() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-legacy-light\" */\n    './themes/atlassian-legacy-light');\n  },\n  'legacy-dark': function legacyDark() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-legacy-dark\" */\n    './themes/atlassian-legacy-dark');\n  },\n  'spacing': function spacing() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-spacing\" */\n    './themes/atlassian-spacing');\n  },\n  'typography': function typography() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-typography\" */\n    './themes/atlassian-typography');\n  },\n  'typography-adg3': function typographyAdg3() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-typography-adg3\" */\n    './themes/atlassian-typography-adg3');\n  },\n  'shape': function shape() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-shape\" */\n    './themes/atlassian-shape');\n  },\n  'shape-rounder': function shapeRounder() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-shape-rounder\" */\n    './themes/atlassian-shape-rounder');\n  },\n  'shape-roundest': function shapeRoundest() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-shape-roundest\" */\n    './themes/atlassian-shape-roundest');\n  },\n  'typography-modernized': function typographyModernized() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-typography-modernized\" */\n    './themes/atlassian-typography-modernized');\n  },\n  'typography-refreshed': function typographyRefreshed() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-typography-refreshed\" */\n    './themes/atlassian-typography-refreshed');\n  },\n  'light-brand-refresh': function lightBrandRefresh() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-light-brand-refresh\" */\n    './themes/atlassian-light-brand-refresh');\n  },\n  'dark-brand-refresh': function darkBrandRefresh() {\n    return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-dark-brand-refresh\" */\n    './themes/atlassian-dark-brand-refresh');\n  }\n};\nexport default themeImportsMap;", "import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { bind as _bind } from 'bind-event-listener';\nimport { CONTRAST_MODE_ATTRIBUTE } from '../constants';\nimport { moreContrastMediaQuery } from './theme-loading';\nvar isMatchMediaAvailable = typeof window !== 'undefined' && 'matchMedia' in window;\n\n/**\n * Updates the current theme when the system contrast preference changes. Should be bound\n * to an event listener listening on the '(prefers-contrast: more)' query\n * @param e The event representing a change in system theme.\n */\nfunction checkNativeListener(e) {\n  var element = document.documentElement;\n  element.setAttribute(CONTRAST_MODE_ATTRIBUTE, e.matches ? 'more' : 'no-preference');\n}\nvar contrastModeMql = isMatchMediaAvailable && window.matchMedia(moreContrastMediaQuery);\nvar ContrastModeObserver = /*#__PURE__*/function () {\n  function ContrastModeObserver() {\n    _classCallCheck(this, ContrastModeObserver);\n    _defineProperty(this, \"unbindContrastChangeListener\", null);\n  }\n  return _createClass(ContrastModeObserver, [{\n    key: \"getContrastMode\",\n    value: function getContrastMode() {\n      if (!contrastModeMql) {\n        return 'no-preference';\n      }\n      return contrastModeMql !== null && contrastModeMql !== void 0 && contrastModeMql.matches ? 'more' : 'no-preference';\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (contrastModeMql && this.unbindContrastChangeListener === null) {\n        this.unbindContrastChangeListener = _bind(contrastModeMql, {\n          type: 'change',\n          listener: checkNativeListener\n        });\n      }\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      if (this.unbindContrastChangeListener) {\n        this.unbindContrastChangeListener();\n        this.unbindContrastChangeListener = null;\n      }\n    }\n  }]);\n}();\n/**\n * A singleton contrast mode observer - binds \"auto\" switching logic to a single `mediaQueryList` listener\n * that can be unbound by any consumer when no longer needed.\n */\nvar SingletonContrastModeObserver = new ContrastModeObserver();\nexport default SingletonContrastModeObserver;", "import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport getIncreasedContrastTheme from './get-increased-contrast-theme';\nexport var getThemePreferences = function getThemePreferences(themeState) {\n  var colorMode = themeState.colorMode,\n    contrastMode = themeState.contrastMode,\n    dark = themeState.dark,\n    light = themeState.light,\n    shape = themeState.shape,\n    spacing = themeState.spacing,\n    typography = themeState.typography;\n  var autoColorModeThemes = [light, dark];\n  var themePreferences = [];\n  if (colorMode === 'auto') {\n    if (contrastMode !== 'no-preference' && fg('platform_increased-contrast-themes')) {\n      autoColorModeThemes.forEach(function (normalTheme) {\n        var increasedContrastTheme = getIncreasedContrastTheme(normalTheme);\n        if (increasedContrastTheme) {\n          autoColorModeThemes.push(increasedContrastTheme);\n        }\n      });\n    }\n    themePreferences.push.apply(themePreferences, autoColorModeThemes);\n  } else {\n    themePreferences.push(themeState[colorMode]);\n    if (contrastMode !== 'no-preference' && fg('platform_increased-contrast-themes')) {\n      var increasedContrastTheme = getIncreasedContrastTheme(themeState[colorMode]);\n      if (increasedContrastTheme) {\n        themePreferences.push(increasedContrastTheme);\n      }\n    }\n  }\n  [shape, spacing, typography].forEach(function (themeId) {\n    if (themeId) {\n      themePreferences.push(themeId);\n    }\n  });\n  return _toConsumableArray(new Set(themePreferences));\n};\nexport var getThemeOverridePreferences = function getThemeOverridePreferences(_themeState) {\n  var themeOverridePreferences = [];\n  return _toConsumableArray(new Set(themeOverridePreferences));\n};", "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport themeConfig from '../theme-config';\n\n/**\n * Finds any matching increased contrast theme available for a selected theme.\n */\nexport default function getIncreasedContrastTheme(themeId) {\n  var _Object$entries$find;\n  return (_Object$entries$find = Object.entries(themeConfig).find(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      increasesContrastFor = _ref2[1].increasesContrastFor;\n    return increasesContrastFor === themeId;\n  })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1].id;\n}", "import { themeStateDefaults } from './theme-config';\nimport configurePage from './utils/configure-page';\nimport { getThemePreferences } from './utils/get-theme-preferences';\n\n/**\n * Synchronously sets the theme globally at runtime. Themes are not loaded;\n * use `getThemeStyles` and other server-side utilities to generate and load them.\n *\n * @param {Object<string, string>} themeState The themes and color mode that should be applied.\n * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.\n * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.\n * @param {string} themeState.shape The shape theme to be applied.\n * @param {string} themeState.spacing The spacing theme to be applied.\n * @param {string} themeState.typography The typography theme to be applied.\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n * @param {function} themeLoader Callback function used to override the default theme loading functionality.\n *\n * @returns An unbind function, that can be used to stop listening for changes to system theme.\n *\n * @example\n * ```\n * enableGlobalTheme({colorMode: 'auto', light: 'light', dark: 'dark', spacing: 'spacing'});\n * ```\n */\nvar enableGlobalTheme = function enableGlobalTheme() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$colorMode = _ref.colorMode,\n    colorMode = _ref$colorMode === void 0 ? themeStateDefaults['colorMode'] : _ref$colorMode,\n    _ref$contrastMode = _ref.contrastMode,\n    contrastMode = _ref$contrastMode === void 0 ? themeStateDefaults['contrastMode'] : _ref$contrastMode,\n    _ref$dark = _ref.dark,\n    dark = _ref$dark === void 0 ? themeStateDefaults['dark'] : _ref$dark,\n    _ref$light = _ref.light,\n    light = _ref$light === void 0 ? themeStateDefaults['light'] : _ref$light,\n    _ref$shape = _ref.shape,\n    shape = _ref$shape === void 0 ? themeStateDefaults['shape'] : _ref$shape,\n    _ref$spacing = _ref.spacing,\n    spacing = _ref$spacing === void 0 ? themeStateDefaults['spacing'] : _ref$spacing,\n    _ref$typography = _ref.typography,\n    typography = _ref$typography === void 0 ? themeStateDefaults['typography']() : _ref$typography,\n    _ref$UNSAFE_themeOpti = _ref.UNSAFE_themeOptions,\n    UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults['UNSAFE_themeOptions'] : _ref$UNSAFE_themeOpti;\n  var themeLoader = arguments.length > 1 ? arguments[1] : undefined;\n  var themeState = {\n    colorMode: colorMode,\n    contrastMode: contrastMode,\n    dark: dark,\n    light: light,\n    shape: shape,\n    spacing: spacing,\n    typography: typography,\n    UNSAFE_themeOptions: themeLoader ? undefined : UNSAFE_themeOptions\n  };\n\n  // Determine what to load and call theme loader\n  var themePreferences = getThemePreferences(themeState);\n  if (themeLoader) {\n    themePreferences.map(function (themeId) {\n      return themeLoader(themeId);\n    });\n  }\n  var autoUnbind = configurePage(themeState);\n  return autoUnbind;\n};\nexport default enableGlobalTheme;", "import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { fg } from '@atlaskit/platform-feature-flags';\nimport { themeIdsWithOverrides, themeStateDefaults } from './theme-config';\nimport { isValidBrandHex } from './utils/color-utils';\nimport { getThemeOverridePreferences, getThemePreferences } from './utils/get-theme-preferences';\nimport { loadThemeCss } from './utils/theme-loading';\n/**\n * Takes an object containing theme preferences, and returns an array of objects for use in applying styles to the document head.\n * Only supplies the color themes necessary for initial render, based on the current themeState. I.e. if in light mode, dark mode themes are not returned.\n *\n * @param {Object<string, string>} themeState The themes and color mode that should be applied.\n * @param {string} themeState.colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n * @param {string} themeState.dark The color theme to be applied when the color mode resolves to 'dark'.\n * @param {string} themeState.light The color theme to be applied when the color mode resolves to 'light'.\n * @param {string} themeState.shape The shape theme to be applied.\n * @param {string} themeState.spacing The spacing theme to be applied.\n * @param {string} themeState.typography The typography theme to be applied.\n * @param {Object} themeState.UNSAFE_themeOptions The custom branding options to be used for custom theme generation\n *\n * @returns A Promise of an object array, containing theme IDs, data-attributes to attach to the theme, and the theme CSS.\n * If an error is encountered while loading themes, the themes array will be empty.\n */\nvar getThemeStyles = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(preferences) {\n    var themePreferences, themeOverridePreferences, themeState, results;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          themeOverridePreferences = [];\n          if (preferences === 'all') {\n            themePreferences = themeIdsWithOverrides;\n\n            // CLEANUP: Remove\n            if (!fg('platform_increased-contrast-themes')) {\n              themePreferences = themePreferences.filter(function (n) {\n                return n !== 'light-increased-contrast' && n !== 'dark-increased-contrast';\n              });\n            }\n            themePreferences = themePreferences.filter(function (n) {\n              return n !== 'light-brand-refresh' && n !== 'dark-brand-refresh';\n            });\n          } else {\n            themeState = {\n              colorMode: (preferences === null || preferences === void 0 ? void 0 : preferences.colorMode) || themeStateDefaults['colorMode'],\n              contrastMode: (preferences === null || preferences === void 0 ? void 0 : preferences.contrastMode) || themeStateDefaults['contrastMode'],\n              dark: (preferences === null || preferences === void 0 ? void 0 : preferences.dark) || themeStateDefaults['dark'],\n              light: (preferences === null || preferences === void 0 ? void 0 : preferences.light) || themeStateDefaults['light'],\n              shape: (preferences === null || preferences === void 0 ? void 0 : preferences.shape) || themeStateDefaults['shape'],\n              spacing: (preferences === null || preferences === void 0 ? void 0 : preferences.spacing) || themeStateDefaults['spacing'],\n              typography: (preferences === null || preferences === void 0 ? void 0 : preferences.typography) || themeStateDefaults['typography']()\n            };\n            themePreferences = getThemePreferences(themeState);\n            themeOverridePreferences = getThemeOverridePreferences(themeState);\n          }\n          _context3.next = 4;\n          return Promise.all([].concat(_toConsumableArray([].concat(_toConsumableArray(themePreferences), _toConsumableArray(themeOverridePreferences)).map( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(themeId) {\n              var css;\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return loadThemeCss(themeId);\n                  case 3:\n                    css = _context.sent;\n                    return _context.abrupt(\"return\", {\n                      id: themeId,\n                      attrs: {\n                        'data-theme': themeId\n                      },\n                      css: css\n                    });\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    return _context.abrupt(\"return\", undefined);\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee, null, [[0, 7]]);\n            }));\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }())), [\n          // Add custom themes if they're present\n          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            var _preferences$UNSAFE_t;\n            var _yield$import, getCustomThemeStyles, customThemeStyles;\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(preferences !== 'all' && preferences !== null && preferences !== void 0 && preferences.UNSAFE_themeOptions && isValidBrandHex(preferences === null || preferences === void 0 || (_preferences$UNSAFE_t = preferences.UNSAFE_themeOptions) === null || _preferences$UNSAFE_t === void 0 ? void 0 : _preferences$UNSAFE_t.brandColor))) {\n                    _context2.next = 15;\n                    break;\n                  }\n                  _context2.prev = 1;\n                  _context2.next = 4;\n                  return import( /* webpackChunkName: \"@atlaskit-internal_atlassian-custom-theme\" */\n                  './custom-theme');\n                case 4:\n                  _yield$import = _context2.sent;\n                  getCustomThemeStyles = _yield$import.getCustomThemeStyles;\n                  _context2.next = 8;\n                  return getCustomThemeStyles({\n                    colorMode: (preferences === null || preferences === void 0 ? void 0 : preferences.colorMode) || themeStateDefaults['colorMode'],\n                    UNSAFE_themeOptions: preferences === null || preferences === void 0 ? void 0 : preferences.UNSAFE_themeOptions\n                  });\n                case 8:\n                  customThemeStyles = _context2.sent;\n                  return _context2.abrupt(\"return\", customThemeStyles);\n                case 12:\n                  _context2.prev = 12;\n                  _context2.t0 = _context2[\"catch\"](1);\n                  return _context2.abrupt(\"return\", undefined);\n                case 15:\n                  return _context2.abrupt(\"return\", undefined);\n                case 16:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2, null, [[1, 12]]);\n          }))()]));\n        case 4:\n          results = _context3.sent;\n          return _context3.abrupt(\"return\", results.flat().filter(function (theme) {\n            return theme !== undefined;\n          }));\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function getThemeStyles(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default getThemeStyles;", "import { fg } from '@atlaskit/platform-feature-flags';\nimport { COLOR_MODE_ATTRIBUTE, CONTRAST_MODE_ATTRIBUTE } from './constants';\nimport { darkModeMediaQuery, moreContrastMediaQuery } from './utils/theme-loading';\n\n/**\n * Provides a script that, when executed before paint, sets the `data-color-mode` attribute based on the current system theme,\n * to enable SSR support for automatic theme switching, avoid a flash of un-themed content on first paint.\n *\n * @param {string} colorMode Determines which color theme is applied. If set to `auto`, the theme applied will be determined by the OS setting.\n *\n * @returns {string} A string to be added to the innerHTML of a script tag in the document head\n */\nvar getSSRAutoScript = function getSSRAutoScript(colorMode, contrastMode) {\n  if (colorMode !== 'auto' && contrastMode !== 'auto') {\n    return undefined;\n  }\n  var setColorMode = colorMode === 'auto' ? \"\\n  try {\\n    const darkModeMql = window.matchMedia('\".concat(darkModeMediaQuery, \"');\\n    const colorMode = darkModeMql.matches ? 'dark' : 'light';\\n    document.documentElement.setAttribute('\").concat(COLOR_MODE_ATTRIBUTE, \"', colorMode);\\n  } catch (e) {}\") : '';\n  var setContrastMode = contrastMode === 'auto' && fg('platform_increased-contrast-themes') ? \"\\n  try {\\n    const contrastModeMql = window.matchMedia('\".concat(moreContrastMediaQuery, \"');\\n    const contrastMode = contrastModeMql.matches ? 'more' : 'no-preference';\\n    document.documentElement.setAttribute('\").concat(CONTRAST_MODE_ATTRIBUTE, \"', contrastMode);\\n  } catch (e) {}\") : '';\n  return \"(() => {\".concat(setColorMode).concat(setContrastMode, \"})()\");\n};\nexport default getSSRAutoScript;", "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport getGlobalTheme from './get-global-theme';\nimport ThemeMutationObserver from './theme-mutation-observer';\n\n/**\n * A React hook which returns the current themes and color-mode set on `<html>`.\n *\n * @example\n * ```\n * const { colorMode, dark, light, spacing, typography } = useThemeObserver();\n *\n * // Performing side effects when it changes\n * useEffect(() => {\n *   console.log(`The color mode has changed to ${theme.colorMode}`);\n * }, [theme.colorMode]);\n * ```\n */\nvar useThemeObserver = function useThemeObserver() {\n  var _useState = useState(getGlobalTheme()),\n    _useState2 = _slicedToArray(_useState, 2),\n    theme = _useState2[0],\n    setTheme = _useState2[1];\n  useEffect(function () {\n    var observer = new ThemeMutationObserver(function (theme) {\n      return setTheme(theme);\n    });\n    observer.observe();\n    return function () {\n      return observer.disconnect();\n    };\n  }, []);\n  return theme;\n};\nexport default useThemeObserver;", "import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { COLOR_MODE_ATTRIBUTE, THEME_DATA_ATTRIBUTE } from './constants';\nimport { themeColorModes } from './theme-config';\nimport { themeStringToObject } from './theme-state-transformer';\nvar isThemeColorMode = function isThemeColorMode(colorMode) {\n  return themeColorModes.find(function (mode) {\n    return mode === colorMode;\n  }) !== undefined;\n};\nvar getGlobalTheme = function getGlobalTheme() {\n  if (typeof document === 'undefined') {\n    return {};\n  }\n  var element = document.documentElement;\n  var colorMode = element.getAttribute(COLOR_MODE_ATTRIBUTE) || '';\n  var theme = element.getAttribute(THEME_DATA_ATTRIBUTE) || '';\n  return _objectSpread(_objectSpread({}, themeStringToObject(theme)), isThemeColorMode(colorMode) && {\n    colorMode: colorMode\n  });\n};\nexport default getGlobalTheme;", "import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { COLOR_MODE_ATTRIBUTE, THEME_DATA_ATTRIBUTE } from './constants';\nimport getGlobalTheme from './get-global-theme';\n/**\n * A MutationObserver which watches the `<html>` element for changes to the theme.\n *\n * In React, use the {@link useThemeObserver `useThemeObserver`} hook instead.\n *\n * @param {function} callback - A callback function which fires when the theme changes.\n *\n * @example\n * ```\n * const observer = new ThemeMutationObserver((theme) => {});\n * observer.observe();\n * ```\n */\nvar ThemeMutationObserver = /*#__PURE__*/function () {\n  function ThemeMutationObserver(callback) {\n    _classCallCheck(this, ThemeMutationObserver);\n    _defineProperty(this, \"legacyObserver\", null);\n    this.callback = callback;\n    ThemeMutationObserver.callbacks.add(callback);\n  }\n  return _createClass(ThemeMutationObserver, [{\n    key: \"observe\",\n    value: function observe() {\n      if (!ThemeMutationObserver.observer) {\n        ThemeMutationObserver.observer = new MutationObserver(function () {\n          var theme = getGlobalTheme();\n          ThemeMutationObserver.callbacks.forEach(function (callback) {\n            return callback(theme);\n          });\n        });\n        // Observer only needs to be configured once\n        ThemeMutationObserver.observer.observe(document.documentElement, {\n          attributeFilter: [THEME_DATA_ATTRIBUTE, COLOR_MODE_ATTRIBUTE]\n        });\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.callback) {\n        ThemeMutationObserver.callbacks.delete(this.callback);\n      }\n      if (ThemeMutationObserver.callbacks.size === 0 && ThemeMutationObserver.observer) {\n        ThemeMutationObserver.observer.disconnect();\n        ThemeMutationObserver.observer = null;\n      }\n    }\n  }]);\n}();\n_defineProperty(ThemeMutationObserver, \"observer\", null);\n_defineProperty(ThemeMutationObserver, \"callbacks\", new Set());\nexport { ThemeMutationObserver as default };"],
  "mappings": "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",
  "names": ["token", "token", "import_regenerator", "isThemeKind", "isThemeIds", "isColorMode", "themeStringToObject", "themeObjectToString", "r", "getThemeHtmlAttrs", "dark", "light", "shape", "spacing", "typography", "_regeneratorRuntime", "loadAndAppendThemeCss", "loadThemeCss", "ColorModeObserver", "_bind", "import_bind_event_listener", "isMatchMediaAvailable", "checkNativeListener", "ContrastModeObserver", "_bind", "getThemePreferences", "dark", "light", "shape", "spacing", "typography", "increasedContrastTheme", "getThemeOverridePreferences", "F", "e", "r", "_regeneratorRuntime", "dark", "light", "shape", "spacing", "typography", "themeId", "setGlobalTheme", "enableGlobalTheme", "dark", "light", "shape", "spacing", "typography", "import_regenerator", "_regeneratorRuntime", "getThemeStyles", "getSSRAutoScript", "ownKeys", "r", "_objectSpread", "isThemeColorMode", "getGlobalTheme", "ThemeMutationObserver", "useThemeObserver", "theme"]
}
