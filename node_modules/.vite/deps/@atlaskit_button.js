import {
  button_base_default,
  button_default,
  createTheme,
  getCss,
  getIsOnlySingleIcon,
  theme_default
} from "./chunk-IR6OJU32.js";
import "./chunk-ORKNSTQ6.js";
import {
  spinner_default
} from "./chunk-PLHDLCB6.js";
import "./chunk-XIW5VD7B.js";
import "./chunk-KXQMNIDH.js";
import "./chunk-HFXFD3PR.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-76ISXXP4.js";
import {
  _objectWithoutProperties,
  _slicedToArray,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-XKORHSNM.js";
import "./chunk-KPKROJMQ.js";
import {
  css,
  jsx
} from "./chunk-LES4B5AP.js";
import "./chunk-ZNWH4LFA.js";
import {
  _defineProperty,
  init_defineProperty
} from "./chunk-LBGAJG32.js";
import "./chunk-DCBAGZLM.js";
import "./chunk-AAY5IJNO.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/button/dist/esm/old-button/loading-button.js
init_extends();
init_objectWithoutProperties();
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/button/dist/esm/old-button/shared/loading-spinner.js
var import_react = __toESM(require_react());
function getSpinnerAppearance(_ref) {
  var appearance = _ref.appearance, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected;
  if (isDisabled) {
    return "inherit";
  }
  if (isSelected) {
    return "invert";
  }
  if (appearance === "primary" || appearance === "danger") {
    return "invert";
  }
  return "inherit";
}
function LoadingSpinner(_ref2) {
  var appearance = _ref2.appearance, isDisabled = _ref2.isDisabled, isSelected = _ref2.isSelected, _ref2$spacing = _ref2.spacing, spacing = _ref2$spacing === void 0 ? "default" : _ref2$spacing;
  var size = spacing === "default" ? "medium" : "small";
  return import_react.default.createElement(spinner_default, {
    size,
    label: ", Loading",
    appearance: getSpinnerAppearance({
      appearance,
      isDisabled,
      isSelected
    })
  });
}

// node_modules/@atlaskit/button/dist/esm/old-button/loading-button.js
var _excluded = ["appearance", "isDisabled", "isSelected", "isLoading", "spacing"];
var LoadingButton = import_react2.default.forwardRef(function LoadingButton2(_ref, ref) {
  var appearance = _ref.appearance, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$isLoading = _ref.isLoading, isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, spacing = _ref.spacing, rest = _objectWithoutProperties(_ref, _excluded);
  return import_react2.default.createElement(button_default, _extends({}, rest, {
    ref,
    appearance,
    "aria-disabled": isLoading || void 0,
    isDisabled,
    isSelected,
    overlay: isLoading ? import_react2.default.createElement(LoadingSpinner, {
      spacing,
      appearance,
      isDisabled,
      isSelected
    }) : null,
    spacing
  }));
});
LoadingButton.displayName = "LoadingButton";
var loading_button_default = LoadingButton;

// node_modules/@atlaskit/button/dist/esm/old-button/custom-theme-button/custom-theme-button.js
init_extends();
init_slicedToArray();
init_defineProperty();
init_objectWithoutProperties();
var import_react3 = __toESM(require_react());

// node_modules/@atlaskit/button/dist/esm/old-button/custom-theme-button/theme.js
init_defineProperty();
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var stateToSelectorMap = {
  focus: "&:focus",
  focusSelected: "&:focus",
  hover: "&:hover",
  active: "&:active",
  disabled: "&[disabled]"
};
function getCustomCss(_ref) {
  var _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance, _ref$spacing = _ref.spacing, spacing = _ref$spacing === void 0 ? "default" : _ref$spacing, _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? "light" : _ref$mode, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$iconIsOnlyChild = _ref.iconIsOnlyChild, iconIsOnlyChild = _ref$iconIsOnlyChild === void 0 ? false : _ref$iconIsOnlyChild, _ref$isLoading = _ref.isLoading, isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, state = _ref.state;
  var result = getCss({
    appearance,
    spacing,
    mode,
    isSelected,
    shouldFitContainer,
    isOnlySingleIcon: iconIsOnlyChild
  });
  result.outline = "none";
  var selector = stateToSelectorMap[state];
  if (selector) {
    result = _objectSpread(_objectSpread({}, result), result[selector]);
  }
  if (isLoading) {
    result = _objectSpread(_objectSpread({}, result), result['&[data-has-overlay="true"]']);
  }
  Object.keys(result).forEach(function(key) {
    if (key === "&::-moz-focus-inner") {
      return;
    }
    if (key.indexOf("&") === 0) {
      delete result[key];
    }
  });
  return result;
}
function getSpecifiers(styles) {
  return {
    "&, &:hover, &:active, &:focus, &:focus-visible, &:visited, &:disabled, &[disabled]": styles
  };
}
function defaultThemeFn(current, values) {
  return current(values);
}
var Theme = createTheme(function(themeProps) {
  return {
    buttonStyles: getCustomCss(themeProps),
    // No styles being applied directly to spinner by default
    // Keeping this for legacy compat. We could remove it, but given
    // that we are changing theme soon there is no point
    spinnerStyles: {}
  };
});
var theme_default2 = Theme;

// node_modules/@atlaskit/button/dist/esm/old-button/custom-theme-button/custom-theme-button.js
var _excluded2 = ["appearance", "autoFocus", "isDisabled", "isSelected", "shouldFitContainer", "spacing", "isLoading", "onMouseEnter", "onMouseLeave", "onMouseDown", "onMouseUp", "onFocus", "onBlur", "theme"];
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function getInteractionState(_ref) {
  var _ref$isDisabled = _ref.isDisabled, isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled, _ref$isActive = _ref.isActive, isActive = _ref$isActive === void 0 ? false : _ref$isActive, _ref$isFocus = _ref.isFocus, isFocus = _ref$isFocus === void 0 ? false : _ref$isFocus, _ref$isHover = _ref.isHover, isHover = _ref$isHover === void 0 ? false : _ref$isHover, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, _ref$isLoading = _ref.isLoading, isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading;
  if (isDisabled) {
    return "disabled";
  }
  if (isSelected && isFocus) {
    return "focusSelected";
  }
  if (isSelected) {
    return "selected";
  }
  if (!isLoading && isActive) {
    return "active";
  }
  if (!isLoading && isHover) {
    return "hover";
  }
  if (isFocus) {
    return "focus";
  }
  return "default";
}
var initial = {
  isHover: false,
  isActive: false,
  isFocus: false
};
var CustomThemeButton = import_react3.default.memo(import_react3.default.forwardRef(function CustomThemeButton2(_ref2, ref) {
  var _ref2$appearance = _ref2.appearance, appearance = _ref2$appearance === void 0 ? "default" : _ref2$appearance, _ref2$autoFocus = _ref2.autoFocus, autoFocus = _ref2$autoFocus === void 0 ? false : _ref2$autoFocus, _ref2$isDisabled = _ref2.isDisabled, isDisabled = _ref2$isDisabled === void 0 ? false : _ref2$isDisabled, _ref2$isSelected = _ref2.isSelected, isSelected = _ref2$isSelected === void 0 ? false : _ref2$isSelected, _ref2$shouldFitContai = _ref2.shouldFitContainer, shouldFitContainer = _ref2$shouldFitContai === void 0 ? false : _ref2$shouldFitContai, _ref2$spacing = _ref2.spacing, spacing = _ref2$spacing === void 0 ? "default" : _ref2$spacing, _ref2$isLoading = _ref2.isLoading, isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading, providedOnMouseEnter = _ref2.onMouseEnter, providedOnMouseLeave = _ref2.onMouseLeave, providedOnMouseDown = _ref2.onMouseDown, providedOnMouseUp = _ref2.onMouseUp, providedOnFocus = _ref2.onFocus, providedOnBlur = _ref2.onBlur, _ref2$theme = _ref2.theme, theme = _ref2$theme === void 0 ? defaultThemeFn : _ref2$theme, rest = _objectWithoutProperties(_ref2, _excluded2);
  var restProps = _objectSpread2({
    appearance,
    autoFocus,
    isDisabled,
    isSelected,
    shouldFitContainer,
    spacing
  }, rest);
  var _useState = (0, import_react3.useState)(initial), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var onMouseEnter = (0, import_react3.useCallback)(function(event) {
    setState(function(current) {
      return _objectSpread2(_objectSpread2({}, current), {}, {
        isHover: true
      });
    });
    if (providedOnMouseEnter) {
      providedOnMouseEnter(event);
    }
  }, [providedOnMouseEnter]);
  var onMouseLeave = (0, import_react3.useCallback)(function(event) {
    setState(function(current) {
      return _objectSpread2(_objectSpread2({}, current), {}, {
        isHover: false,
        isActive: false
      });
    });
    if (providedOnMouseLeave) {
      providedOnMouseLeave(event);
    }
  }, [providedOnMouseLeave]);
  var onMouseDown = (0, import_react3.useCallback)(function(event) {
    setState(function(current) {
      return _objectSpread2(_objectSpread2({}, current), {}, {
        isActive: true
      });
    });
    if (providedOnMouseDown) {
      providedOnMouseDown(event);
    }
  }, [providedOnMouseDown]);
  var onMouseUp = (0, import_react3.useCallback)(function(event) {
    setState(function(current) {
      return _objectSpread2(_objectSpread2({}, current), {}, {
        isActive: false
      });
    });
    if (providedOnMouseUp) {
      providedOnMouseUp(event);
    }
  }, [providedOnMouseUp]);
  var onFocus = (0, import_react3.useCallback)(function(event) {
    setState(function(current) {
      return _objectSpread2(_objectSpread2({}, current), {}, {
        isFocus: true
      });
    });
    if (providedOnFocus) {
      providedOnFocus(event);
    }
  }, [providedOnFocus]);
  var onBlur = (0, import_react3.useCallback)(function(event) {
    setState(function(current) {
      return _objectSpread2(_objectSpread2({}, current), {}, {
        isFocus: false
      });
    });
    if (providedOnBlur) {
      providedOnBlur(event);
    }
  }, [providedOnBlur]);
  return import_react3.default.createElement(theme_default2.Provider, {
    value: theme
  }, import_react3.default.createElement(theme_default.Consumer, null, function(_ref3) {
    var mode = _ref3.mode;
    return import_react3.default.createElement(theme_default2.Consumer, _extends({
      mode,
      state: getInteractionState(_objectSpread2(_objectSpread2({}, state), {}, {
        isLoading,
        isSelected: restProps.isSelected,
        isDisabled: restProps.isDisabled
      })),
      iconIsOnlyChild: getIsOnlySingleIcon(restProps),
      isLoading
    }, restProps), function(_ref4) {
      var buttonStyles = _ref4.buttonStyles;
      return import_react3.default.createElement(button_base_default, _extends({}, restProps, {
        ref,
        overlay: isLoading ? import_react3.default.createElement(LoadingSpinner, restProps) : null,
        "aria-disabled": isLoading || restProps["aria-disabled"],
        onMouseEnter,
        onMouseLeave,
        onMouseDown,
        onMouseUp,
        onFocus,
        onBlur,
        buttonCss: getSpecifiers(buttonStyles)
      }));
    });
  }));
}));
CustomThemeButton.displayName = "CustomThemeButton";
var custom_theme_button_default = CustomThemeButton;

// node_modules/@atlaskit/button/dist/esm/containers/button-group.js
var import_react4 = __toESM(require_react());
var buttonGroupStyles = css({
  display: "inline-flex",
  gap: "var(--ds-space-050, 4px)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-nested-selectors -- Ignored via go/DSP-18766
  "> *": {
    flex: "1 0 auto"
  }
});
function ButtonGroup(_ref) {
  var children = _ref.children, testId = _ref.testId, label = _ref.label, titleId = _ref.titleId;
  return jsx("div", {
    css: buttonGroupStyles,
    "data-testid": testId,
    role: "group",
    "aria-label": label,
    "aria-labelledby": titleId
  }, import_react4.default.Children.map(import_react4.default.Children.toArray(children), function(child, idx) {
    if (!child) {
      return null;
    }
    return jsx(import_react4.Fragment, {
      key: idx
    }, child);
  }));
}
export {
  ButtonGroup,
  custom_theme_button_default as CustomThemeButton,
  loading_button_default as LoadingButton,
  theme_default2 as Theme,
  button_default as default
};
//# sourceMappingURL=@atlaskit_button.js.map
