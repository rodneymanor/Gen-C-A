import {
  heading_partial_default,
  require_status_success
} from "./chunk-2VJSD2Q7.js";
import {
  require_status_error_error
} from "./chunk-IE332SHN.js";
import "./chunk-TZAXJEG4.js";
import "./chunk-M7FNARKQ.js";
import "./chunk-HLN4WRPD.js";
import {
  useId
} from "./chunk-P63I2LYT.js";
import "./chunk-XUSVWCLU.js";
import "./chunk-BAELO5LP.js";
import "./chunk-5RJTHGJD.js";
import "./chunk-CGH4DJNJ.js";
import {
  base_exports,
  init_base
} from "./chunk-6B65WPO5.js";
import "./chunk-KXQMNIDH.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-XDDC4VXL.js";
import {
  fg,
  init_esm
} from "./chunk-G6GBPC7E.js";
import {
  _objectWithoutProperties,
  _objectWithoutPropertiesLoose,
  _slicedToArray,
  _toConsumableArray,
  init_objectWithoutProperties,
  init_objectWithoutPropertiesLoose,
  init_slicedToArray
} from "./chunk-6BUFHARH.js";
import "./chunk-KPKROJMQ.js";
import {
  ax,
  init_runtime
} from "./chunk-ZNWH4LFA.js";
import {
  _defineProperty,
  _typeof,
  init_defineProperty,
  init_typeof
} from "./chunk-LBGAJG32.js";
import "./chunk-AAY5IJNO.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction2;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map = getNative(root, "Map");
    module.exports = Map;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize3(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize3.Cache || MapCache)();
      return memoized;
    }
    memoize3.Cache = MapCache;
    module.exports = memoize3;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize3 = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize3(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar2 = /\\(\\)?/g;
    var stringToPath3 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName2, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar2, "$1") : number || match);
      });
      return result;
    });
    module.exports = stringToPath3;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath3 = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath3(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path[index]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/set.js
var require_set = __commonJS({
  "node_modules/lodash/set.js"(exports, module) {
    var baseSet = require_baseSet();
    function set2(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }
    module.exports = set2;
  }
});

// node_modules/@atlaskit/icon/glyph/editor/success.js
var require_success = __commonJS({
  "node_modules/@atlaskit/icon/glyph/editor/success.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _base = (init_base(), __toCommonJS(base_exports));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var EditorSuccessIcon = (props) => _react.default.createElement(_base.Icon, Object.assign({
      dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" fill-rule="evenodd" d="M12 20a8 8 0 1 1 0-16 8 8 0 0 1 0 16m1.364-10.964-2.152 4.11-1.543-1.39a1 1 0 1 0-1.338 1.487l2.5 2.25a1 1 0 0 0 1.555-.279l2.75-5.25a1 1 0 0 0-1.772-.928"/></svg>`
    }, props));
    EditorSuccessIcon.displayName = "EditorSuccessIcon";
    var _default = exports.default = EditorSuccessIcon;
  }
});

// node_modules/@atlaskit/icon/core/migration/status-success--editor-success.js
var require_status_success_editor_success = __commonJS({
  "node_modules/@atlaskit/icon/core/migration/status-success--editor-success.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _statusSuccess = _interopRequireDefault(require_status_success());
    var _success = _interopRequireDefault(require_success());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var StatusSuccessIcon = (props) => _react.default.createElement(_statusSuccess.default, Object.assign({
      name: "StatusSuccessIcon",
      LEGACY_fallbackIcon: _success.default
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    StatusSuccessIcon.displayName = "StatusSuccessIconMigration";
    var _default = exports.default = StatusSuccessIcon;
  }
});

// node_modules/@atlaskit/form/dist/esm/form.js
init_extends();
init_defineProperty();
init_slicedToArray();
var import_react = __toESM(require_react());

// node_modules/final-form/dist/final-form.es.js
init_extends();
init_objectWithoutPropertiesLoose();
var charCodeOfDot = ".".charCodeAt(0);
var reEscapeChar = /\\(\\)?/g;
var rePropName = RegExp(
  // Match anything that isn't a dot or bracket.
  `[^.[\\]]+|\\[(?:([^"'][^[]*)|(["'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))`,
  "g"
);
var stringToPath = function stringToPath2(string) {
  var result = [];
  if (string.charCodeAt(0) === charCodeOfDot) {
    result.push("");
  }
  string.replace(rePropName, function(match, expression, quote, subString) {
    var key = match;
    if (quote) {
      key = subString.replace(reEscapeChar, "$1");
    } else if (expression) {
      key = expression.trim();
    }
    result.push(key);
  });
  return result;
};
var keysCache = {};
var keysRegex = /[.[\]]+/;
var toPath = function toPath2(key) {
  if (key === null || key === void 0 || !key.length) {
    return [];
  }
  if (typeof key !== "string") {
    throw new Error("toPath() expects a string");
  }
  if (keysCache[key] == null) {
    if (key.endsWith("[]")) {
      keysCache[key] = key.split(keysRegex).filter(Boolean);
    } else {
      keysCache[key] = stringToPath(key);
    }
  }
  return keysCache[key];
};
var getIn = function getIn2(state, complexKey) {
  var path = toPath(complexKey);
  var current = state;
  for (var i = 0; i < path.length; i++) {
    var key = path[i];
    if (current === void 0 || current === null || typeof current !== "object" || Array.isArray(current) && isNaN(key)) {
      return void 0;
    }
    current = current[key];
  }
  return current;
};
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var setInRecursor = function setInRecursor2(current, index, path, value, destroyArrays) {
  if (index >= path.length) {
    return value;
  }
  var key = path[index];
  if (isNaN(key)) {
    var _extends2;
    if (current === void 0 || current === null) {
      var _ref;
      var _result = setInRecursor2(void 0, index + 1, path, value, destroyArrays);
      return _result === void 0 ? void 0 : (_ref = {}, _ref[key] = _result, _ref);
    }
    if (Array.isArray(current)) {
      throw new Error("Cannot set a non-numeric property on an array");
    }
    var _result2 = setInRecursor2(current[key], index + 1, path, value, destroyArrays);
    if (_result2 === void 0) {
      var numKeys = Object.keys(current).length;
      if (current[key] === void 0 && numKeys === 0) {
        return void 0;
      }
      if (current[key] !== void 0 && numKeys <= 1) {
        if (!isNaN(path[index - 1]) && !destroyArrays) {
          return {};
        } else {
          return void 0;
        }
      }
      current[key];
      var _final = _objectWithoutPropertiesLoose(current, [key].map(_toPropertyKey));
      return _final;
    }
    return _extends({}, current, (_extends2 = {}, _extends2[key] = _result2, _extends2));
  }
  var numericKey = Number(key);
  if (current === void 0 || current === null) {
    var _result3 = setInRecursor2(void 0, index + 1, path, value, destroyArrays);
    if (_result3 === void 0) {
      return void 0;
    }
    var _array = [];
    _array[numericKey] = _result3;
    return _array;
  }
  if (!Array.isArray(current)) {
    throw new Error("Cannot set a numeric property on an object");
  }
  var existingValue = current[numericKey];
  var result = setInRecursor2(existingValue, index + 1, path, value, destroyArrays);
  var array = [].concat(current);
  if (destroyArrays && result === void 0) {
    array.splice(numericKey, 1);
    if (array.length === 0) {
      return void 0;
    }
  } else {
    array[numericKey] = result;
  }
  return array;
};
var setIn = function setIn2(state, key, value, destroyArrays) {
  if (destroyArrays === void 0) {
    destroyArrays = false;
  }
  if (state === void 0 || state === null) {
    throw new Error("Cannot call setIn() with " + String(state) + " state");
  }
  if (key === void 0 || key === null) {
    throw new Error("Cannot call setIn() with " + String(key) + " key");
  }
  return setInRecursor(state, 0, toPath(key), value, destroyArrays);
};
var FORM_ERROR = "FINAL_FORM/form-error";
var ARRAY_ERROR = "FINAL_FORM/array-error";
function publishFieldState(formState, field) {
  var errors = formState.errors, initialValues = formState.initialValues, lastSubmittedValues = formState.lastSubmittedValues, submitErrors = formState.submitErrors, submitFailed = formState.submitFailed, submitSucceeded = formState.submitSucceeded, submitting = formState.submitting, values = formState.values;
  var active = field.active, blur = field.blur, change = field.change, data = field.data, focus = field.focus, modified = field.modified, modifiedSinceLastSubmit = field.modifiedSinceLastSubmit, name = field.name, touched = field.touched, validating = field.validating, visited = field.visited;
  var value = getIn(values, name);
  var error = getIn(errors, name);
  if (error && error[ARRAY_ERROR]) {
    error = error[ARRAY_ERROR];
  }
  var submitError = submitErrors && getIn(submitErrors, name);
  var initial = initialValues && getIn(initialValues, name);
  var pristine = field.isEqual(initial, value);
  var dirtySinceLastSubmit = !!(lastSubmittedValues && !field.isEqual(getIn(lastSubmittedValues, name), value));
  var valid = !error && !submitError;
  return {
    active,
    blur,
    change,
    data,
    dirty: !pristine,
    dirtySinceLastSubmit,
    error,
    focus,
    initial,
    invalid: !valid,
    length: Array.isArray(value) ? value.length : void 0,
    modified,
    modifiedSinceLastSubmit,
    name,
    pristine,
    submitError,
    submitFailed,
    submitSucceeded,
    submitting,
    touched,
    valid,
    value,
    visited,
    validating
  };
}
var fieldSubscriptionItems = ["active", "data", "dirty", "dirtySinceLastSubmit", "error", "initial", "invalid", "length", "modified", "modifiedSinceLastSubmit", "pristine", "submitError", "submitFailed", "submitSucceeded", "submitting", "touched", "valid", "value", "visited", "validating"];
var shallowEqual = function shallowEqual2(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== "object" || !a || typeof b !== "object" || !b) {
    return false;
  }
  var keysA = Object.keys(a);
  var keysB = Object.keys(b);
  if (keysA.length !== keysB.length) {
    return false;
  }
  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b);
  for (var idx = 0; idx < keysA.length; idx++) {
    var key = keysA[idx];
    if (!bHasOwnProperty(key) || a[key] !== b[key]) {
      return false;
    }
  }
  return true;
};
function subscriptionFilter(dest, src, previous, subscription, keys, shallowEqualKeys2) {
  var different = false;
  keys.forEach(function(key) {
    if (subscription[key]) {
      dest[key] = src[key];
      if (!previous || (~shallowEqualKeys2.indexOf(key) ? !shallowEqual(src[key], previous[key]) : src[key] !== previous[key])) {
        different = true;
      }
    }
  });
  return different;
}
var shallowEqualKeys$1 = ["data"];
var filterFieldState = function filterFieldState2(state, previousState, subscription, force) {
  var result = {
    blur: state.blur,
    change: state.change,
    focus: state.focus,
    name: state.name
  };
  var different = subscriptionFilter(result, state, previousState, subscription, fieldSubscriptionItems, shallowEqualKeys$1) || !previousState;
  return different || force ? result : void 0;
};
var formSubscriptionItems = ["active", "dirty", "dirtyFields", "dirtyFieldsSinceLastSubmit", "dirtySinceLastSubmit", "error", "errors", "hasSubmitErrors", "hasValidationErrors", "initialValues", "invalid", "modified", "modifiedSinceLastSubmit", "pristine", "submitting", "submitError", "submitErrors", "submitFailed", "submitSucceeded", "touched", "valid", "validating", "values", "visited"];
var shallowEqualKeys = ["touched", "visited"];
function filterFormState(state, previousState, subscription, force) {
  var result = {};
  var different = subscriptionFilter(result, state, previousState, subscription, formSubscriptionItems, shallowEqualKeys) || !previousState;
  return different || force ? result : void 0;
}
var memoize = function memoize2(fn) {
  var lastArgs;
  var lastResult;
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (!lastArgs || args.length !== lastArgs.length || args.some(function(arg, index) {
      return !shallowEqual(lastArgs[index], arg);
    })) {
      lastArgs = args;
      lastResult = fn.apply(void 0, args);
    }
    return lastResult;
  };
};
var isPromise = function(obj) {
  return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
};
var tripleEquals = function tripleEquals2(a, b) {
  return a === b;
};
var hasAnyError = function hasAnyError2(errors) {
  return Object.keys(errors).some(function(key) {
    var value = errors[key];
    if (value && typeof value === "object" && !(value instanceof Error)) {
      return hasAnyError2(value);
    }
    return typeof value !== "undefined";
  });
};
function convertToExternalFormState(_ref) {
  var active = _ref.active, dirtySinceLastSubmit = _ref.dirtySinceLastSubmit, modifiedSinceLastSubmit = _ref.modifiedSinceLastSubmit, error = _ref.error, errors = _ref.errors, initialValues = _ref.initialValues, pristine = _ref.pristine, submitting = _ref.submitting, submitFailed = _ref.submitFailed, submitSucceeded = _ref.submitSucceeded, submitError = _ref.submitError, submitErrors = _ref.submitErrors, valid = _ref.valid, validating = _ref.validating, values = _ref.values;
  return {
    active,
    dirty: !pristine,
    dirtySinceLastSubmit,
    modifiedSinceLastSubmit,
    error,
    errors,
    hasSubmitErrors: !!(submitError || submitErrors && hasAnyError(submitErrors)),
    hasValidationErrors: !!(error || hasAnyError(errors)),
    invalid: !valid,
    initialValues,
    pristine,
    submitting,
    submitFailed,
    submitSucceeded,
    submitError,
    submitErrors,
    valid,
    validating: validating > 0,
    values
  };
}
function notifySubscriber(subscriber, subscription, state, lastState, filter, force) {
  var notification = filter(state, lastState, subscription, force);
  if (notification) {
    subscriber(notification);
    return true;
  }
  return false;
}
function notify(_ref2, state, lastState, filter, force) {
  var entries = _ref2.entries;
  Object.keys(entries).forEach(function(key) {
    var entry = entries[Number(key)];
    if (entry) {
      var subscription = entry.subscription, subscriber = entry.subscriber, notified = entry.notified;
      if (notifySubscriber(subscriber, subscription, state, lastState, filter, force || !notified)) {
        entry.notified = true;
      }
    }
  });
}
function createForm(config) {
  if (!config) {
    throw new Error("No config specified");
  }
  var debug = config.debug, destroyOnUnregister = config.destroyOnUnregister, keepDirtyOnReinitialize = config.keepDirtyOnReinitialize, initialValues = config.initialValues, mutators = config.mutators, onSubmit = config.onSubmit, validate = config.validate, validateOnBlur = config.validateOnBlur;
  if (!onSubmit) {
    throw new Error("No onSubmit function specified");
  }
  var state = {
    subscribers: {
      index: 0,
      entries: {}
    },
    fieldSubscribers: {},
    fields: {},
    formState: {
      asyncErrors: {},
      dirtySinceLastSubmit: false,
      modifiedSinceLastSubmit: false,
      errors: {},
      initialValues: initialValues && _extends({}, initialValues),
      invalid: false,
      pristine: true,
      submitting: false,
      submitFailed: false,
      submitSucceeded: false,
      resetWhileSubmitting: false,
      valid: true,
      validating: 0,
      values: initialValues ? _extends({}, initialValues) : {}
    },
    lastFormState: void 0
  };
  var inBatch = 0;
  var validationPaused = false;
  var validationBlocked = false;
  var preventNotificationWhileValidationPaused = false;
  var nextAsyncValidationKey = 0;
  var asyncValidationPromises = {};
  var clearAsyncValidationPromise = function clearAsyncValidationPromise2(key) {
    return function(result) {
      delete asyncValidationPromises[key];
      return result;
    };
  };
  var changeValue = function changeValue2(state2, name, mutate) {
    var before = getIn(state2.formState.values, name);
    var after = mutate(before);
    state2.formState.values = setIn(state2.formState.values, name, after) || {};
  };
  var renameField = function renameField2(state2, from, to) {
    if (state2.fields[from]) {
      var _extends2, _extends3;
      state2.fields = _extends({}, state2.fields, (_extends2 = {}, _extends2[to] = _extends({}, state2.fields[from], {
        name: to,
        // rebind event handlers
        blur: function blur() {
          return api.blur(to);
        },
        change: function change(value2) {
          return api.change(to, value2);
        },
        focus: function focus() {
          return api.focus(to);
        },
        lastFieldState: void 0
      }), _extends2));
      delete state2.fields[from];
      state2.fieldSubscribers = _extends({}, state2.fieldSubscribers, (_extends3 = {}, _extends3[to] = state2.fieldSubscribers[from], _extends3));
      delete state2.fieldSubscribers[from];
      var value = getIn(state2.formState.values, from);
      state2.formState.values = setIn(state2.formState.values, from, void 0) || {};
      state2.formState.values = setIn(state2.formState.values, to, value);
      delete state2.lastFormState;
    }
  };
  var getMutatorApi = function getMutatorApi2(key) {
    return function() {
      if (mutators) {
        var mutatableState = {
          formState: state.formState,
          fields: state.fields,
          fieldSubscribers: state.fieldSubscribers,
          lastFormState: state.lastFormState
        };
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var returnValue = mutators[key](args, mutatableState, {
          changeValue,
          getIn,
          renameField,
          resetFieldState: api.resetFieldState,
          setIn,
          shallowEqual
        });
        state.formState = mutatableState.formState;
        state.fields = mutatableState.fields;
        state.fieldSubscribers = mutatableState.fieldSubscribers;
        state.lastFormState = mutatableState.lastFormState;
        runValidation(void 0, function() {
          notifyFieldListeners();
          notifyFormListeners();
        });
        return returnValue;
      }
    };
  };
  var mutatorsApi = mutators ? Object.keys(mutators).reduce(function(result, key) {
    result[key] = getMutatorApi(key);
    return result;
  }, {}) : {};
  var runRecordLevelValidation = function runRecordLevelValidation2(setErrors) {
    var promises = [];
    if (validate) {
      var errorsOrPromise = validate(_extends({}, state.formState.values));
      if (isPromise(errorsOrPromise)) {
        promises.push(errorsOrPromise.then(function(errors) {
          return setErrors(errors, true);
        }));
      } else {
        setErrors(errorsOrPromise, false);
      }
    }
    return promises;
  };
  var getValidators = function getValidators2(field) {
    return Object.keys(field.validators).reduce(function(result, index) {
      var validator = field.validators[Number(index)]();
      if (validator) {
        result.push(validator);
      }
      return result;
    }, []);
  };
  var runFieldLevelValidation = function runFieldLevelValidation2(field, setError) {
    var promises = [];
    var validators = getValidators(field);
    if (validators.length) {
      var error;
      validators.forEach(function(validator) {
        var errorOrPromise = validator(getIn(state.formState.values, field.name), state.formState.values, validator.length === 0 || validator.length === 3 ? publishFieldState(state.formState, state.fields[field.name]) : void 0);
        if (errorOrPromise && isPromise(errorOrPromise)) {
          field.validating = true;
          var promise = errorOrPromise.then(function(error2) {
            if (state.fields[field.name]) {
              state.fields[field.name].validating = false;
              setError(error2);
            }
          });
          promises.push(promise);
        } else if (!error) {
          error = errorOrPromise;
        }
      });
      setError(error);
    }
    return promises;
  };
  var runValidation = function runValidation2(fieldChanged, callback) {
    if (validationPaused) {
      validationBlocked = true;
      callback();
      return;
    }
    var fields = state.fields, formState = state.formState;
    var safeFields = _extends({}, fields);
    var fieldKeys = Object.keys(safeFields);
    if (!validate && !fieldKeys.some(function(key) {
      return getValidators(safeFields[key]).length;
    })) {
      callback();
      return;
    }
    var limitedFieldLevelValidation = false;
    if (fieldChanged) {
      var changedField = safeFields[fieldChanged];
      if (changedField) {
        var validateFields = changedField.validateFields;
        if (validateFields) {
          limitedFieldLevelValidation = true;
          fieldKeys = validateFields.length ? validateFields.concat(fieldChanged) : [fieldChanged];
        }
      }
    }
    var recordLevelErrors = {};
    var asyncRecordLevelErrors = {};
    var fieldLevelErrors = {};
    var promises = [].concat(runRecordLevelValidation(function(errors, wasAsync) {
      if (wasAsync) {
        asyncRecordLevelErrors = errors || {};
      } else {
        recordLevelErrors = errors || {};
      }
    }), fieldKeys.reduce(function(result, name) {
      return result.concat(runFieldLevelValidation(fields[name], function(error) {
        fieldLevelErrors[name] = error;
      }));
    }, []));
    var hasAsyncValidations = promises.length > 0;
    var asyncValidationPromiseKey = ++nextAsyncValidationKey;
    var promise = Promise.all(promises).then(clearAsyncValidationPromise(asyncValidationPromiseKey));
    if (hasAsyncValidations) {
      asyncValidationPromises[asyncValidationPromiseKey] = promise;
    }
    var processErrors = function processErrors2(afterAsync) {
      var merged = _extends({}, limitedFieldLevelValidation ? formState.errors : {}, recordLevelErrors, afterAsync ? asyncRecordLevelErrors : formState.asyncErrors);
      var forEachError = function forEachError2(fn) {
        fieldKeys.forEach(function(name) {
          if (fields[name]) {
            var recordLevelError = getIn(recordLevelErrors, name);
            var errorFromParent = getIn(merged, name);
            var hasFieldLevelValidation = getValidators(safeFields[name]).length;
            var fieldLevelError = fieldLevelErrors[name];
            fn(name, hasFieldLevelValidation && fieldLevelError || validate && recordLevelError || (!recordLevelError && !limitedFieldLevelValidation ? errorFromParent : void 0));
          }
        });
      };
      forEachError(function(name, error) {
        merged = setIn(merged, name, error) || {};
      });
      forEachError(function(name, error) {
        if (error && error[ARRAY_ERROR]) {
          var existing = getIn(merged, name);
          var copy = [].concat(existing);
          copy[ARRAY_ERROR] = error[ARRAY_ERROR];
          merged = setIn(merged, name, copy);
        }
      });
      if (!shallowEqual(formState.errors, merged)) {
        formState.errors = merged;
      }
      if (afterAsync) {
        formState.asyncErrors = asyncRecordLevelErrors;
      }
      formState.error = recordLevelErrors[FORM_ERROR];
    };
    if (hasAsyncValidations) {
      state.formState.validating++;
      callback();
    }
    processErrors(false);
    callback();
    if (hasAsyncValidations) {
      var afterPromise = function afterPromise2() {
        state.formState.validating--;
        callback();
        if (state.formState.validating === 0 && state.lastFormState.validating) {
          notifyFormListeners();
        }
      };
      promise.then(function() {
        if (nextAsyncValidationKey > asyncValidationPromiseKey) {
          return;
        }
        processErrors(true);
      }).then(afterPromise, afterPromise);
    }
  };
  var notifyFieldListeners = function notifyFieldListeners2(name) {
    if (inBatch) {
      return;
    }
    var fields = state.fields, fieldSubscribers = state.fieldSubscribers, formState = state.formState;
    var safeFields = _extends({}, fields);
    var notifyField = function notifyField2(name2) {
      var field = safeFields[name2];
      var fieldState = publishFieldState(formState, field);
      var lastFieldState = field.lastFieldState;
      field.lastFieldState = fieldState;
      var fieldSubscriber = fieldSubscribers[name2];
      if (fieldSubscriber) {
        notify(fieldSubscriber, fieldState, lastFieldState, filterFieldState, lastFieldState === void 0);
      }
    };
    if (name) {
      notifyField(name);
    } else {
      Object.keys(safeFields).forEach(notifyField);
    }
  };
  var markAllFieldsTouched = function markAllFieldsTouched2() {
    Object.keys(state.fields).forEach(function(key) {
      state.fields[key].touched = true;
    });
  };
  var hasSyncErrors = function hasSyncErrors2() {
    return !!(state.formState.error || hasAnyError(state.formState.errors));
  };
  var calculateNextFormState = function calculateNextFormState2() {
    var fields = state.fields, formState = state.formState, lastFormState = state.lastFormState;
    var safeFields = _extends({}, fields);
    var safeFieldKeys = Object.keys(safeFields);
    var foundDirty = false;
    var dirtyFields = safeFieldKeys.reduce(function(result, key) {
      var dirty = !safeFields[key].isEqual(getIn(formState.values, key), getIn(formState.initialValues || {}, key));
      if (dirty) {
        foundDirty = true;
        result[key] = true;
      }
      return result;
    }, {});
    var dirtyFieldsSinceLastSubmit = safeFieldKeys.reduce(function(result, key) {
      var nonNullLastSubmittedValues = formState.lastSubmittedValues || {};
      if (!safeFields[key].isEqual(getIn(formState.values, key), getIn(nonNullLastSubmittedValues, key))) {
        result[key] = true;
      }
      return result;
    }, {});
    formState.pristine = !foundDirty;
    formState.dirtySinceLastSubmit = !!(formState.lastSubmittedValues && Object.values(dirtyFieldsSinceLastSubmit).some(function(value) {
      return value;
    }));
    formState.modifiedSinceLastSubmit = !!(formState.lastSubmittedValues && // Object.values would treat values as mixed (facebook/flow#2221)
    Object.keys(safeFields).some(function(value) {
      return safeFields[value].modifiedSinceLastSubmit;
    }));
    formState.valid = !formState.error && !formState.submitError && !hasAnyError(formState.errors) && !(formState.submitErrors && hasAnyError(formState.submitErrors));
    var nextFormState = convertToExternalFormState(formState);
    var _safeFieldKeys$reduce = safeFieldKeys.reduce(function(result, key) {
      result.modified[key] = safeFields[key].modified;
      result.touched[key] = safeFields[key].touched;
      result.visited[key] = safeFields[key].visited;
      return result;
    }, {
      modified: {},
      touched: {},
      visited: {}
    }), modified = _safeFieldKeys$reduce.modified, touched = _safeFieldKeys$reduce.touched, visited = _safeFieldKeys$reduce.visited;
    nextFormState.dirtyFields = lastFormState && shallowEqual(lastFormState.dirtyFields, dirtyFields) ? lastFormState.dirtyFields : dirtyFields;
    nextFormState.dirtyFieldsSinceLastSubmit = lastFormState && shallowEqual(lastFormState.dirtyFieldsSinceLastSubmit, dirtyFieldsSinceLastSubmit) ? lastFormState.dirtyFieldsSinceLastSubmit : dirtyFieldsSinceLastSubmit;
    nextFormState.modified = lastFormState && shallowEqual(lastFormState.modified, modified) ? lastFormState.modified : modified;
    nextFormState.touched = lastFormState && shallowEqual(lastFormState.touched, touched) ? lastFormState.touched : touched;
    nextFormState.visited = lastFormState && shallowEqual(lastFormState.visited, visited) ? lastFormState.visited : visited;
    return lastFormState && shallowEqual(lastFormState, nextFormState) ? lastFormState : nextFormState;
  };
  var callDebug = function callDebug2() {
    return debug && true && debug(calculateNextFormState(), Object.keys(state.fields).reduce(function(result, key) {
      result[key] = state.fields[key];
      return result;
    }, {}));
  };
  var notifying = false;
  var scheduleNotification = false;
  var notifyFormListeners = function notifyFormListeners2() {
    if (notifying) {
      scheduleNotification = true;
    } else {
      notifying = true;
      callDebug();
      if (!inBatch && !(validationPaused && preventNotificationWhileValidationPaused)) {
        var lastFormState = state.lastFormState;
        var nextFormState = calculateNextFormState();
        if (nextFormState !== lastFormState) {
          state.lastFormState = nextFormState;
          notify(state.subscribers, nextFormState, lastFormState, filterFormState);
        }
      }
      notifying = false;
      if (scheduleNotification) {
        scheduleNotification = false;
        notifyFormListeners2();
      }
    }
  };
  var beforeSubmit = function beforeSubmit2() {
    return Object.keys(state.fields).some(function(name) {
      return state.fields[name].beforeSubmit && state.fields[name].beforeSubmit() === false;
    });
  };
  var afterSubmit = function afterSubmit2() {
    return Object.keys(state.fields).forEach(function(name) {
      return state.fields[name].afterSubmit && state.fields[name].afterSubmit();
    });
  };
  var resetModifiedAfterSubmit = function resetModifiedAfterSubmit2() {
    return Object.keys(state.fields).forEach(function(key) {
      return state.fields[key].modifiedSinceLastSubmit = false;
    });
  };
  runValidation(void 0, function() {
    notifyFormListeners();
  });
  var api = {
    batch: function batch(fn) {
      inBatch++;
      fn();
      inBatch--;
      notifyFieldListeners();
      notifyFormListeners();
    },
    blur: function blur(name) {
      var fields = state.fields, formState = state.formState;
      var previous = fields[name];
      if (previous) {
        delete formState.active;
        fields[name] = _extends({}, previous, {
          active: false,
          touched: true
        });
        if (validateOnBlur) {
          runValidation(name, function() {
            notifyFieldListeners();
            notifyFormListeners();
          });
        } else {
          notifyFieldListeners();
          notifyFormListeners();
        }
      }
    },
    change: function change(name, value) {
      var fields = state.fields, formState = state.formState;
      if (getIn(formState.values, name) !== value) {
        changeValue(state, name, function() {
          return value;
        });
        var previous = fields[name];
        if (previous) {
          fields[name] = _extends({}, previous, {
            modified: true,
            modifiedSinceLastSubmit: !!formState.lastSubmittedValues
          });
        }
        if (validateOnBlur) {
          notifyFieldListeners();
          notifyFormListeners();
        } else {
          runValidation(name, function() {
            notifyFieldListeners();
            notifyFormListeners();
          });
        }
      }
    },
    get destroyOnUnregister() {
      return !!destroyOnUnregister;
    },
    set destroyOnUnregister(value) {
      destroyOnUnregister = value;
    },
    focus: function focus(name) {
      var field = state.fields[name];
      if (field && !field.active) {
        state.formState.active = name;
        field.active = true;
        field.visited = true;
        notifyFieldListeners();
        notifyFormListeners();
      }
    },
    mutators: mutatorsApi,
    getFieldState: function getFieldState(name) {
      var field = state.fields[name];
      return field && field.lastFieldState;
    },
    getRegisteredFields: function getRegisteredFields() {
      return Object.keys(state.fields);
    },
    getState: function getState() {
      return calculateNextFormState();
    },
    initialize: function initialize(data) {
      var fields = state.fields, formState = state.formState;
      var safeFields = _extends({}, fields);
      var values = typeof data === "function" ? data(formState.values) : data;
      if (!keepDirtyOnReinitialize) {
        formState.values = values;
      }
      var savedDirtyValues = keepDirtyOnReinitialize ? Object.keys(safeFields).reduce(function(result, key) {
        var field = safeFields[key];
        var pristine = field.isEqual(getIn(formState.values, key), getIn(formState.initialValues || {}, key));
        if (!pristine) {
          result[key] = getIn(formState.values, key);
        }
        return result;
      }, {}) : {};
      formState.initialValues = values;
      formState.values = values;
      Object.keys(savedDirtyValues).forEach(function(key) {
        formState.values = setIn(formState.values, key, savedDirtyValues[key]) || {};
      });
      runValidation(void 0, function() {
        notifyFieldListeners();
        notifyFormListeners();
      });
    },
    isValidationPaused: function isValidationPaused() {
      return validationPaused;
    },
    pauseValidation: function pauseValidation(preventNotification) {
      if (preventNotification === void 0) {
        preventNotification = true;
      }
      validationPaused = true;
      preventNotificationWhileValidationPaused = preventNotification;
    },
    registerField: function registerField2(name, subscriber, subscription, fieldConfig) {
      if (subscription === void 0) {
        subscription = {};
      }
      if (!state.fieldSubscribers[name]) {
        state.fieldSubscribers[name] = {
          index: 0,
          entries: {}
        };
      }
      var index = state.fieldSubscribers[name].index++;
      state.fieldSubscribers[name].entries[index] = {
        subscriber: memoize(subscriber),
        subscription,
        notified: false
      };
      var field = state.fields[name] || {
        active: false,
        afterSubmit: fieldConfig && fieldConfig.afterSubmit,
        beforeSubmit: fieldConfig && fieldConfig.beforeSubmit,
        data: fieldConfig && fieldConfig.data || {},
        isEqual: fieldConfig && fieldConfig.isEqual || tripleEquals,
        lastFieldState: void 0,
        modified: false,
        modifiedSinceLastSubmit: false,
        name,
        touched: false,
        valid: true,
        validateFields: fieldConfig && fieldConfig.validateFields,
        validators: {},
        validating: false,
        visited: false
      };
      field.blur = field.blur || function() {
        return api.blur(name);
      };
      field.change = field.change || function(value) {
        return api.change(name, value);
      };
      field.focus = field.focus || function() {
        return api.focus(name);
      };
      state.fields[name] = field;
      var haveValidator = false;
      var silent = fieldConfig && fieldConfig.silent;
      var notify2 = function notify3() {
        if (silent && state.fields[name]) {
          notifyFieldListeners(name);
        } else {
          notifyFormListeners();
          notifyFieldListeners();
        }
      };
      if (fieldConfig) {
        haveValidator = !!(fieldConfig.getValidator && fieldConfig.getValidator());
        if (fieldConfig.getValidator) {
          state.fields[name].validators[index] = fieldConfig.getValidator;
        }
        var noValueInFormState = getIn(state.formState.values, name) === void 0;
        if (fieldConfig.initialValue !== void 0 && (noValueInFormState || getIn(state.formState.values, name) === getIn(state.formState.initialValues, name))) {
          state.formState.initialValues = setIn(state.formState.initialValues || {}, name, fieldConfig.initialValue);
          state.formState.values = setIn(state.formState.values, name, fieldConfig.initialValue);
          runValidation(void 0, notify2);
        }
        if (fieldConfig.defaultValue !== void 0 && fieldConfig.initialValue === void 0 && getIn(state.formState.initialValues, name) === void 0 && noValueInFormState) {
          state.formState.values = setIn(state.formState.values, name, fieldConfig.defaultValue);
        }
      }
      if (haveValidator) {
        runValidation(void 0, notify2);
      } else {
        notify2();
      }
      return function() {
        var validatorRemoved = false;
        if (state.fields[name]) {
          validatorRemoved = !!(state.fields[name].validators[index] && state.fields[name].validators[index]());
          delete state.fields[name].validators[index];
        }
        var hasFieldSubscribers = !!state.fieldSubscribers[name];
        if (hasFieldSubscribers) {
          delete state.fieldSubscribers[name].entries[index];
        }
        var lastOne = hasFieldSubscribers && !Object.keys(state.fieldSubscribers[name].entries).length;
        if (lastOne) {
          delete state.fieldSubscribers[name];
          delete state.fields[name];
          if (validatorRemoved) {
            state.formState.errors = setIn(state.formState.errors, name, void 0) || {};
          }
          if (destroyOnUnregister) {
            state.formState.values = setIn(state.formState.values, name, void 0, true) || {};
          }
        }
        if (!silent) {
          if (validatorRemoved) {
            runValidation(void 0, function() {
              notifyFormListeners();
              notifyFieldListeners();
            });
          } else if (lastOne) {
            notifyFormListeners();
          }
        }
      };
    },
    reset: function reset(initialValues2) {
      if (initialValues2 === void 0) {
        initialValues2 = state.formState.initialValues;
      }
      if (state.formState.submitting) {
        state.formState.resetWhileSubmitting = true;
      }
      state.formState.submitFailed = false;
      state.formState.submitSucceeded = false;
      delete state.formState.submitError;
      delete state.formState.submitErrors;
      delete state.formState.lastSubmittedValues;
      api.initialize(initialValues2 || {});
    },
    /**
     * Resets all field flags (e.g. touched, visited, etc.) to their initial state
     */
    resetFieldState: function resetFieldState(name) {
      state.fields[name] = _extends({}, state.fields[name], {
        active: false,
        lastFieldState: void 0,
        modified: false,
        touched: false,
        valid: true,
        validating: false,
        visited: false
      });
      runValidation(void 0, function() {
        notifyFieldListeners();
        notifyFormListeners();
      });
    },
    /**
     * Returns the form to a clean slate; that is:
     * - Clear all values
     * - Resets all fields to their initial state
     */
    restart: function restart(initialValues2) {
      if (initialValues2 === void 0) {
        initialValues2 = state.formState.initialValues;
      }
      api.batch(function() {
        for (var name in state.fields) {
          api.resetFieldState(name);
          state.fields[name] = _extends({}, state.fields[name], {
            active: false,
            lastFieldState: void 0,
            modified: false,
            modifiedSinceLastSubmit: false,
            touched: false,
            valid: true,
            validating: false,
            visited: false
          });
        }
        api.reset(initialValues2);
      });
    },
    resumeValidation: function resumeValidation() {
      validationPaused = false;
      preventNotificationWhileValidationPaused = false;
      if (validationBlocked) {
        runValidation(void 0, function() {
          notifyFieldListeners();
          notifyFormListeners();
        });
      }
      validationBlocked = false;
    },
    setConfig: function setConfig(name, value) {
      switch (name) {
        case "debug":
          debug = value;
          break;
        case "destroyOnUnregister":
          destroyOnUnregister = value;
          break;
        case "initialValues":
          api.initialize(value);
          break;
        case "keepDirtyOnReinitialize":
          keepDirtyOnReinitialize = value;
          break;
        case "mutators":
          mutators = value;
          if (value) {
            Object.keys(mutatorsApi).forEach(function(key) {
              if (!(key in value)) {
                delete mutatorsApi[key];
              }
            });
            Object.keys(value).forEach(function(key) {
              mutatorsApi[key] = getMutatorApi(key);
            });
          } else {
            Object.keys(mutatorsApi).forEach(function(key) {
              delete mutatorsApi[key];
            });
          }
          break;
        case "onSubmit":
          onSubmit = value;
          break;
        case "validate":
          validate = value;
          runValidation(void 0, function() {
            notifyFieldListeners();
            notifyFormListeners();
          });
          break;
        case "validateOnBlur":
          validateOnBlur = value;
          break;
        default:
          throw new Error("Unrecognised option " + name);
      }
    },
    submit: function submit() {
      var formState = state.formState;
      if (formState.submitting) {
        return;
      }
      delete formState.submitErrors;
      delete formState.submitError;
      formState.lastSubmittedValues = _extends({}, formState.values);
      if (hasSyncErrors()) {
        markAllFieldsTouched();
        resetModifiedAfterSubmit();
        state.formState.submitFailed = true;
        notifyFormListeners();
        notifyFieldListeners();
        return;
      }
      var asyncValidationPromisesKeys = Object.keys(asyncValidationPromises);
      if (asyncValidationPromisesKeys.length) {
        Promise.all(asyncValidationPromisesKeys.map(function(key) {
          return asyncValidationPromises[Number(key)];
        })).then(api.submit, console.error);
        return;
      }
      var submitIsBlocked = beforeSubmit();
      if (submitIsBlocked) {
        return;
      }
      var resolvePromise;
      var completeCalled = false;
      var complete = function complete2(errors) {
        formState.submitting = false;
        var resetWhileSubmitting = formState.resetWhileSubmitting;
        if (resetWhileSubmitting) {
          formState.resetWhileSubmitting = false;
        }
        if (errors && hasAnyError(errors)) {
          formState.submitFailed = true;
          formState.submitSucceeded = false;
          formState.submitErrors = errors;
          formState.submitError = errors[FORM_ERROR];
          markAllFieldsTouched();
        } else {
          if (!resetWhileSubmitting) {
            formState.submitFailed = false;
            formState.submitSucceeded = true;
          }
          afterSubmit();
        }
        notifyFormListeners();
        notifyFieldListeners();
        completeCalled = true;
        if (resolvePromise) {
          resolvePromise(errors);
        }
        return errors;
      };
      formState.submitting = true;
      formState.submitFailed = false;
      formState.submitSucceeded = false;
      formState.lastSubmittedValues = _extends({}, formState.values);
      resetModifiedAfterSubmit();
      var result = onSubmit(formState.values, api, complete);
      if (!completeCalled) {
        if (result && isPromise(result)) {
          notifyFormListeners();
          notifyFieldListeners();
          return result.then(complete, function(error) {
            complete();
            throw error;
          });
        } else if (onSubmit.length >= 3) {
          notifyFormListeners();
          notifyFieldListeners();
          return new Promise(function(resolve) {
            resolvePromise = resolve;
          });
        } else {
          complete(result);
        }
      }
    },
    subscribe: function subscribe2(subscriber, subscription) {
      if (!subscriber) {
        throw new Error("No callback given.");
      }
      if (!subscription) {
        throw new Error("No subscription provided. What values do you want to listen to?");
      }
      var memoized = memoize(subscriber);
      var subscribers = state.subscribers;
      var index = subscribers.index++;
      subscribers.entries[index] = {
        subscriber: memoized,
        subscription,
        notified: false
      };
      var nextFormState = calculateNextFormState();
      notifySubscriber(memoized, subscription, nextFormState, nextFormState, filterFormState, true);
      return function() {
        delete subscribers.entries[index];
      };
    }
  };
  return api;
}

// node_modules/final-form-focus/dist/final-form-focus.es.js
var isFocusableInput = function isFocusableInput2(wtf) {
  return !!(wtf && typeof wtf.focus === "function");
};
var getAllInputs = function getAllInputs2() {
  if (typeof document === "undefined") {
    return [];
  }
  return Array.prototype.slice.call(document.forms).reduce(function(accumulator, form) {
    return accumulator.concat(Array.prototype.slice.call(form).filter(isFocusableInput));
  }, []);
};
var findInput = function findInput2(inputs, errors) {
  return inputs.find(function(input) {
    return input.name && getIn(errors, input.name);
  });
};
var noop = function noop2() {
};
var createDecorator = function createDecorator2(getInputs, findInput$$1) {
  return function(form) {
    var focusOnFirstError = function focusOnFirstError2(errors) {
      if (!getInputs) {
        getInputs = getAllInputs;
      }
      if (!findInput$$1) {
        findInput$$1 = findInput;
      }
      var firstInput = findInput$$1(getInputs(), errors);
      if (firstInput) {
        firstInput.focus();
      }
    };
    var originalSubmit = form.submit;
    var state = {};
    var unsubscribe = form.subscribe(function(nextState) {
      state = nextState;
    }, {
      errors: true,
      submitErrors: true
    });
    var afterSubmit = function afterSubmit2() {
      var _state = state, errors = _state.errors, submitErrors = _state.submitErrors;
      if (errors && Object.keys(errors).length) {
        focusOnFirstError(errors);
      } else if (submitErrors && Object.keys(submitErrors).length) {
        focusOnFirstError(submitErrors);
      }
    };
    form.submit = function() {
      var result = originalSubmit.call(form);
      if (result && typeof result.then === "function") {
        result.then(afterSubmit, noop);
      } else {
        afterSubmit();
      }
      return result;
    };
    return function() {
      unsubscribe();
      form.submit = originalSubmit;
    };
  };
};
var final_form_focus_es_default = createDecorator;

// node_modules/@atlaskit/form/dist/esm/form.js
var import_set = __toESM(require_set());
init_esm();

// node_modules/@atlaskit/form/dist/esm/utils.js
var getFirstErrorField = function getFirstErrorField2(inputs, errors) {
  var htmlInputs = inputs;
  return htmlInputs.find(function(input) {
    if (input.type === "hidden") {
      return false;
    }
    if (input.id && getIn(errors, input.id)) {
      return true;
    }
    return input.name && getIn(errors, input.name);
  });
};

// node_modules/@atlaskit/form/dist/esm/form.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var FormContext = (0, import_react.createContext)({
  registerField: function registerField() {
    return function() {
    };
  },
  getCurrentValue: function getCurrentValue() {
    return void 0;
  },
  subscribe: function subscribe() {
    return function() {
    };
  }
});
var IsDisabledContext = (0, import_react.createContext)(false);
function Form(props) {
  var userProvidedFormProps = props.formProps, onSubmit = props.onSubmit, testId = props.testId;
  var formRef = (0, import_react.useRef)(null);
  var onSubmitRef = (0, import_react.useRef)(onSubmit);
  onSubmitRef.current = onSubmit;
  var _useState = (0, import_react.useState)(function() {
    var finalForm = createForm({
      onSubmit: function onSubmit2() {
        return onSubmitRef.current.apply(onSubmitRef, arguments);
      },
      destroyOnUnregister: true,
      initialValues: {},
      mutators: {
        setDefaultValue: function setDefaultValue(_ref, state2) {
          var _ref2 = _slicedToArray(_ref, 2), name = _ref2[0], defaultValue = _ref2[1];
          if (state2.formState.initialValues) {
            var initialValues = state2.formState.initialValues;
            var values = state2.formState.values;
            var _value = name && typeof defaultValue === "function" ? defaultValue(initialValues[name]) : defaultValue;
            (0, import_set.default)(initialValues, name, _value);
            (0, import_set.default)(values, name, _value);
          }
        }
      }
    });
    final_form_focus_es_default(function() {
      return formRef.current ? Array.from(formRef.current.querySelectorAll("input")) : [];
    }, fg("platform-form-field-error-focus") ? getFirstErrorField : void 0)(finalForm);
    return finalForm;
  }), _useState2 = _slicedToArray(_useState, 1), form = _useState2[0];
  var _useState3 = (0, import_react.useState)({
    dirty: false,
    submitting: false
  }), _useState4 = _slicedToArray(_useState3, 2), state = _useState4[0], setState = _useState4[1];
  (0, import_react.useEffect)(function() {
    var unsubscribe = form.subscribe(function(_ref3) {
      var dirty2 = _ref3.dirty, submitting2 = _ref3.submitting;
      setState({
        dirty: dirty2,
        submitting: submitting2
      });
    }, {
      dirty: true,
      submitting: true
    });
    return unsubscribe;
  }, [form]);
  var registerField2 = (0, import_react.useCallback)(function(name, defaultValue, subscriber, subscription, config) {
    form.pauseValidation();
    var unsubscribe = form.registerField(name, subscriber, subscription, config);
    form.mutators.setDefaultValue(name, defaultValue);
    form.resumeValidation();
    return unsubscribe;
  }, [form]);
  var handleSubmit = function handleSubmit2(e) {
    if (e) {
      e.preventDefault();
    }
    form.submit();
  };
  var handleReset = function handleReset2(initialValues) {
    form.reset(initialValues);
  };
  var handleKeyDown = function handleKeyDown2(e) {
    if (e.key === "Enter" && (e.ctrlKey || e.metaKey) && formRef.current) {
      var submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');
      if (submitButton) {
        submitButton.click();
      }
      e.preventDefault();
    }
  };
  var _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, children = props.children;
  var dirty = state.dirty, submitting = state.submitting;
  var getCurrentValue2 = (0, import_react.useCallback)(function(name) {
    var formState = form.getState();
    return (formState === null || formState === void 0 ? void 0 : formState.values[name]) || void 0;
  }, [form]);
  var FormContextValue = (0, import_react.useMemo)(function() {
    return {
      registerField: registerField2,
      getCurrentValue: getCurrentValue2,
      subscribe: form.subscribe
    };
  }, [registerField2, getCurrentValue2, form.subscribe]);
  var formProps = _objectSpread({
    onKeyDown: handleKeyDown,
    onSubmit: handleSubmit,
    ref: formRef
  }, testId && {
    "data-testid": testId
  });
  var childrenContent = function() {
    if (typeof children === "function") {
      var result = children.length > 0 ? children(_objectSpread({
        formProps,
        dirty,
        reset: handleReset,
        submitting,
        disabled: isDisabled,
        getState: function getState() {
          return form.getState();
        },
        getValues: function getValues() {
          return form.getState().values;
        },
        setFieldValue: form.change
      }, fg("platform-form-reset-field-state") && {
        resetFieldState: form.resetFieldState
      })) : children();
      return result === void 0 ? null : result;
    } else {
      return fg("platform_design-system-team_form-upgrade") ? import_react.default.createElement("form", _extends({}, formProps, userProvidedFormProps), children) : children;
    }
  }();
  return import_react.default.createElement(FormContext.Provider, {
    value: FormContextValue
  }, import_react.default.createElement(IsDisabledContext.Provider, {
    value: isDisabled
  }, childrenContent));
}

// node_modules/@atlaskit/form/dist/esm/form-header.js
var React2 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/form-header.compiled.css";
var FormHeader = function FormHeader2(_ref) {
  var children = _ref.children, description = _ref.description, title = _ref.title;
  return React2.createElement("div", null, title && React2.createElement(heading_partial_default, {
    size: "large"
  }, title), description && React2.createElement("div", {
    className: ax(["_1pfhu2gc"])
  }, description), children && React2.createElement("div", {
    className: ax(["_1ul91osq _1pfhu2gc"])
  }, children));
};
var form_header_default = FormHeader;

// node_modules/@atlaskit/form/dist/esm/form-footer.js
var React3 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/form-footer.compiled.css";
function FormFooter(_ref) {
  var _ref$align = _ref.align, align = _ref$align === void 0 ? "end" : _ref$align, children = _ref.children;
  return React3.createElement("footer", {
    className: ax(["_1e0c1txw _1bahesu3 _1pfh1ejb", align === "start" && "_1bah1y6m"])
  }, children);
}

// node_modules/@atlaskit/form/dist/esm/form-section.js
var React4 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/form-section.compiled.css";
var FormSectionWrapper = function FormSectionWrapper2(_ref) {
  var children = _ref.children;
  return React4.createElement("div", {
    className: ax(["_1pfh1ejb"])
  }, children);
};
var FormSectionDescription = function FormSectionDescription2(_ref2) {
  var children = _ref2.children;
  return React4.createElement("div", {
    className: ax(["_1pfhu2gc"])
  }, children);
};
var FormSection = function FormSection2(_ref3) {
  var children = _ref3.children, description = _ref3.description, title = _ref3.title;
  return React4.createElement(FormSectionWrapper, null, title && React4.createElement(heading_partial_default, {
    size: "medium"
  }, title), description && React4.createElement(FormSectionDescription, null, description), children);
};
var form_section_default = FormSection;

// node_modules/@atlaskit/form/dist/esm/field.js
init_defineProperty();
init_slicedToArray();
init_typeof();
var React7 = __toESM(require_react());
init_runtime();
var import_react3 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/field.compiled.css";

// node_modules/@atlaskit/form/dist/esm/field-id-context.js
var import_react2 = __toESM(require_react());
var FieldId = (0, import_react2.createContext)(void 0);

// node_modules/@atlaskit/form/dist/esm/label.js
var React5 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/label.compiled.css";
var Label = function Label2(_ref) {
  var children = _ref.children, htmlFor = _ref.htmlFor, id = _ref.id, testId = _ref.testId;
  return React5.createElement("label", {
    id,
    htmlFor,
    "data-testid": testId,
    className: ax(["_11c8dcr7 _1e0c1o8l _syaz1gjq _k48pmoej _6rth1b66 _1pfhze3t"])
  }, children);
};
var Legend = function Legend2(_ref2) {
  var children = _ref2.children;
  return React5.createElement("legend", {
    className: ax(["_11c8dcr7 _1e0c1o8l _syaz1gjq _k48pmoej _6rth1b66 _1pfhze3t"])
  }, children);
};

// node_modules/@atlaskit/form/dist/esm/required-asterisk.js
var React6 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/required-asterisk.compiled.css";
function RequiredAsterisk() {
  return React6.createElement("span", {
    "aria-hidden": "true",
    title: "required",
    className: ax(["_syaz1ick _ect41gqc _bozgv77o"])
  }, "*");
}

// node_modules/@atlaskit/form/dist/esm/field.js
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function isEvent(event) {
  return Boolean(event && event.target);
}
function isFunction(x) {
  return typeof x === "function";
}
function usePreviousRef(current) {
  var ref = (0, import_react3.useRef)(current);
  (0, import_react3.useEffect)(function() {
    ref.current = current;
  });
  return ref;
}
function isShallowEqual(previousValue, currentValue) {
  if (previousValue === currentValue) {
    return true;
  }
  if (typeof previousValue === "function" && typeof currentValue === "function") {
    return true;
  }
  if (Array.isArray(previousValue) && Array.isArray(currentValue)) {
    return JSON.stringify(previousValue) === JSON.stringify(currentValue);
  }
  if (_typeof(previousValue) === "object" && _typeof(currentValue) === "object") {
    return JSON.stringify(previousValue) === JSON.stringify(currentValue);
  }
  return false;
}
function Field(props) {
  var _getCurrentValue;
  var _useContext = (0, import_react3.useContext)(FormContext), registerField2 = _useContext.registerField, getCurrentValue2 = _useContext.getCurrentValue;
  var isDisabled = (0, import_react3.useContext)(IsDisabledContext) || props.isDisabled || false;
  var defaultValue = isFunction(props.defaultValue) ? props.defaultValue() : props.defaultValue;
  var latestPropsRef = usePreviousRef(props);
  var isDefaultValueChanged = !isShallowEqual(latestPropsRef.current.defaultValue, props.defaultValue);
  var _useState = (0, import_react3.useState)({
    fieldProps: {
      onChange: function onChange() {
      },
      onBlur: function onBlur() {
      },
      onFocus: function onFocus() {
      },
      /* Previously, defaultValue was being set as undefined in Field.defaultProps, which
       * effectively made it an optional prop to external consumers of Field. However the
       * prop types defined defaultValue as required, so inside the component it was not
       * valid for defaultValue to be undefined. We need to suppress the error
       * after changing defaultValue to explicitly be an optional prop.
       * If default value has changed we are using new default value.
       * Otherwise we need to check if we already have value for this field
       * (because we are using changing key prop to re-run field level validation, and that
       * cause the component re-mounting) to not override the actual value with the default value.
       */
      // @ts-ignore
      value: isDefaultValueChanged ? defaultValue : (_getCurrentValue = getCurrentValue2(props.name)) !== null && _getCurrentValue !== void 0 ? _getCurrentValue : defaultValue
    },
    error: void 0,
    valid: false,
    meta: {
      dirty: false,
      dirtySinceLastSubmit: false,
      touched: false,
      valid: false,
      validating: false,
      submitting: false,
      submitFailed: false,
      error: void 0,
      submitError: void 0
    }
  }), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var latestStateRef = usePreviousRef(state);
  (0, import_react3.useEffect)(function() {
    function fieldStateToMeta() {
      var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      return {
        dirty: value.dirty || false,
        dirtySinceLastSubmit: value.dirtySinceLastSubmit || false,
        touched: value.touched || false,
        valid: value.valid || false,
        submitting: value.submitting || false,
        submitFailed: value.submitFailed || false,
        error: value.error,
        submitError: value.submitError,
        validating: !!value.validating
      };
    }
    var unregister = registerField2(
      latestPropsRef.current.name,
      /**
       * Similar as for setting initial state value.
       * Additionally we are checking if the default value is a function,
       * it is used in checkbox fields, where fields with same name and
       * defaultIsChecked should create array of values. In this situation we can't
       * override the default value on re-registering, but also we don't need to change
       * the key prop to re-run validation.
       */
      // @ts-ignore
      isDefaultValueChanged || // @ts-ignore
      isFunction(latestPropsRef.current.defaultValue) ? latestPropsRef.current.defaultValue : latestStateRef.current.fieldProps.value,
      function(fieldState) {
        var modifiedDirtySinceLastSubmit = fieldState.submitting ? latestStateRef.current.meta.dirtySinceLastSubmit : fieldState.dirtySinceLastSubmit;
        var modifiedSubmitFailed = fieldState.submitting ? latestStateRef.current.meta.submitFailed : fieldState.submitFailed;
        var modifiedSubmitError = modifiedDirtySinceLastSubmit && latestPropsRef.current.validate ? void 0 : fieldState.submitError;
        var modifiedError = modifiedSubmitError || (fieldState.touched || fieldState.dirty) && fieldState.error;
        var modifiedValid = modifiedSubmitFailed ? modifiedError === void 0 : fieldState.valid;
        function getTransform(eventOrValue, currentValue) {
          if (latestPropsRef.current.transform) {
            return latestPropsRef.current.transform(eventOrValue, currentValue);
          }
          if (isEvent(eventOrValue)) {
            var currentTarget = eventOrValue.currentTarget;
            if (currentTarget.type === "checkbox") {
              if (currentTarget.checked) {
                return currentTarget.value || true;
              }
              return currentTarget.value ? void 0 : false;
            } else if (currentTarget) {
              return currentTarget.value;
            }
          } else {
            return eventOrValue;
          }
        }
        setState({
          fieldProps: {
            onChange: function onChange(e) {
              fieldState.change(getTransform(e, fieldState.value));
            },
            onBlur: fieldState.blur,
            onFocus: fieldState.focus,
            value: fieldState.value
          },
          error: modifiedError || void 0,
          /**
           * The following parameters are optionally typed in final-form to indicate that not all parameters need
           * to be subscribed to. We cast them as booleans (using || false), since this is what they are semantically.
           */
          valid: modifiedValid || false,
          meta: fieldStateToMeta(fieldState)
        });
      },
      {
        dirty: true,
        dirtySinceLastSubmit: true,
        touched: true,
        valid: true,
        submitting: true,
        submitFailed: true,
        value: true,
        error: true,
        submitError: true,
        validating: true
      },
      {
        getValidator: function getValidator() {
          return function validate(value, formState, fieldState) {
            var supplied = latestPropsRef.current.validate;
            if (supplied && fieldState) {
              return supplied(value, formState, fieldStateToMeta(fieldState));
            }
          };
        }
      }
    );
    return unregister;
  }, [latestPropsRef, latestStateRef, registerField2, props.name, isDefaultValueChanged]);
  var uid = useId();
  var fieldId = (0, import_react3.useMemo)(function() {
    return props.id ? props.id : "".concat(props.name, "-").concat(uid);
  }, [props.id, props.name, uid]);
  var getDescribedBy = function getDescribedBy2() {
    var value = "";
    if (state.error) {
      value += "".concat(fieldId, "-error ");
    }
    if (state.valid) {
      value += "".concat(fieldId, "-valid ");
    }
    return "".concat(value).concat(fieldId, "-helper");
  };
  var extendedFieldProps = _objectSpread2(_objectSpread2({}, state.fieldProps), {}, {
    name: props.name,
    isDisabled,
    isInvalid: Boolean(state.error),
    isRequired: Boolean(props.isRequired),
    "aria-invalid": state.error ? "true" : "false",
    "aria-describedby": getDescribedBy(),
    "aria-labelledby": "".concat(fieldId, "-label"),
    id: fieldId
  });
  return React7.createElement("div", {
    "data-testid": props.testId,
    className: ax(["_1pfhu2gc"])
  }, props.label && React7.createElement(Label, {
    htmlFor: fieldId,
    id: "".concat(fieldId, "-label"),
    testId: props.testId && "".concat(props.testId, "--label")
  }, props.label, props.isRequired && React7.createElement(RequiredAsterisk, null), props.elementAfterLabel), React7.createElement(FieldId.Provider, {
    value: fieldId
  }, props.children({
    fieldProps: extendedFieldProps,
    error: state.error,
    valid: state.valid,
    meta: state.meta
  })));
}

// node_modules/@atlaskit/form/dist/esm/checkbox-field.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
var import_react4 = __toESM(require_react());
init_esm();
var _excluded = ["children", "defaultIsChecked", "isDisabled", "isRequired", "label", "name", "value"];
var _excluded2 = ["value", "onChange"];
var _excluded3 = ["fieldProps"];
var _excluded4 = ["value", "onChange"];
var _excluded5 = ["fieldProps"];
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var CheckboxField = function CheckboxField2(_ref) {
  var children = _ref.children, _ref$defaultIsChecked = _ref.defaultIsChecked, defaultIsChecked = _ref$defaultIsChecked === void 0 ? false : _ref$defaultIsChecked, isDisabled = _ref.isDisabled, isRequired = _ref.isRequired, label = _ref.label, name = _ref.name, value = _ref.value, rest = _objectWithoutProperties(_ref, _excluded);
  var defaultValue = (0, import_react4.useCallback)(function() {
    var currentValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    return defaultIsChecked && value !== void 0 ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue;
  }, [value, defaultIsChecked]);
  return value !== void 0 ? import_react4.default.createElement(
    Field,
    _extends({}, fg("platform_design-system-team_checkbox-field-spread") ? {} : _objectSpread3({}, rest), {
      defaultValue,
      isDisabled,
      isRequired,
      label,
      name,
      transform: function transform(event, currentValue) {
        return !Array.isArray(event) && event.currentTarget.checked && currentValue ? [].concat(_toConsumableArray(currentValue), [value]) : currentValue.filter(function(v) {
          return v !== value;
        });
      }
    }),
    function(_ref2) {
      var _ref2$fieldProps = _ref2.fieldProps, fieldValue = _ref2$fieldProps.value, _onChange = _ref2$fieldProps.onChange, otherFieldProps = _objectWithoutProperties(_ref2$fieldProps, _excluded2), others = _objectWithoutProperties(_ref2, _excluded3);
      return children(_objectSpread3({
        fieldProps: _objectSpread3(_objectSpread3({}, otherFieldProps), {}, {
          // Setting to any because it's typed weirdly at the field level
          onChange: function onChange(v) {
            return _onChange(v);
          },
          isChecked: !!fieldValue.find(function(v) {
            return v === value;
          }),
          value
        })
      }, others));
    }
  ) : import_react4.default.createElement(
    Field,
    _extends({}, fg("platform_design-system-team_checkbox-field-spread") ? {} : _objectSpread3({}, rest), {
      defaultValue: defaultIsChecked,
      isDisabled,
      isRequired,
      label,
      name,
      transform: function transform(event) {
        return typeof event === "boolean" ? event : event.currentTarget.checked;
      }
    }),
    function(_ref3) {
      var _ref3$fieldProps = _ref3.fieldProps, fieldValue = _ref3$fieldProps.value, _onChange2 = _ref3$fieldProps.onChange, otherFieldProps = _objectWithoutProperties(_ref3$fieldProps, _excluded4), others = _objectWithoutProperties(_ref3, _excluded5);
      return children(_objectSpread3({
        fieldProps: _objectSpread3(_objectSpread3({}, otherFieldProps), {}, {
          // Setting to any because it's typed weirdly at the field level
          onChange: function onChange(v) {
            return _onChange2(v);
          },
          isChecked: fieldValue,
          value
        })
      }, others));
    }
  );
};
var checkbox_field_default = CheckboxField;

// node_modules/@atlaskit/form/dist/esm/range-field.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
var import_react5 = __toESM(require_react());
init_esm();
var _excluded6 = ["children", "defaultValue", "id", "isDisabled", "label", "name"];
var _excluded22 = ["isInvalid", "isRequired"];
var _excluded32 = ["fieldProps"];
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var RangeField = function RangeField2(_ref) {
  var children = _ref.children, defaultValue = _ref.defaultValue, id = _ref.id, isDisabled = _ref.isDisabled, label = _ref.label, name = _ref.name, strippedProps = _objectWithoutProperties(_ref, _excluded6);
  return import_react5.default.createElement(Field, _extends({}, fg("platform_design-system-team_range-field-spread") ? {} : strippedProps, {
    defaultValue,
    id,
    isDisabled,
    label,
    name,
    transform: Number
  }), function(_ref2) {
    var _ref2$fieldProps = _ref2.fieldProps, isInvalid = _ref2$fieldProps.isInvalid, isRequired = _ref2$fieldProps.isRequired, fieldProps = _objectWithoutProperties(_ref2$fieldProps, _excluded22), rest = _objectWithoutProperties(_ref2, _excluded32);
    return (
      // isInvalid and isRequired are specifically invalid for range inputs
      children(_objectSpread4({
        fieldProps
      }, rest))
    );
  });
};
var range_field_default = RangeField;

// node_modules/@atlaskit/form/dist/esm/messages.js
init_slicedToArray();
var React10 = __toESM(require_react());
init_runtime();
var import_react6 = __toESM(require_react());
var import_status_error_error = __toESM(require_status_error_error());
var import_status_success_editor_success = __toESM(require_status_success_editor_success());
init_esm();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/messages.compiled.css";
var messageAppearanceStyles = {
  default: "_syaz1wmz",
  error: "_syaze6sf",
  valid: "_syazy73q"
};
var iconWrapperStyles = {
  root: "_1e0c1txw _4t3i7vkz _4cvr1h6o"
};
var IconWrapper = function IconWrapper2(_ref) {
  var children = _ref.children;
  return React10.createElement("span", {
    className: ax([iconWrapperStyles.root])
  }, children);
};
var messageIcons = {
  error: React10.createElement(import_status_error_error.default, {
    LEGACY_margin: "0 -2px 0 0",
    color: "currentColor",
    LEGACY_size: "small",
    label: "error",
    size: "small"
  }),
  valid: React10.createElement(import_status_success_editor_success.default, {
    LEGACY_margin: "0 -2px 0 0",
    color: "currentColor",
    LEGACY_size: "small",
    label: "success",
    size: "small"
  })
};
var Message = function Message2(_ref2) {
  var children = _ref2.children, _ref2$appearance = _ref2.appearance, appearance = _ref2$appearance === void 0 ? "default" : _ref2$appearance, fieldId = _ref2.fieldId, testId = _ref2.testId;
  var icon = messageIcons[appearance];
  var _useContext = (0, import_react6.useContext)(MessageWrapperContext), isWrapper = _useContext.isWrapper;
  var _useState = (0, import_react6.useState)(false), _useState2 = _slicedToArray(_useState, 2), shouldRenderAfterDelay = _useState2[0], setShouldRenderAfterDelay = _useState2[1];
  var isDelayRenderEnabled = fg("platform_dst_form_screenreader_message_fix") && !isWrapper;
  (0, import_react6.useEffect)(function() {
    if (isDelayRenderEnabled) {
      var timer = setTimeout(function() {
        setShouldRenderAfterDelay(true);
      }, 10);
      return function() {
        return clearTimeout(timer);
      };
    }
  }, [isDelayRenderEnabled]);
  var content = typeof children === "string" ? children : React10.createElement("span", null, children);
  var childrenToRender = React10.createElement(import_react6.Fragment, null, icon && React10.createElement(IconWrapper, null, icon), content);
  return React10.createElement("div", {
    "data-testid": testId,
    id: fieldId,
    "aria-live": !isWrapper ? "polite" : void 0,
    className: ax(["_zulp12x7 _11c8dcr7 _1e0c1txw _1bah1q9y _1pfh1b66", messageAppearanceStyles[appearance]])
  }, isDelayRenderEnabled ? shouldRenderAfterDelay && childrenToRender : childrenToRender);
};
var HelperMessage = function HelperMessage2(_ref3) {
  var children = _ref3.children, testId = _ref3.testId;
  return React10.createElement(FieldId.Consumer, null, function(fieldId) {
    return React10.createElement(Message, {
      fieldId: fieldId ? "".concat(fieldId, "-helper") : void 0,
      testId
    }, children);
  });
};
var ErrorMessage = function ErrorMessage2(_ref4) {
  var children = _ref4.children, testId = _ref4.testId;
  return React10.createElement(FieldId.Consumer, null, function(fieldId) {
    return React10.createElement(Message, {
      appearance: "error",
      fieldId: fieldId ? "".concat(fieldId, "-error") : void 0,
      testId
    }, children);
  });
};
var ValidMessage = function ValidMessage2(_ref5) {
  var children = _ref5.children, testId = _ref5.testId;
  return React10.createElement(FieldId.Consumer, null, function(fieldId) {
    return React10.createElement(Message, {
      appearance: "valid",
      fieldId: fieldId ? "".concat(fieldId, "-valid") : void 0,
      testId
    }, children);
  });
};
var MessageWrapperContext = (0, import_react6.createContext)({
  isWrapper: false
});
var MessageWrapper = function MessageWrapper2(_ref6) {
  var children = _ref6.children;
  var contextValue = {
    isWrapper: true
  };
  return React10.createElement(MessageWrapperContext.Provider, {
    value: contextValue
  }, React10.createElement("div", {
    "aria-live": "polite",
    "data-testid": "message-wrapper"
  }, children));
};

// node_modules/@atlaskit/form/dist/esm/fieldset.js
var React11 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/form/dist/esm/fieldset.compiled.css";
var Fieldset = function Fieldset2(_ref) {
  var children = _ref.children, legend = _ref.legend;
  return React11.createElement("fieldset", {
    className: ax(["_1pfhu2gc"])
  }, legend && React11.createElement(Legend, null, legend), children);
};
var fieldset_default = Fieldset;

// node_modules/@atlaskit/form/dist/esm/use-form-state.js
init_slicedToArray();
var import_react7 = __toESM(require_react());
var defaultSubscriptionConfig = {
  values: true
};
var getSubscriptionHash = function getSubscriptionHash2(subscriptionConfig) {
  var hash = "";
  for (var key in subscriptionConfig) {
    if (subscriptionConfig.hasOwnProperty(key)) {
      hash += "".concat(key, ":").concat(subscriptionConfig[key], "|");
    }
  }
  return hash;
};
var useFormState = function useFormState2() {
  var subscriptionConfig = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSubscriptionConfig;
  var _useContext = (0, import_react7.useContext)(FormContext), subscribe2 = _useContext.subscribe;
  var _useState = (0, import_react7.useState)(), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var subscriptionConfigHash = (0, import_react7.useMemo)(function() {
    return getSubscriptionHash(subscriptionConfig);
  }, [subscriptionConfig]);
  var config = (0, import_react7.useMemo)(
    function() {
      return subscriptionConfig;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps -- intentionally controlled with a hash to have an explicit shallow comparison
    [subscriptionConfigHash]
  );
  (0, import_react7.useEffect)(function() {
    var unsubscribe = subscribe2(function(formState) {
      setState(formState);
    }, config);
    return function() {
      return unsubscribe();
    };
  }, [subscribe2, config]);
  return state;
};
export {
  checkbox_field_default as CheckboxField,
  ErrorMessage,
  Field,
  fieldset_default as Fieldset,
  FormFooter,
  form_header_default as FormHeader,
  form_section_default as FormSection,
  HelperMessage,
  Label,
  Legend,
  MessageWrapper,
  range_field_default as RangeField,
  RequiredAsterisk,
  ValidMessage,
  Form as default,
  useFormState
};
//# sourceMappingURL=@atlaskit_form.js.map
