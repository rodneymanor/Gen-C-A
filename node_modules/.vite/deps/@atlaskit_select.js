import {
  require_chevron_down
} from "./chunk-65UGL7YN.js";
import {
  Manager,
  Popper,
  Reference,
  memoizeOne,
  spinner_default,
  useNotifyOpenLayerObserver
} from "./chunk-22GL6D4K.js";
import {
  N40A,
  N80
} from "./chunk-PEEUAIZD.js";
import {
  require_react_dom
} from "./chunk-G52XTN3B.js";
import {
  IdProvider,
  base_new_exports,
  cx,
  init_base_new,
  inline_default,
  isAppleDevice,
  isSafari,
  noop,
  pressable_default,
  text_default,
  visually_hidden_default
} from "./chunk-2ARPU2R5.js";
import "./chunk-XUSVWCLU.js";
import {
  createAndFireEvent_default,
  require_prop_types,
  withAnalyticsContext_default,
  withAnalyticsEvents_default
} from "./chunk-YH6TIQ5J.js";
import "./chunk-UDLERVJY.js";
import "./chunk-6N6DGXYO.js";
import {
  require_dist
} from "./chunk-CGH4DJNJ.js";
import {
  fg,
  init_esm
} from "./chunk-XFBHX7N6.js";
import {
  _objectWithoutProperties,
  _objectWithoutPropertiesLoose,
  _slicedToArray,
  _toConsumableArray,
  init_objectWithoutProperties,
  init_objectWithoutPropertiesLoose,
  init_slicedToArray
} from "./chunk-NDV7SIT2.js";
import {
  _classCallCheck,
  _createClass,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn,
  _setPrototypeOf,
  init_classCallCheck,
  init_createClass,
  init_getPrototypeOf,
  init_inherits,
  init_possibleConstructorReturn,
  init_setPrototypeOf
} from "./chunk-KPKROJMQ.js";
import "./chunk-AAY5IJNO.js";
import {
  base_exports,
  init_base
} from "./chunk-6B65WPO5.js";
import {
  ax,
  cssCustomPropertyValue,
  init_runtime
} from "./chunk-ZNWH4LFA.js";
import {
  _defineProperty,
  _typeof,
  init_defineProperty,
  init_typeof
} from "./chunk-LBGAJG32.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/icon/core/chevron-down.js
var require_chevron_down2 = __commonJS({
  "node_modules/@atlaskit/icon/core/chevron-down.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _baseNew = _interopRequireDefault((init_base_new(), __toCommonJS(base_new_exports)));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var ChevronDownIcon = (props) => _react.default.createElement(_baseNew.default, Object.assign({
      name: "ChevronDownIcon",
      dangerouslySetGlyph: `<path fill="currentcolor" d="m14.53 6.03-6 6a.75.75 0 0 1-1.004.052l-.056-.052-6-6 1.06-1.06L8 10.44l5.47-5.47z"/>`
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    ChevronDownIcon.displayName = "ChevronDownIcon";
    var _default = exports.default = ChevronDownIcon;
  }
});

// node_modules/@atlaskit/icon/core/migration/chevron-down.js
var require_chevron_down3 = __commonJS({
  "node_modules/@atlaskit/icon/core/migration/chevron-down.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _chevronDown = _interopRequireDefault(require_chevron_down2());
    var _chevronDown2 = _interopRequireDefault(require_chevron_down());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var ChevronDownIcon = (props) => _react.default.createElement(_chevronDown.default, Object.assign({
      name: "ChevronDownIcon",
      LEGACY_fallbackIcon: _chevronDown2.default
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    ChevronDownIcon.displayName = "ChevronDownIconMigration";
    var _default = exports.default = ChevronDownIcon;
  }
});

// node_modules/@atlaskit/icon/core/cross-circle.js
var require_cross_circle = __commonJS({
  "node_modules/@atlaskit/icon/core/cross-circle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _baseNew = _interopRequireDefault((init_base_new(), __toCommonJS(base_new_exports)));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var CrossCircleIcon = (props) => _react.default.createElement(_baseNew.default, Object.assign({
      name: "CrossCircleIcon",
      dangerouslySetGlyph: `<path fill="currentcolor" fill-rule="evenodd" d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0m4.03 5.03L9.06 8l2.97 2.97-1.06 1.06L8 9.06l-2.97 2.97-1.06-1.06L6.94 8 3.97 5.03l1.06-1.06L8 6.94l2.97-2.97z" clip-rule="evenodd"/>`
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    CrossCircleIcon.displayName = "CrossCircleIcon";
    var _default = exports.default = CrossCircleIcon;
  }
});

// node_modules/@atlaskit/icon/glyph/select-clear.js
var require_select_clear = __commonJS({
  "node_modules/@atlaskit/icon/glyph/select-clear.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _base = (init_base(), __toCommonJS(base_exports));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var SelectClearIcon = (props) => _react.default.createElement(_base.Icon, Object.assign({
      dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><g fill-rule="evenodd"><circle cx="12" cy="12" r="9" fill="currentcolor"/><path fill="inherit" d="M16.155 14.493a1.174 1.174 0 1 1-1.662 1.663L12 13.662l-2.494 2.494a1.17 1.17 0 0 1-1.662 0 1.176 1.176 0 0 1 0-1.663L10.337 12 7.844 9.507a1.176 1.176 0 0 1 1.662-1.662L12 10.338l2.493-2.493a1.174 1.174 0 1 1 1.662 1.662L13.662 12z"/></g></svg>`
    }, props));
    SelectClearIcon.displayName = "SelectClearIcon";
    var _default = exports.default = SelectClearIcon;
  }
});

// node_modules/@atlaskit/icon/core/migration/cross-circle--select-clear.js
var require_cross_circle_select_clear = __commonJS({
  "node_modules/@atlaskit/icon/core/migration/cross-circle--select-clear.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _crossCircle = _interopRequireDefault(require_cross_circle());
    var _selectClear = _interopRequireDefault(require_select_clear());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var CrossCircleIcon = (props) => _react.default.createElement(_crossCircle.default, Object.assign({
      name: "CrossCircleIcon",
      LEGACY_fallbackIcon: _selectClear.default
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    CrossCircleIcon.displayName = "CrossCircleIconMigration";
    var _default = exports.default = CrossCircleIcon;
  }
});

// node_modules/@atlaskit/icon/core/cross.js
var require_cross = __commonJS({
  "node_modules/@atlaskit/icon/core/cross.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _baseNew = _interopRequireDefault((init_base_new(), __toCommonJS(base_new_exports)));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var CrossIcon3 = (props) => _react.default.createElement(_baseNew.default, Object.assign({
      name: "CrossIcon",
      dangerouslySetGlyph: `<path fill="currentcolor" d="M14.03 3.03 9.06 8l4.97 4.97-1.06 1.06L8 9.06l-4.97 4.97-1.06-1.06L6.94 8 1.97 3.03l1.06-1.06L8 6.94l4.97-4.97z"/>`
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    CrossIcon3.displayName = "CrossIcon";
    var _default = exports.default = CrossIcon3;
  }
});

// node_modules/@atlaskit/icon/glyph/checkbox.js
var require_checkbox = __commonJS({
  "node_modules/@atlaskit/icon/glyph/checkbox.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _base = (init_base(), __toCommonJS(base_exports));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var CheckboxIcon2 = (props) => _react.default.createElement(_base.Icon, Object.assign({
      dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><g fill-rule="evenodd"><rect width="12" height="12" x="6" y="6" fill="currentcolor" rx="2"/><path fill="inherit" d="M9.707 11.293a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4a1 1 0 1 0-1.414-1.414L11 12.586z"/></g></svg>`
    }, props));
    CheckboxIcon2.displayName = "CheckboxIcon";
    var _default = exports.default = CheckboxIcon2;
  }
});

// node_modules/@atlaskit/icon/glyph/radio.js
var require_radio = __commonJS({
  "node_modules/@atlaskit/icon/glyph/radio.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _base = (init_base(), __toCommonJS(base_exports));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var RadioIcon2 = (props) => _react.default.createElement(_base.Icon, Object.assign({
      dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><g fill-rule="evenodd"><circle cx="12" cy="12" r="6" fill="currentcolor"/><circle cx="12" cy="12" r="2" fill="inherit"/></g></svg>`
    }, props));
    RadioIcon2.displayName = "RadioIcon";
    var _default = exports.default = RadioIcon2;
  }
});

// node_modules/@atlaskit/icon/core/search.js
var require_search = __commonJS({
  "node_modules/@atlaskit/icon/core/search.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _baseNew = _interopRequireDefault((init_base_new(), __toCommonJS(base_new_exports)));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var SearchIcon2 = (props) => _react.default.createElement(_baseNew.default, Object.assign({
      name: "SearchIcon",
      dangerouslySetGlyph: `<path fill="currentcolor" fill-rule="evenodd" d="M7 2.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9M1 7a6 6 0 1 1 10.74 3.68l3.29 3.29-1.06 1.06-3.29-3.29A6 6 0 0 1 1 7" clip-rule="evenodd"/>`
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    SearchIcon2.displayName = "SearchIcon";
    var _default = exports.default = SearchIcon2;
  }
});

// node_modules/@atlaskit/icon/glyph/editor/search.js
var require_search2 = __commonJS({
  "node_modules/@atlaskit/icon/glyph/editor/search.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _base = (init_base(), __toCommonJS(base_exports));
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var EditorSearchIcon = (props) => _react.default.createElement(_base.Icon, Object.assign({
      dangerouslySetGlyph: `<svg width="24" height="24" viewBox="0 0 24 24" role="presentation"><path fill="currentcolor" d="M14.823 15.883a5.5 5.5 0 1 1 1.06-1.06l2.647 2.647c.293.293.53.59 0 1.06s-.767.293-1.06 0zM11.5 15.5a4 4 0 1 0 0-8 4 4 0 0 0 0 8"/></svg>`
    }, props));
    EditorSearchIcon.displayName = "EditorSearchIcon";
    var _default = exports.default = EditorSearchIcon;
  }
});

// node_modules/@atlaskit/icon/core/migration/search--editor-search.js
var require_search_editor_search = __commonJS({
  "node_modules/@atlaskit/icon/core/migration/search--editor-search.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _search = _interopRequireDefault(require_search());
    var _search2 = _interopRequireDefault(require_search2());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var SearchIcon2 = (props) => _react.default.createElement(_search.default, Object.assign({
      name: "SearchIcon",
      LEGACY_fallbackIcon: _search2.default
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props));
    SearchIcon2.displayName = "SearchIconMigration";
    var _default = exports.default = SearchIcon2;
  }
});

// node_modules/@atlaskit/react-select/dist/esm/use-state-manager.js
init_defineProperty();
init_slicedToArray();
init_objectWithoutProperties();
var import_react = __toESM(require_react());
var _excluded = ["defaultInputValue", "defaultMenuIsOpen", "defaultValue", "inputValue", "menuIsOpen", "onChange", "onInputChange", "onMenuClose", "onMenuOpen", "value"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function useStateManager(_ref2) {
  var _ref$defaultInputValu = _ref2.defaultInputValue, defaultInputValue = _ref$defaultInputValu === void 0 ? "" : _ref$defaultInputValu, _ref$defaultMenuIsOpe = _ref2.defaultMenuIsOpen, defaultMenuIsOpen = _ref$defaultMenuIsOpe === void 0 ? false : _ref$defaultMenuIsOpe, _ref$defaultValue = _ref2.defaultValue, defaultValue = _ref$defaultValue === void 0 ? null : _ref$defaultValue, propsInputValue = _ref2.inputValue, propsMenuIsOpen = _ref2.menuIsOpen, propsOnChange = _ref2.onChange, propsOnInputChange = _ref2.onInputChange, propsOnMenuClose = _ref2.onMenuClose, propsOnMenuOpen = _ref2.onMenuOpen, propsValue = _ref2.value, restSelectProps = _objectWithoutProperties(_ref2, _excluded);
  var _useState = (0, import_react.useState)(propsInputValue !== void 0 ? propsInputValue : defaultInputValue), _useState2 = _slicedToArray(_useState, 2), stateInputValue = _useState2[0], setStateInputValue = _useState2[1];
  var _useState3 = (0, import_react.useState)(propsMenuIsOpen !== void 0 ? propsMenuIsOpen : defaultMenuIsOpen), _useState4 = _slicedToArray(_useState3, 2), stateMenuIsOpen = _useState4[0], setStateMenuIsOpen = _useState4[1];
  var _useState5 = (0, import_react.useState)(propsValue !== void 0 ? propsValue : defaultValue), _useState6 = _slicedToArray(_useState5, 2), stateValue = _useState6[0], setStateValue = _useState6[1];
  var onChange2 = (0, import_react.useCallback)(function(value2, actionMeta) {
    if (typeof propsOnChange === "function") {
      propsOnChange(value2, actionMeta);
    }
    setStateValue(value2);
  }, [propsOnChange]);
  var onInputChange = (0, import_react.useCallback)(function(value2, actionMeta) {
    var newValue;
    if (typeof propsOnInputChange === "function") {
      newValue = propsOnInputChange(value2, actionMeta);
    }
    setStateInputValue(newValue !== void 0 ? newValue : value2);
  }, [propsOnInputChange]);
  var onMenuOpen = (0, import_react.useCallback)(function() {
    if (typeof propsOnMenuOpen === "function") {
      propsOnMenuOpen();
    }
    setStateMenuIsOpen(true);
  }, [propsOnMenuOpen]);
  var onMenuClose = (0, import_react.useCallback)(function() {
    if (typeof propsOnMenuClose === "function") {
      propsOnMenuClose();
    }
    setStateMenuIsOpen(false);
  }, [propsOnMenuClose]);
  var inputValue = propsInputValue !== void 0 ? propsInputValue : stateInputValue;
  var menuIsOpen = propsMenuIsOpen !== void 0 ? propsMenuIsOpen : stateMenuIsOpen;
  var value = propsValue !== void 0 ? propsValue : stateValue;
  return _objectSpread(_objectSpread({}, restSelectProps), {}, {
    inputValue,
    menuIsOpen,
    onChange: onChange2,
    onInputChange,
    onMenuClose,
    onMenuOpen,
    value
  });
}

// node_modules/@atlaskit/react-select/dist/esm/state-manager.js
init_extends();
var import_react19 = __toESM(require_react());

// node_modules/@atlaskit/react-select/dist/esm/select.js
init_extends();
init_typeof();
init_classCallCheck();
init_createClass();
init_possibleConstructorReturn();
init_getPrototypeOf();
init_inherits();
init_defineProperty();
var import_react18 = __toESM(require_react());
init_esm();

// node_modules/@atlaskit/react-select/dist/esm/builtins.js
var formatGroupLabel = function formatGroupLabel2(group) {
  return group.label;
};
var getOptionLabel = function getOptionLabel2(option) {
  return option.label;
};
var getOptionValue = function getOptionValue2(option) {
  return option.value;
};
var isOptionDisabled = function isOptionDisabled2(option) {
  return !!option.isDisabled;
};

// node_modules/@atlaskit/react-select/dist/esm/components/index.js
init_defineProperty();

// node_modules/@atlaskit/react-select/dist/esm/components/containers.js
init_extends();
var React = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/containers.compiled.css";
init_esm();

// node_modules/@atlaskit/react-select/dist/esm/utils.js
init_slicedToArray();
init_defineProperty();
init_objectWithoutProperties();
init_typeof();
var _excluded2 = ["className", "clearValue", "cx", "xcss", "getStyles", "getClassNames", "getValue", "hasValue", "isMulti", "isRtl", "options", "selectOption", "selectProps", "setValue"];
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var noop2 = function noop3() {
};
function applyPrefixToName(prefix, name) {
  if (!name) {
    return prefix;
  } else if (name[0] === "-") {
    return prefix + name;
  } else {
    return prefix + "__" + name;
  }
}
function classNames(prefix, state) {
  for (var _len = arguments.length, classNameList = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    classNameList[_key - 2] = arguments[_key];
  }
  var arr = [].concat(classNameList);
  if (state && prefix) {
    for (var key in state) {
      if (state.hasOwnProperty(key) && state[key]) {
        arr.push("".concat(applyPrefixToName(prefix, key)));
      }
    }
  }
  return arr.filter(function(i) {
    return i;
  }).map(function(i) {
    return String(i).trim();
  }).join(" ");
}
var cleanValue = function cleanValue2(value) {
  if (isArray(value)) {
    return value.filter(Boolean);
  }
  if (_typeof(value) === "object" && value !== null) {
    return [value];
  }
  return [];
};
var cleanCommonProps = function cleanCommonProps2(props) {
  var className = props.className, clearValue = props.clearValue, cx2 = props.cx, xcss = props.xcss, getStyles = props.getStyles, getClassNames = props.getClassNames, getValue = props.getValue, hasValue = props.hasValue, isMulti = props.isMulti, isRtl = props.isRtl, options2 = props.options, selectOption = props.selectOption, selectProps = props.selectProps, setValue = props.setValue, innerProps = _objectWithoutProperties(props, _excluded2);
  return _objectSpread2({}, innerProps);
};
var getStyleProps = function getStyleProps2(props, name, classNamesState) {
  var cx2 = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, className = props.className;
  return {
    css: getStyles(name, props),
    className: cx2(classNamesState !== null && classNamesState !== void 0 ? classNamesState : {}, getClassNames(name, props), className)
  };
};
function handleInputChange(inputValue, actionMeta, onInputChange) {
  if (onInputChange) {
    var newValue = onInputChange(inputValue, actionMeta);
    if (typeof newValue === "string") {
      return newValue;
    }
  }
  return inputValue;
}
function isDocumentElement(el) {
  return [document.documentElement, document.body, window].indexOf(el) > -1;
}
function normalizedHeight(el) {
  if (isDocumentElement(el)) {
    return window.innerHeight;
  }
  return el.clientHeight;
}
function getScrollTop(el) {
  if (isDocumentElement(el)) {
    return window.pageYOffset;
  }
  return el.scrollTop;
}
function scrollTo(el, top) {
  if (isDocumentElement(el)) {
    window.scrollTo(0, top);
    return;
  }
  el.scrollTop = top;
}
function getScrollParent(element) {
  var style = getComputedStyle(element);
  var excludeStaticParent = style.position === "absolute";
  var overflowRx = /(auto|scroll)/;
  if (style.position === "fixed") {
    return document.documentElement;
  }
  for (var parent = element; parent = parent.parentElement; ) {
    style = getComputedStyle(parent);
    if (excludeStaticParent && style.position === "static") {
      continue;
    }
    if (overflowRx.test(style.overflow + style.overflowY + style.overflowX)) {
      return parent;
    }
  }
  return document.documentElement;
}
function easeOutCubic(t, b, c, d) {
  return c * ((t = t / d - 1) * t * t + 1) + b;
}
function animatedScrollTo(element, to) {
  var duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 200;
  var callback = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : noop2;
  var start = getScrollTop(element);
  var change = to - start;
  var increment = 10;
  var currentTime = 0;
  function animateScroll() {
    currentTime += increment;
    var val = easeOutCubic(currentTime, start, change, duration);
    scrollTo(element, val);
    if (currentTime < duration) {
      window.requestAnimationFrame(animateScroll);
    } else {
      callback(element);
    }
  }
  animateScroll();
}
function scrollIntoView(menuEl, focusedEl) {
  var menuRect = menuEl.getBoundingClientRect();
  var focusedRect = focusedEl.getBoundingClientRect();
  var overScroll = focusedEl.offsetHeight / 3;
  if (focusedRect.bottom + overScroll > menuRect.bottom) {
    scrollTo(menuEl, Math.min(focusedEl.offsetTop + focusedEl.clientHeight - menuEl.offsetHeight + overScroll, menuEl.scrollHeight));
  } else if (focusedRect.top - overScroll < menuRect.top) {
    scrollTo(menuEl, Math.max(focusedEl.offsetTop - overScroll, 0));
  }
}
function getBoundingClientObj(element) {
  var rect = element.getBoundingClientRect();
  return {
    bottom: rect.bottom,
    height: rect.height,
    left: rect.left,
    right: rect.right,
    top: rect.top,
    width: rect.width
  };
}
function isTouchCapable() {
  try {
    document.createEvent("TouchEvent");
    return true;
  } catch (e) {
    return false;
  }
}
function isMobileDevice() {
  try {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  } catch (e) {
    return false;
  }
}
var passiveOptionAccessed = false;
var options = {
  get passive() {
    return passiveOptionAccessed = true;
  }
};
var w = typeof window !== "undefined" ? window : {};
if (w.addEventListener && w.removeEventListener) {
  w.addEventListener("p", noop2, options);
  w.removeEventListener("p", noop2, false);
}
var supportsPassiveEvents = passiveOptionAccessed;
function notNullish(item) {
  return item != null;
}
function isArray(arg) {
  return Array.isArray(arg);
}
function valueTernary(isMulti, multiValue, singleValue) {
  return isMulti ? multiValue : singleValue;
}
function singleValueAsValue(singleValue) {
  return singleValue;
}
function multiValueAsValue(multiValue) {
  return multiValue;
}
var removeProps = function removeProps2(propsObj) {
  for (var _len2 = arguments.length, properties = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    properties[_key2 - 1] = arguments[_key2];
  }
  var propsMap = Object.entries(propsObj).filter(function(_ref2) {
    var _ref22 = _slicedToArray(_ref2, 1), key = _ref22[0];
    return !properties.includes(key);
  });
  return propsMap.reduce(function(newProps, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), key = _ref4[0], val = _ref4[1];
    newProps[key] = val;
    return newProps;
  }, {});
};
var filterUnsupportedSelectors = function filterUnsupportedSelectors2(styles4) {
  var unsupportedSelectors = [
    ":",
    // pseudo-classes/elements
    "[",
    // attribute selectors
    ">",
    // child combinator
    "+",
    // adjacent sibling combinator
    "~",
    // general sibling combinator
    " ",
    // descendant combinator
    "*",
    // universal selector
    "#",
    // ID selector
    ".",
    // class selector
    "@",
    // at-rules
    "&",
    // parent selector
    "|",
    // namespace separator
    "^",
    // starts with
    "$",
    // ends with
    "="
    // equals
  ];
  return Object.keys(styles4).reduce(function(filteredStyles, key) {
    if (!unsupportedSelectors.some(function(selector) {
      return key.includes(selector);
    })) {
      filteredStyles[key] = styles4[key];
    }
    return filteredStyles;
  }, {});
};

// node_modules/@atlaskit/react-select/dist/esm/components/containers.js
var containerCSS = function containerCSS2() {
  return {};
};
var containerStyles = {
  default: "_11c82smr _kqswh2mm _lcxv1rj4",
  rtl: "_1eim1xrj",
  disabled: "_80om13gf",
  ff_safari_input_fix: "_11c81ixg _1tn22smr"
};
var SelectContainer = function SelectContainer2(props) {
  var children = props.children, innerProps = props.innerProps, isDisabled = props.isDisabled, isRtl = props.isRtl, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "container", {
    "--is-disabled": isDisabled,
    "--is-rtl": isRtl
  }), className = _getStyleProps.className, css5 = _getStyleProps.css;
  return React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([containerStyles.default, isRtl && containerStyles.rtl, isDisabled && containerStyles.disabled, fg("platform_design_system_team_safari_input_fix") && containerStyles.ff_safari_input_fix, cx(className, xcss, "-container")]),
    style: css5
  }, innerProps), children);
};
var valueContainerCSS = function valueContainerCSS2() {
  return {};
};
var valueContainerStyles = {
  default: "_16jlkb7n _1o9zkb7n _i0dlf1ug _1reo15vq _18m915vq _4cvr1h6o _1e0c11p5 _1n261g80 _8am5i4x0 _kqswh2mm _ca0qv77o _u5f312x7 _n3tdv77o _19bv12x7",
  flex: "_1e0c1txw",
  compact: "_ca0qze3t _u5f312x7 _n3tdze3t _19bv12x7"
};
var ValueContainer = function ValueContainer2(props) {
  var children = props.children, innerProps = props.innerProps, isMulti = props.isMulti, hasValue = props.hasValue, isCompact = props.isCompact, xcss = props.xcss, controlShouldRenderValue = props.selectProps.controlShouldRenderValue;
  var _getStyleProps2 = getStyleProps(props, "valueContainer", {
    "value-container": true,
    "value-container--is-multi": isMulti,
    "value-container--has-value": hasValue
  }), css5 = _getStyleProps2.css, className = _getStyleProps2.className;
  return React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([valueContainerStyles.default, isMulti && hasValue && controlShouldRenderValue && valueContainerStyles.flex, isCompact && valueContainerStyles.compact, cx(className, xcss, "-ValueContainer")]),
    style: css5
  }, innerProps), children);
};
var indicatorsContainerCSS = function indicatorsContainerCSS2() {
  return {};
};
var IndicatorsContainer = function IndicatorsContainer2(props) {
  var children = props.children, innerProps = props.innerProps, xcss = props.xcss;
  var _getStyleProps3 = getStyleProps(props, "indicatorsContainer", {
    indicators: true
  }), css5 = _getStyleProps3.css, className = _getStyleProps3.className;
  return React.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax(["_1e0c1txw _4cvr1h6o _1o9zidpf _1wpz1fhb _y4ti1b66", cx(className, xcss, "-IndicatorsContainer")])
  }, innerProps), children);
};

// node_modules/@atlaskit/react-select/dist/esm/components/control.js
init_extends();
var React2 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/control.compiled.css";
var styles = {
  default: "_12ji1r31 _1qu2glyw _12y3idpf _2rkofajl _v564r5cv _1h6d1elr _1dqonqa1 _189ee4h9 _4cvr1h6o _80om73ad _1e0c1txw _1n261g80 _1bah1yb4 _kqswh2mm _bfhk1j9a _1tke1ylp _ca0qze3t _u5f3ze3t _n3tdze3t _19bvze3t _15peftgi _1ke8ftgi _jaboglyw _1u6l1bml _4cvx1elr _123byq51 _d0altlke _irr31d5g _1ogl1caj",
  compact: "_1tkezwfg",
  invalid: "_1h6d1bqt _16qsizbr _1u6lizbr _4cvx1bqt",
  focusedInvalid: "_16qsq049",
  disabled: "_1h6dsyzs _lcxvglyw _bfhksyzs _1u6llkwx",
  focused: "_1h6d1p6i _bfhkr01l _16qsq049 _1u6lq049 _4cvx1p6i _irr3r01l",
  subtle: "_1h6d1j28 _bfhk1j28 _1u6l3sij",
  subtleFocused: "_bfhkvuon",
  none: "_1h6d1j28 _bfhk1j28 _1u6l3sij _4cvx1j28 _irr31j28"
};
var css = function css2() {
  return {};
};
var Control = function Control2(props) {
  var children = props.children, appearance = props.appearance, isCompact = props.isCompact, isDisabled = props.isDisabled, isFocused = props.isFocused, isInvalid = props.isInvalid, innerRef = props.innerRef, innerProps = props.innerProps, menuIsOpen = props.menuIsOpen, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "control", {
    control: true,
    "control--is-disabled": isDisabled,
    "control--is-focused": isFocused,
    "control--menu-is-open": menuIsOpen
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React2.createElement("div", _extends({
    ref: innerRef,
    className: ax([styles.default, isDisabled && styles.disabled, isInvalid && styles.invalid, isCompact && styles.compact, appearance === "subtle" && styles.subtle, appearance === "subtle" && isFocused && styles.subtleFocused, isFocused && styles.focused, appearance === "none" && styles.none, cx(className, xcss, "-control")]),
    style: css5
  }, innerProps, {
    "aria-disabled": isDisabled || void 0
  }), children);
};
var control_default = Control;

// node_modules/@atlaskit/react-select/dist/esm/components/group.js
init_objectWithoutProperties();
init_extends();
var React3 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/group.compiled.css";
var _excluded3 = ["data"];
var styles2 = {
  root: "_n3tdu2gc _ca0qu2gc"
};
var groupCSS = function groupCSS2() {
  return {};
};
var Group = function Group2(props) {
  var children = props.children, builtinCX = props.cx, getStyles = props.getStyles, getClassNames = props.getClassNames, Heading = props.Heading, headingProps = props.headingProps, innerProps = props.innerProps, label = props.label, selectProps = props.selectProps, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "group", {
    group: true
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React3.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5
  }, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([styles2.root, cx(className, xcss, innerProps === null || innerProps === void 0 ? void 0 : innerProps.className, "-Group")])
  }), label && React3.createElement(Heading, _extends({}, headingProps, {
    selectProps,
    getStyles,
    getClassNames,
    cx: builtinCX
  }), label), React3.createElement("div", null, children));
};
var groupHeadingCSS = function groupHeadingCSS2() {
  return {};
};
var GroupHeading = function GroupHeading2(props) {
  var xcss = props.xcss;
  var _cleanCommonProps = cleanCommonProps(props), data = _cleanCommonProps.data, innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded3);
  var _getStyleProps2 = getStyleProps(props, "groupHeading", {
    "group-heading": true
  }), css5 = _getStyleProps2.css, className = _getStyleProps2.className;
  return React3.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax(["_11c81o8v _1e0c1ule _syaz1gjq _80om73ad _k48pmoej _6rthpd1z _y4tiutpp _bozgutpp _1p1dglyw", cx(className, xcss, "-group")]),
    style: css5
  }, innerProps));
};
var group_default = Group;

// node_modules/@atlaskit/react-select/dist/esm/components/indicators.js
init_defineProperty();
init_objectWithoutProperties();
init_extends();
var React4 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/indicators.compiled.css";
var import_chevron_down = __toESM(require_chevron_down3());
var import_cross_circle_select_clear = __toESM(require_cross_circle_select_clear());
var _excluded4 = ["innerProps", "isRtl", "size", "isCompact", "xcss"];
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var iconContainerStyles = {
  root: "_kkk2n7od _12ji1r31 _1qu219ly _12y31o36 _1e0c1txw _4cvr1h6o _1bah1h6o _ca0qv77o _u5f3v77o _n3tdv77o _19bvv77o"
};
var dropdownWrapperStyles = {
  root: "_ca0q12x7 _u5f312x7 _n3td12x7 _19bv12x7"
};
var dropdownStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz1gjq _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf",
  disabled: "_syaz1lh4"
};
var dropdownIndicatorCSS = function dropdownIndicatorCSS2() {
  return {};
};
var DropdownIndicator = function DropdownIndicator2(props) {
  var innerProps = props.innerProps, children = props.children, isDisabled = props.isDisabled, isCompact = props.isCompact, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "dropdownIndicator", {
    indicator: true,
    "dropdown-indicator": true
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React4.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([dropdownStyles.default, isDisabled && dropdownStyles.disabled, isCompact && dropdownStyles.compact, cx(className, xcss, "-indicatorContainer")])
  }, innerProps), children ? children : React4.createElement(inline_default, {
    as: "span",
    xcss: dropdownWrapperStyles.root
  }, React4.createElement(import_chevron_down.default, {
    color: "currentColor",
    label: "open",
    LEGACY_margin: "var(--ds-space-negative-075, -0.375rem)",
    size: "small"
  })));
};
var clearIndicatorCSS = function clearIndicatorCSS2() {
  return {};
};
var clearIndicatorStyles = {
  default: "_v564vrg3 _1e0c1txw _syaz131l _ca0q12x7 _u5f3v77o _n3td12x7 _19bvv77o _30l31gjq",
  compact: "_ca0qidpf _n3tdidpf"
};
var ClearIndicator = function ClearIndicator2(props) {
  var innerProps = props.innerProps, _props$clearControlLa = props.clearControlLabel, clearControlLabel = _props$clearControlLa === void 0 ? "clear" : _props$clearControlLa, isCompact = props.isCompact, xcss = props.xcss;
  var _getStyleProps2 = getStyleProps(props, "clearIndicator", {
    indicator: true,
    "clear-indicator": true
  }), css5 = _getStyleProps2.css, className = _getStyleProps2.className;
  return React4.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([clearIndicatorStyles.default, isCompact && clearIndicatorStyles.compact, cx(className, xcss, "-indicatorContainer")])
  }, innerProps), React4.createElement(pressable_default, {
    xcss: iconContainerStyles.root,
    tabIndex: -1,
    "aria-label": clearControlLabel
  }, React4.createElement(import_cross_circle_select_clear.default, {
    label: "",
    color: "currentColor",
    LEGACY_size: "small",
    LEGACY_margin: "var(--ds-space-negative-025, -0.125rem)",
    size: "small"
  })));
};
var loadingIndicatorCSS = function loadingIndicatorCSS2() {
  return {};
};
var loadingIndicatorStyles = {
  default: "_ca0q12x7 _u5f3u2gc _n3td12x7 _19bvu2gc",
  compact: "_ca0qidpf _n3tdidpf"
};
var LoadingIndicator = function LoadingIndicator2(_ref2) {
  var innerProps = _ref2.innerProps, isRtl = _ref2.isRtl, _ref$size = _ref2.size, size2 = _ref$size === void 0 ? 4 : _ref$size, isCompact = _ref2.isCompact, xcss = _ref2.xcss, restProps = _objectWithoutProperties(_ref2, _excluded4);
  var _getStyleProps3 = getStyleProps(_objectSpread3(_objectSpread3({}, restProps), {}, {
    innerProps,
    isRtl,
    size: size2
  }), "loadingIndicator", {
    indicator: true,
    "loading-indicator": true
  }), css5 = _getStyleProps3.css, className = _getStyleProps3.className;
  return React4.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([loadingIndicatorStyles.default, isCompact && loadingIndicatorStyles.compact, cx(className, xcss, "-loadingIndicator")])
  }, innerProps), React4.createElement(spinner_default, {
    size: "small"
  }));
};

// node_modules/@atlaskit/react-select/dist/esm/components/input.js
init_extends();
init_objectWithoutProperties();
var React5 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/input.compiled.css";
init_esm();
var _excluded5 = ["innerRef", "isDisabled", "isHidden", "inputClassName", "testId"];
var inputCSS = function inputCSS2() {
  return {};
};
var inputStylesOld = {
  root: "_16jlkb7n _1o9zkb7n _i0dl1wug _nd5l1sux _1mouv77o _195gv77o _1rjcv77o _1e0c1n7u _yv0e12qd _syaz1fxt _j8d6idpf _1av2idpf _1doyidpf _pfztidpf _uoe3idpf _1recidpf _70xridpf _1k96idpf _eq43idpf _1h9u1kw7 _ckog1yjy _1x651r31 _1nn4glyw _1rzeidpf _1yd8yh40 _aetr11ps _uy7x15vq _1qjlqvpr",
  disabled: "_3um015vq"
};
var inputStyles = {
  root: "_16jlkb7n _1o9zkb7n _i0dl1wug _nd5l1sux _1mouv77o _195gv77o _1rjcv77o _kqswh2mm _1e0c1txw _yv0e12qd _syaz1fxt _j8d6idpf _1av2idpf _1doyidpf _pfztidpf _uoe3idpf _1recidpf _70xridpf _1k96idpf _eq43idpf _1h9u1kw7 _ckog1yjy _1x651r31 _1nn4glyw _1rzeidpf _1yd8yh40 _aetr11ps _uy7x15vq _1qjlqvpr",
  disabled: "_3um015vq"
};
var Input = function Input2(props) {
  var builtinCX = props.cx, value = props.value, xcss = props.xcss;
  var _cleanCommonProps = cleanCommonProps(props), innerRef = _cleanCommonProps.innerRef, isDisabled = _cleanCommonProps.isDisabled, isHidden = _cleanCommonProps.isHidden, inputClassName = _cleanCommonProps.inputClassName, testId = _cleanCommonProps.testId, innerProps = _objectWithoutProperties(_cleanCommonProps, _excluded5);
  var dataId = testId ? "".concat(testId, "-select--input") : null;
  var _getStyleProps = getStyleProps(props, "input", {
    "input-container": true
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  if (fg("platform_do_not_clear_input_for_multiselect")) {
    return React5.createElement("div", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      style: css5,
      className: ax([inputStyles.root, isDisabled && inputStyles.disabled, cx(className, xcss, "-Input")]),
      "data-value": value || "",
      "data-testid": dataId && "".concat(dataId, "-container")
    }, React5.createElement("input", _extends({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
      className: ax(["_19pkidpf _2hwxidpf _otyridpf _18u0idpf _ca0qidpf _u5f3idpf _n3tdidpf _19bvidpf _1r04idpf _11q7idpf _19itidpf _11c81kw7 _nd5l1yjy _12ji1r31 _1qu2glyw _12y3idpf _1bsb1osq _1ul9yh40 _kqswstnw _syaz1kw7 _tzy4kb7n", isHidden && "_tzy4idpf", builtinCX({
        input: true
      }, inputClassName, "-input")]),
      ref: innerRef,
      disabled: isDisabled,
      "data-testid": dataId
    }, innerProps)));
  }
  return React5.createElement("div", {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([inputStylesOld.root, isDisabled && inputStylesOld.disabled, cx(className, xcss, "-Input")]),
    "data-value": value || "",
    "data-testid": dataId && "".concat(dataId, "-container")
  }, React5.createElement("input", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax(["_19pkidpf _2hwxidpf _otyridpf _18u0idpf _ca0qidpf _u5f3idpf _n3tdidpf _19bvidpf _11q7idpf _19itidpf _11c81kw7 _nd5l1yjy _12ji1r31 _1qu2glyw _12y3idpf _1bsb1osq _1ul9yh40 _syaz1kw7 _tzy4kb7n", isHidden && "_tzy4idpf", builtinCX({
      input: true
    }, inputClassName, "-input")]),
    ref: innerRef,
    disabled: isDisabled,
    "data-testid": dataId
  }, innerProps)));
};
var input_default = Input;

// node_modules/@atlaskit/react-select/dist/esm/components/menu.js
init_objectWithoutProperties();
init_extends();
init_defineProperty();
init_slicedToArray();
var React6 = __toESM(require_react());
init_runtime();
var import_react8 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/menu.compiled.css";

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node2) {
  if (isNode(node2)) {
    return (node2.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node2) {
  var _node$ownerDocument;
  return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node2) {
  var _ref2;
  return (_ref2 = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref2.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
var invalidOverflowDisplayValues = /* @__PURE__ */ new Set(["inline", "contents"]);
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
var lastTraversableNodeNames = /* @__PURE__ */ new Set(["html", "body", "#document"]);
function isLastTraversableNode(node2) {
  return lastTraversableNodeNames.has(getNodeName(node2));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node2.assignedSlot || // DOM Element detected.
    node2.parentNode || // ShadowRoot detected.
    isShadowRoot(node2) && node2.host || // Fallback.
    getDocumentElement(node2)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node2) {
  const parentNode = getParentNode(node2);
  if (isLastTraversableNode(parentNode)) {
    return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node2, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css5 = getComputedStyle2(element);
  let width = parseFloat(css5.width) || 0;
  let height = parseFloat(css5.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css5 = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css5.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css5.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function rectsAreEqual(a, b) {
  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options2 = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options2,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options2);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options2;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref2) => {
      let [firstEntry] = _ref2;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}

// node_modules/@atlaskit/react-select/dist/esm/components/menu.js
var import_react_dom = __toESM(require_react_dom());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react7 = __toESM(require_react());
var index = import_react7.useLayoutEffect;

// node_modules/@atlaskit/react-select/dist/esm/components/menu.js
var _excluded6 = ["children", "innerProps", "xcss"];
var _excluded22 = ["children", "innerProps", "xcss"];
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function getMenuPlacement(_ref2) {
  var preferredMaxHeight = _ref2.maxHeight, menuEl = _ref2.menuEl, minHeight = _ref2.minHeight, preferredPlacement = _ref2.placement, shouldScroll = _ref2.shouldScroll, isFixedPosition = _ref2.isFixedPosition, controlHeight = _ref2.controlHeight;
  var scrollParent = getScrollParent(menuEl);
  var defaultState = {
    placement: "bottom",
    maxHeight: preferredMaxHeight
  };
  if (!menuEl || !menuEl.offsetParent) {
    return defaultState;
  }
  var _scrollParent$getBoun = scrollParent.getBoundingClientRect(), scrollHeight = _scrollParent$getBoun.height;
  var _menuEl$getBoundingCl = menuEl.getBoundingClientRect(), menuBottom = _menuEl$getBoundingCl.bottom, menuHeight = _menuEl$getBoundingCl.height, menuTop = _menuEl$getBoundingCl.top;
  var _menuEl$offsetParent$ = menuEl.offsetParent.getBoundingClientRect(), containerTop = _menuEl$offsetParent$.top;
  var viewHeight = isFixedPosition ? window.innerHeight : normalizedHeight(scrollParent);
  var scrollTop = getScrollTop(scrollParent);
  var menuTopFromParent = menuTop;
  var marginBottom = parseInt(getComputedStyle(menuEl).marginBottom, 10);
  var marginTop = parseInt(getComputedStyle(menuEl).marginTop, 10);
  var viewSpaceAbove = containerTop - marginTop;
  var viewSpaceBelow = viewHeight - menuTopFromParent;
  var scrollSpaceAbove = viewSpaceAbove + scrollTop;
  var scrollSpaceBelow = scrollHeight - scrollTop - menuTopFromParent;
  var scrollDown = menuBottom - viewHeight + scrollTop + marginBottom;
  var scrollUp = scrollTop + menuTop - marginTop;
  var scrollDuration = 160;
  switch (preferredPlacement) {
    case "auto":
    case "bottom":
      if (viewSpaceBelow >= menuHeight) {
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      if (scrollSpaceBelow >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      if (!isFixedPosition && scrollSpaceBelow >= minHeight || isFixedPosition && viewSpaceBelow >= minHeight) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollDown, scrollDuration);
        }
        var constrainedHeight = isFixedPosition ? viewSpaceBelow - marginBottom : scrollSpaceBelow - marginBottom;
        return {
          placement: "bottom",
          maxHeight: constrainedHeight
        };
      }
      if (preferredPlacement === "auto" || isFixedPosition) {
        var _constrainedHeight = preferredMaxHeight;
        var spaceAbove = isFixedPosition ? viewSpaceAbove : scrollSpaceAbove;
        if (spaceAbove >= minHeight) {
          _constrainedHeight = Math.min(spaceAbove - marginBottom - controlHeight, preferredMaxHeight);
        }
        return {
          placement: "top",
          maxHeight: _constrainedHeight
        };
      }
      if (preferredPlacement === "bottom") {
        if (shouldScroll) {
          scrollTo(scrollParent, scrollDown);
        }
        return {
          placement: "bottom",
          maxHeight: preferredMaxHeight
        };
      }
      break;
    case "top":
      if (viewSpaceAbove >= menuHeight) {
        return {
          placement: "top",
          maxHeight: preferredMaxHeight
        };
      }
      if (scrollSpaceAbove >= menuHeight && !isFixedPosition) {
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: "top",
          maxHeight: preferredMaxHeight
        };
      }
      if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
        var _constrainedHeight2 = preferredMaxHeight;
        if (!isFixedPosition && scrollSpaceAbove >= minHeight || isFixedPosition && viewSpaceAbove >= minHeight) {
          _constrainedHeight2 = isFixedPosition ? viewSpaceAbove - marginTop : scrollSpaceAbove - marginTop;
        }
        if (shouldScroll) {
          animatedScrollTo(scrollParent, scrollUp, scrollDuration);
        }
        return {
          placement: "top",
          maxHeight: _constrainedHeight2
        };
      }
      return {
        placement: "bottom",
        maxHeight: preferredMaxHeight
      };
    default:
      throw new Error('Invalid placement provided "'.concat(preferredPlacement, '".'));
  }
  return defaultState;
}
var coercePlacement = function coercePlacement2(p) {
  return p === "auto" ? "bottom" : p;
};
var menuStyles = {
  root: "_2rko12b0 _kqswstnw _1bsb1osq _1pbykb7n _otyru2gc _19pku2gc _bfhk1bhr _16qsd0yg",
  bottom: "_154i1osq",
  top: "_94n51osq"
};
var menuCSS = function menuCSS2() {
  return {};
};
var PortalPlacementContext = (0, import_react8.createContext)(null);
var MenuPlacer = function MenuPlacer2(props) {
  var children = props.children, minMenuHeight = props.minMenuHeight, maxMenuHeight = props.maxMenuHeight, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition, menuShouldScrollIntoView = props.menuShouldScrollIntoView;
  var _ref2 = (0, import_react8.useContext)(PortalPlacementContext) || {}, setPortalPlacement = _ref2.setPortalPlacement;
  var ref = (0, import_react8.useRef)(null);
  var _useState = (0, import_react8.useState)(maxMenuHeight), _useState2 = _slicedToArray(_useState, 2), maxHeight = _useState2[0], setMaxHeight = _useState2[1];
  var _useState3 = (0, import_react8.useState)(null), _useState4 = _slicedToArray(_useState3, 2), placement = _useState4[0], setPlacement = _useState4[1];
  var controlHeight = 38;
  index(function() {
    var menuEl = ref.current;
    if (!menuEl) {
      return;
    }
    var isFixedPosition = menuPosition === "fixed";
    var shouldScroll = menuShouldScrollIntoView && !isFixedPosition;
    var state = getMenuPlacement({
      maxHeight: maxMenuHeight,
      menuEl,
      minHeight: minMenuHeight,
      placement: menuPlacement,
      shouldScroll,
      isFixedPosition,
      controlHeight
    });
    setMaxHeight(state.maxHeight);
    setPlacement(state.placement);
    setPortalPlacement === null || setPortalPlacement === void 0 || setPortalPlacement(state.placement);
  }, [maxMenuHeight, menuPlacement, menuPosition, menuShouldScrollIntoView, minMenuHeight, setPortalPlacement, controlHeight]);
  return children({
    ref,
    placerProps: _objectSpread4(_objectSpread4({}, props), {}, {
      placement: placement || coercePlacement(menuPlacement),
      maxHeight
    })
  });
};
var Menu = function Menu2(props) {
  var children = props.children, innerRef = props.innerRef, innerProps = props.innerProps, _props$placement = props.placement, placement = _props$placement === void 0 ? "bottom" : _props$placement, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "menu", {
    menu: true
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React6.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([menuStyles.root, menuStyles[placement], cx(xcss, className, "-menu")]),
    style: css5,
    ref: innerRef
  }, innerProps), children);
};
var menu_default = Menu;
var menuListCSS = function menuListCSS2() {
  return {};
};
var MenuList = function MenuList2(props) {
  var children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, isMulti = props.isMulti, maxHeight = props.maxHeight, xcss = props.xcss;
  var _getStyleProps2 = getStyleProps(props, "menuList", {
    "menu-list": true,
    "menu-list--is-multi": isMulti
  }), css5 = _getStyleProps2.css, className = _getStyleProps2.className;
  return React6.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax(["_kqswh2mm _18m91wug _85i5u2gc _1q51u2gc _8am5i4x0", cx(className, xcss, "-MenuList")]),
    style: _objectSpread4(_objectSpread4({}, css5), {}, {
      maxHeight
    }),
    ref: innerRef
  }, innerProps, {
    tabIndex: -1
  }), children);
};
var noticeCSS = function noticeCSS2() {
  return {};
};
var noOptionsMessageCSS = noticeCSS;
var loadingMessageCSS = noticeCSS;
var NoOptionsMessage = function NoOptionsMessage2(_ref3) {
  var _ref3$children = _ref3.children, children = _ref3$children === void 0 ? "No options" : _ref3$children, innerProps = _ref3.innerProps, xcss = _ref3.xcss, restProps = _objectWithoutProperties(_ref3, _excluded6);
  var _getStyleProps3 = getStyleProps(_objectSpread4(_objectSpread4({}, restProps), {}, {
    children,
    innerProps
  }), "noOptionsMessage", {
    "menu-notice": true,
    "menu-notice--no-options": true
  }), css5 = _getStyleProps3.css, className = _getStyleProps3.className;
  return React6.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax(["_85i5u2gc _1q51u2gc _y4tiutpp _bozgutpp _y3gn1h6o", cx(className, xcss, "-NoOptionsMessage")]),
    style: css5,
    role: "option"
  }, innerProps), React6.createElement(text_default, {
    color: "color.text.subtle"
  }, children));
};
var LoadingMessage = function LoadingMessage2(_ref4) {
  var _ref4$children = _ref4.children, children = _ref4$children === void 0 ? "Loading..." : _ref4$children, innerProps = _ref4.innerProps, xcss = _ref4.xcss, restProps = _objectWithoutProperties(_ref4, _excluded22);
  var _getStyleProps4 = getStyleProps(_objectSpread4(_objectSpread4({}, restProps), {}, {
    children,
    innerProps
  }), "loadingMessage", {
    "menu-notice": true,
    "menu-notice--loading": true
  }), css5 = _getStyleProps4.css, className = _getStyleProps4.className;
  return React6.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax(["_85i5u2gc _1q51u2gc _y4tiutpp _bozgutpp _y3gn1h6o", cx(className, xcss, "-LoadingMessage")]),
    style: css5
  }, innerProps, {
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    role: "option"
  }), React6.createElement(text_default, {
    color: "color.text.subtle"
  }, children));
};
var menuPortalCSS = function menuPortalCSS2() {
  return {};
};
var menuPortalStyles = {
  root: "_1pbykb7n _1ltva1vk _kqswcp1v _154i1nmo _1bsb1qxj"
};
var MenuPortal = function MenuPortal2(props) {
  var appendTo = props.appendTo, children = props.children, controlElement = props.controlElement, innerProps = props.innerProps, menuPlacement = props.menuPlacement, menuPosition = props.menuPosition, xcss = props.xcss;
  var menuPortalRef = (0, import_react8.useRef)(null);
  var cleanupRef = (0, import_react8.useRef)(null);
  var _useState5 = (0, import_react8.useState)(coercePlacement(menuPlacement)), _useState6 = _slicedToArray(_useState5, 2), placement = _useState6[0], setPortalPlacement = _useState6[1];
  var portalPlacementContext = (0, import_react8.useMemo)(function() {
    return {
      setPortalPlacement
    };
  }, []);
  var _useState7 = (0, import_react8.useState)(null), _useState8 = _slicedToArray(_useState7, 2), computedPosition = _useState8[0], setComputedPosition = _useState8[1];
  var updateComputedPosition = (0, import_react8.useCallback)(function() {
    if (!controlElement) {
      return;
    }
    var rect = getBoundingClientObj(controlElement);
    var scrollDistance = menuPosition === "fixed" ? 0 : window.pageYOffset;
    var offset2 = rect[placement] + scrollDistance;
    if (offset2 !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset) || rect.left !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left) || rect.width !== (computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width)) {
      setComputedPosition({
        offset: offset2,
        rect
      });
    }
  }, [controlElement, menuPosition, placement, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.offset, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.left, computedPosition === null || computedPosition === void 0 ? void 0 : computedPosition.rect.width]);
  index(function() {
    updateComputedPosition();
  }, [updateComputedPosition]);
  var runAutoUpdate = (0, import_react8.useCallback)(function() {
    if (typeof cleanupRef.current === "function") {
      cleanupRef.current();
      cleanupRef.current = null;
    }
    if (controlElement && menuPortalRef.current) {
      cleanupRef.current = autoUpdate(controlElement, menuPortalRef.current, updateComputedPosition, {
        elementResize: "ResizeObserver" in window
      });
    }
  }, [controlElement, updateComputedPosition]);
  index(function() {
    runAutoUpdate();
  }, [runAutoUpdate]);
  var setMenuPortalElement = (0, import_react8.useCallback)(function(menuPortalElement) {
    menuPortalRef.current = menuPortalElement;
    runAutoUpdate();
  }, [runAutoUpdate]);
  if (!appendTo && menuPosition !== "fixed" || !computedPosition) {
    return null;
  }
  var _getStyleProps5 = getStyleProps(_objectSpread4(_objectSpread4({}, props), {}, {
    offset: computedPosition.offset,
    position: menuPosition,
    rect: computedPosition.rect
  }), "menuPortal", {
    "menu-portal": true
  }), css5 = _getStyleProps5.css, className = _getStyleProps5.className;
  var menuWrapper = React6.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([menuPortalStyles.root, cx(className, xcss, "-MenuPortal")]),
    ref: setMenuPortalElement,
    style: _objectSpread4({
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      "--menu-left": "".concat(computedPosition.rect.left, "px"),
      "--menu-position": menuPosition,
      "--menu-top": "".concat(computedPosition.offset, "px"),
      "--menu-width": "".concat(computedPosition.rect.width, "px")
    }, css5)
  }, innerProps), children);
  return React6.createElement(PortalPlacementContext.Provider, {
    value: portalPlacementContext
  }, appendTo ? (0, import_react_dom.createPortal)(menuWrapper, appendTo) : menuWrapper);
};

// node_modules/@atlaskit/react-select/dist/esm/components/multi-value.js
init_defineProperty();
init_extends();
var React7 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/multi-value.compiled.css";
var import_cross = __toESM(require_cross());
var import_select_clear = __toESM(require_select_clear());
init_esm();
function ownKeys5(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread5(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys5(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys5(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var multiValueStyles = {
  root: "_2rkolb4i _1e0c1txw _1ul9ze3t _1pfhv77o _12l2v77o _6rthv77o _ahbqv77o _bfhkm7j4 _p12f1osq _syazjpor _3yq3glyw",
  disabled: "_syaz1lh4 _bfhkm7j4",
  focused: "_syaz1wum _bfhkfg4m _16qs7ex6 _1aewe4h9 _6up51j28 _1xdnnqa1",
  refresh: "_2rko12b0 _1h6d14je _1dqonqa1 _189ee4h9 _bfhk1j9a"
};
var multiValueCSS = function multiValueCSS2() {
  return {};
};
var multiValueLabelCSS = function multiValueLabelCSS2() {
  return {};
};
var multiValueLabelStyles = {
  root: "_1reo15vq _18m915vq _2rkolb4i _11c8dcr7 _o5721q9c _1q51v77o _y4tiv77o _85i5v77o _bozg12x7 _syaz1kw7",
  disabled: "_syaz1lh4",
  ellipsis: "_1bto1l2s",
  refresh: "_11c82smr _1q51idpf _85i5idpf _bozg1b66"
};
var multiValueRemoveCSS = function multiValueRemoveCSS2() {
  return {};
};
var multiValueRemoveStyles = {
  focused: "_bfhkb1q9 _lswu1rrc",
  root: "_2rko19qg _4cvr1h6o _1e0c1txw _lswu1dx5 _bozgv77o _y4tiv77o _irr31yvi _13br1jjn _1di61io2 _i5f81jjn",
  refresh: "_19itglyw _2rko12b0 _bfhksm61 _4cvr1h6o _1bah1h6o _1wpz1h6o _r06hglyw _syaz1fxt _1q51v77o _y4tiv77o _85i5v77o _bozgv77o _12l2v77o _1ah312gs _irr3166n _1di61dty"
};
var MultiValueContainer = function MultiValueContainer2(_ref2) {
  var children = _ref2.children, innerProps = _ref2.innerProps, isFocused = _ref2.isFocused, isDisabled = _ref2.isDisabled, className = _ref2.className, xcss = _ref2.xcss;
  return React7.createElement("div", _extends({}, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([multiValueStyles.root, isDisabled && multiValueStyles.disabled, isFocused && multiValueStyles.focused, fg("platform-component-visual-refresh") && multiValueStyles.refresh, cx(className, xcss, "-multiValue")])
  }), children);
};
var MultiValueLabel = function MultiValueLabel2(_ref2) {
  var children = _ref2.children, innerProps = _ref2.innerProps, isDisabled = _ref2.isDisabled, hasEllipsis = _ref2.hasEllipsis, className = _ref2.className, xcss = _ref2.xcss;
  return React7.createElement("div", _extends({}, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([multiValueLabelStyles.root, isDisabled && multiValueLabelStyles.disabled, hasEllipsis && multiValueLabelStyles.ellipsis, fg("platform-component-visual-refresh") && multiValueLabelStyles.refresh, cx(className, xcss, "-MultiValueLabel")])
  }), children);
};
function MultiValueRemove(_ref3) {
  var isDisabled = _ref3.isDisabled, isFocused = _ref3.isFocused, innerProps = _ref3.innerProps, className = _ref3.className, xcss = _ref3.xcss;
  return React7.createElement("div", _extends({}, innerProps, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop, @atlaskit/ui-styling-standard/local-cx-xcss, @compiled/local-cx-xcss
    className: ax([multiValueRemoveStyles.root, isFocused && multiValueRemoveStyles.focused, fg("platform-component-visual-refresh") && multiValueRemoveStyles.refresh, cx(className, xcss, "-MultiValueRemove")])
  }), React7.createElement("div", {
    "data-testid": isDisabled ? "hide-clear-icon" : "show-clear-icon",
    className: ax([isDisabled && "_1e0cglyw", !isDisabled && "_1e0c1kw7"])
  }, React7.createElement(import_cross.default, {
    label: "",
    color: "currentColor",
    LEGACY_fallbackIcon: import_select_clear.default,
    LEGACY_primaryColor: "transparent",
    LEGACY_secondaryColor: "inherit",
    LEGACY_size: "small",
    size: "small"
  })));
}
var MultiValue = function MultiValue2(props) {
  var children = props.children, components2 = props.components, data = props.data, innerProps = props.innerProps, isDisabled = props.isDisabled, isFocused = props.isFocused, removeProps3 = props.removeProps, selectProps = props.selectProps, cropWithEllipsis = props.cropWithEllipsis;
  var Container = components2.Container, Label = components2.Label, Remove = components2.Remove;
  var ariaLabel = typeof children === "string" ? children : data.label;
  var _getStyleProps = getStyleProps(props, "multiValue", {
    "multi-value": true,
    "multi-value--is-disabled": isDisabled
  }), containerCss = _getStyleProps.css, containerClassName = _getStyleProps.className;
  var _getStyleProps2 = getStyleProps(props, "multiValueLabel", {
    "multi-value__label": true
  }), labelCss = _getStyleProps2.css, labelClassName = _getStyleProps2.className;
  var _getStyleProps3 = getStyleProps(props, "multiValueRemove", {
    "multi-value__remove": true
  }), removeCss = _getStyleProps3.css, removeClassName = _getStyleProps3.className;
  return React7.createElement(Container, {
    data,
    innerProps: _objectSpread5({
      style: containerCss,
      className: containerClassName
    }, innerProps),
    className: containerClassName,
    isFocused,
    isDisabled,
    selectProps
  }, React7.createElement(Label, {
    data,
    innerProps: {
      style: labelCss,
      className: labelClassName
    },
    className: labelClassName,
    hasEllipsis: cropWithEllipsis || cropWithEllipsis === void 0,
    selectProps
  }, children), React7.createElement(Remove, {
    data,
    innerProps: _objectSpread5({
      style: removeCss,
      className: removeClassName,
      role: "button",
      tabIndex: -1,
      "aria-label": "".concat(ariaLabel || "option", ", remove")
    }, removeProps3),
    className: removeClassName,
    isDisabled,
    selectProps
  }));
};
var multi_value_default = MultiValue;

// node_modules/@atlaskit/react-select/dist/esm/components/option.js
init_extends();
var React8 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/option.compiled.css";
var optionCSS = function optionCSS2() {
  return {};
};
var optionStyles = {
  root: "_1rjc12x7 _18zrutpp _syaz1fxt _80om73ad _1e0c1ule _1wyb1kw7 _1bsb1osq _uiztglyw _18ql1j7p _1di61dty",
  disabled: "_syaz1lh4 _80om13gf _bfhk1j28 _16qsglyw _1di61j28 _1pknglyw",
  focused: "_bfhk166n _16qsu4to _1pkn1vrj",
  selected: "_syazaqb7 _bfhkfg4m _16qsu4to _1di619ru _1pkn1vrj",
  focusedSelected: "_bfhki1yw"
};
var Option = function Option2(props) {
  var children = props.children, isDisabled = props.isDisabled, isFocused = props.isFocused, isSelected = props.isSelected, innerRef = props.innerRef, innerProps = props.innerProps, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "option", {
    option: true,
    "option--is-disabled": isDisabled,
    "option--is-focused": isFocused,
    "option--is-selected": isSelected
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React8.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([optionStyles.root, isFocused && optionStyles.focused, isSelected && optionStyles.selected, isFocused && isSelected && optionStyles.focusedSelected, isDisabled && optionStyles.disabled, cx(className, xcss, "-option")]),
    ref: innerRef
  }, innerProps, {
    tabIndex: -1
  }), children);
};
var option_default = Option;

// node_modules/@atlaskit/react-select/dist/esm/components/placeholder.js
init_extends();
var React9 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/placeholder.compiled.css";
var placeholderCSS = function placeholderCSS2() {
  return {};
};
var placeholderStyles = {
  root: "_nd5l1sux _19pkidpf _2hwxv77o _otyridpf _18u0v77o _syaz131l",
  disabled: "_syaz1lh4"
};
var Placeholder = function Placeholder2(props) {
  var children = props.children, innerProps = props.innerProps, isDisabled = props.isDisabled, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "placeholder", {
    placeholder: true
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React9.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([placeholderStyles.root, isDisabled && placeholderStyles.disabled, cx(className, xcss, "-placeholder")])
  }, innerProps), children);
};
var placeholder_default = Placeholder;

// node_modules/@atlaskit/react-select/dist/esm/components/single-value.js
init_extends();
var React10 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/single-value.compiled.css";
var css3 = function css4() {
  return {};
};
var styles3 = {
  root: "_nd5l1sux _1reo15vq _18m915vq _p12f1osq _1bto1l2s _o5721q9c _19pkidpf _2hwxv77o _otyridpf _18u0v77o _syaz1fxt",
  disalbed: "_syaz1lh4"
};
var SingleValue = function SingleValue2(props) {
  var children = props.children, isDisabled = props.isDisabled, innerProps = props.innerProps, xcss = props.xcss;
  var _getStyleProps = getStyleProps(props, "singleValue", {
    "single-value": true,
    "single-value--is-disabled": isDisabled
  }), css5 = _getStyleProps.css, className = _getStyleProps.className;
  return React10.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
    style: css5,
    className: ax([styles3.root, isDisabled && styles3.disalbed, cx(className, xcss, "-singleValue")])
  }, innerProps), children);
};
var single_value_default = SingleValue;

// node_modules/@atlaskit/react-select/dist/esm/components/index.js
function ownKeys6(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread6(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys6(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys6(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var components = {
  ClearIndicator,
  Control: control_default,
  DropdownIndicator,
  Group: group_default,
  GroupHeading,
  IndicatorsContainer,
  Input: input_default,
  LoadingIndicator,
  Menu: menu_default,
  MenuList,
  MenuPortal,
  LoadingMessage,
  NoOptionsMessage,
  MultiValue: multi_value_default,
  MultiValueContainer,
  MultiValueLabel,
  MultiValueRemove,
  Option: option_default,
  Placeholder: placeholder_default,
  SelectContainer,
  SingleValue: single_value_default,
  ValueContainer
};
var defaultComponents = function defaultComponents2(props) {
  return _objectSpread6(_objectSpread6({}, components), props.components);
};

// node_modules/@atlaskit/react-select/dist/esm/components/internal/a11y-text.js
init_extends();
var React11 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/internal/a11y-text.compiled.css";
var A11yText = function A11yText2(props) {
  return React11.createElement("span", _extends({
    // eslint-disable-next-line  @atlaskit/ui-styling-standard/no-classname-prop
    className: ax(["_ca0qidpf _u5f3idpf _n3tdidpf _19bvidpf _19itidpf _1reo15vq _18m915vq _1bsbt94y _4t3it94y _kqswstnw _1pbydx66 _ogto7mnp _uiztglyw _o5721q9c", "-a11yText"])
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};
var a11y_text_default = A11yText;

// node_modules/@atlaskit/react-select/dist/esm/components/internal/dummy-input.js
init_extends();
init_objectWithoutProperties();
var React12 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/internal/dummy-input.compiled.css";
var _excluded7 = ["innerRef"];
function DummyInput(_ref2) {
  var innerRef = _ref2.innerRef, props = _objectWithoutProperties(_ref2, _excluded7);
  var filteredProps = removeProps(props, "onExited", "in", "enter", "exit", "appear");
  return React12.createElement("input", _extends({
    ref: innerRef,
    className: ax(["_ca0qidpf _u5f3idpf _n3tdidpf _19bvidpf _11q7idpf _19itidpf _nd5l1sux _12ji1r31 _1qu2glyw _12y3idpf _1bsbt94y _kqswh2mm _1n5d1j28 _syaz1j28 _1e02p1rm _tzy4idpf _t9ec1kuz", "-dummyInput"])
  }, filteredProps));
}

// node_modules/@atlaskit/react-select/dist/esm/components/internal/scroll-manager.js
var import_react16 = __toESM(require_react());

// node_modules/@atlaskit/react-select/dist/esm/components/internal/use-scroll-capture.js
var import_react14 = __toESM(require_react());
var cancelScroll = function cancelScroll2(event) {
  if (event.cancelable) {
    event.preventDefault();
  }
  event.stopPropagation();
};
function useScrollCapture(_ref2) {
  var isEnabled = _ref2.isEnabled, onBottomArrive = _ref2.onBottomArrive, onBottomLeave = _ref2.onBottomLeave, onTopArrive = _ref2.onTopArrive, onTopLeave = _ref2.onTopLeave;
  var isBottom = (0, import_react14.useRef)(false);
  var isTop = (0, import_react14.useRef)(false);
  var touchStart = (0, import_react14.useRef)(0);
  var scrollTarget = (0, import_react14.useRef)(null);
  var handleEventDelta = (0, import_react14.useCallback)(function(event, delta) {
    if (scrollTarget.current === null) {
      return;
    }
    var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, clientHeight = _scrollTarget$current.clientHeight;
    var target = scrollTarget.current;
    var isDeltaPositive = delta > 0;
    var availableScroll = scrollHeight - clientHeight - scrollTop;
    var shouldCancelScroll = false;
    if (availableScroll > delta && isBottom.current) {
      if (onBottomLeave) {
        onBottomLeave(event);
      }
      isBottom.current = false;
    }
    if (isDeltaPositive && isTop.current) {
      if (onTopLeave) {
        onTopLeave(event);
      }
      isTop.current = false;
    }
    if (isDeltaPositive && delta > availableScroll) {
      if (onBottomArrive && !isBottom.current) {
        onBottomArrive(event);
      }
      target.scrollTop = scrollHeight;
      shouldCancelScroll = true;
      isBottom.current = true;
    } else if (!isDeltaPositive && -delta > scrollTop) {
      if (onTopArrive && !isTop.current) {
        onTopArrive(event);
      }
      target.scrollTop = 0;
      shouldCancelScroll = true;
      isTop.current = true;
    }
    if (shouldCancelScroll) {
      cancelScroll(event);
    }
  }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]);
  var onWheel = (0, import_react14.useCallback)(function(event) {
    handleEventDelta(event, event.deltaY);
  }, [handleEventDelta]);
  var onTouchStart = (0, import_react14.useCallback)(function(event) {
    touchStart.current = event.changedTouches[0].clientY;
  }, []);
  var onTouchMove = (0, import_react14.useCallback)(function(event) {
    var deltaY = touchStart.current - event.changedTouches[0].clientY;
    handleEventDelta(event, deltaY);
  }, [handleEventDelta]);
  var startListening = (0, import_react14.useCallback)(function(el) {
    if (!el) {
      return;
    }
    var notPassive = supportsPassiveEvents ? {
      passive: false
    } : false;
    el.addEventListener("wheel", onWheel, notPassive);
    el.addEventListener("touchstart", onTouchStart, notPassive);
    el.addEventListener("touchmove", onTouchMove, notPassive);
  }, [onTouchMove, onTouchStart, onWheel]);
  var stopListening = (0, import_react14.useCallback)(function(el) {
    if (!el) {
      return;
    }
    el.removeEventListener("wheel", onWheel, false);
    el.removeEventListener("touchstart", onTouchStart, false);
    el.removeEventListener("touchmove", onTouchMove, false);
  }, [onTouchMove, onTouchStart, onWheel]);
  (0, import_react14.useEffect)(function() {
    if (!isEnabled) {
      return;
    }
    var element = scrollTarget.current;
    startListening(element);
    return function() {
      stopListening(element);
    };
  }, [isEnabled, startListening, stopListening]);
  return function(element) {
    scrollTarget.current = element;
  };
}

// node_modules/@atlaskit/react-select/dist/esm/components/internal/use-scroll-lock.js
var import_react15 = __toESM(require_react());
var STYLE_KEYS = ["boxSizing", "height", "overflow", "paddingRight", "position"];
var LOCK_STYLES = {
  boxSizing: "border-box",
  // account for possible declaration `width: 100%;` on body
  overflow: "hidden",
  position: "relative",
  height: "100%"
};
function preventTouchMove(e) {
  e.preventDefault();
}
function allowTouchMove(e) {
  e.stopPropagation();
}
function preventInertiaScroll() {
  var top = this.scrollTop;
  var totalScroll = this.scrollHeight;
  var currentScroll = top + this.offsetHeight;
  if (top === 0) {
    this.scrollTop = 1;
  } else if (currentScroll === totalScroll) {
    this.scrollTop = top - 1;
  }
}
function isTouchDevice() {
  return "ontouchstart" in window || navigator.maxTouchPoints;
}
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var activeScrollLocks = 0;
var listenerOptions = {
  capture: false,
  passive: false
};
function useScrollLock(_ref2) {
  var isEnabled = _ref2.isEnabled, _ref$accountForScroll = _ref2.accountForScrollbars, accountForScrollbars = _ref$accountForScroll === void 0 ? true : _ref$accountForScroll;
  var originalStyles = (0, import_react15.useRef)({});
  var scrollTarget = (0, import_react15.useRef)(null);
  var addScrollLock = (0, import_react15.useCallback)(function(touchScrollTarget) {
    if (!canUseDOM) {
      return;
    }
    var target = document.body;
    var targetStyle = target && target.style;
    if (accountForScrollbars) {
      STYLE_KEYS.forEach(function(key) {
        var val = targetStyle && targetStyle[key];
        originalStyles.current[key] = val;
      });
    }
    if (accountForScrollbars && activeScrollLocks < 1) {
      var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
      var clientWidth = document.body ? document.body.clientWidth : 0;
      var adjustedPadding = window.innerWidth - clientWidth + currentPadding || 0;
      Object.keys(LOCK_STYLES).forEach(function(key) {
        var val = LOCK_STYLES[key];
        if (targetStyle) {
          targetStyle[key] = val;
        }
      });
      if (targetStyle) {
        targetStyle.paddingRight = "".concat(adjustedPadding, "px");
      }
    }
    if (target && isTouchDevice()) {
      target.addEventListener("touchmove", preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.addEventListener("touchstart", preventInertiaScroll, listenerOptions);
        touchScrollTarget.addEventListener("touchmove", allowTouchMove, listenerOptions);
      }
    }
    activeScrollLocks += 1;
  }, [accountForScrollbars]);
  var removeScrollLock = (0, import_react15.useCallback)(function(touchScrollTarget) {
    if (!canUseDOM) {
      return;
    }
    var target = document.body;
    var targetStyle = target && target.style;
    activeScrollLocks = Math.max(activeScrollLocks - 1, 0);
    if (accountForScrollbars && activeScrollLocks < 1) {
      STYLE_KEYS.forEach(function(key) {
        var val = originalStyles.current[key];
        if (targetStyle) {
          targetStyle[key] = val;
        }
      });
    }
    if (target && isTouchDevice()) {
      target.removeEventListener("touchmove", preventTouchMove, listenerOptions);
      if (touchScrollTarget) {
        touchScrollTarget.removeEventListener("touchstart", preventInertiaScroll, listenerOptions);
        touchScrollTarget.removeEventListener("touchmove", allowTouchMove, listenerOptions);
      }
    }
  }, [accountForScrollbars]);
  (0, import_react15.useEffect)(function() {
    if (!isEnabled) {
      return;
    }
    var element = scrollTarget.current;
    addScrollLock(element);
    return function() {
      removeScrollLock(element);
    };
  }, [isEnabled, addScrollLock, removeScrollLock]);
  return function(element) {
    scrollTarget.current = element;
  };
}

// node_modules/@atlaskit/react-select/dist/esm/components/internal/scroll-manager.js
var blurSelectInput = function blurSelectInput2(event) {
  var element = event.target;
  return element.ownerDocument.activeElement && element.ownerDocument.activeElement.blur();
};
function ScrollManager(_ref2) {
  var children = _ref2.children, lockEnabled = _ref2.lockEnabled, _ref$captureEnabled = _ref2.captureEnabled, captureEnabled = _ref$captureEnabled === void 0 ? true : _ref$captureEnabled, onBottomArrive = _ref2.onBottomArrive, onBottomLeave = _ref2.onBottomLeave, onTopArrive = _ref2.onTopArrive, onTopLeave = _ref2.onTopLeave;
  var setScrollCaptureTarget = useScrollCapture({
    isEnabled: captureEnabled,
    onBottomArrive,
    onBottomLeave,
    onTopArrive,
    onTopLeave
  });
  var setScrollLockTarget = useScrollLock({
    isEnabled: lockEnabled
  });
  var targetRef = function targetRef2(element) {
    setScrollCaptureTarget(element);
    setScrollLockTarget(element);
  };
  return import_react16.default.createElement(import_react16.Fragment, null, lockEnabled && // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions, @atlassian/a11y/interactive-element-not-keyboard-focusable
  import_react16.default.createElement("div", {
    onClick: blurSelectInput,
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      position: "fixed",
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      insetBlockEnd: 0,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      insetBlockStart: 0,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      insetInlineEnd: 0,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop
      insetInlineStart: 0
    }
  }), children(targetRef));
}

// node_modules/@atlaskit/react-select/dist/esm/components/internal/required-input.js
var React14 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/react-select/dist/esm/components/internal/required-input.compiled.css";
var RequiredInput = function RequiredInput2(_ref2) {
  var name = _ref2.name, onFocus3 = _ref2.onFocus;
  return React14.createElement("input", {
    required: true,
    name,
    tabIndex: -1,
    "aria-hidden": "true",
    className: ax(["_1bsb1osq _kqswstnw _u7coidpf _rjxpidpf _1e02idpf _tzy4idpf _lcxvglyw", "-requiredInput"]),
    onFocus: onFocus3,
    // Prevent `Switching from uncontrolled to controlled` error
    value: "",
    onChange: noop
  });
};
var required_input_default = RequiredInput;

// node_modules/@atlaskit/react-select/dist/esm/components/internal/notify-open-layer-observer.js
function NotifyOpenLayerObserver(_ref2) {
  var isOpen = _ref2.isOpen, onClose = _ref2.onClose;
  useNotifyOpenLayerObserver({
    isOpen,
    onClose
  });
  return null;
}

// node_modules/@atlaskit/react-select/dist/esm/components/live-region.js
init_defineProperty();
var import_react17 = __toESM(require_react());

// node_modules/@atlaskit/react-select/dist/esm/accessibility/index.js
var defaultAriaLiveMessages = {
  onChange: function onChange(props) {
    var action = props.action, _props$label = props.label, label = _props$label === void 0 ? "" : _props$label, isDisabled = props.isDisabled;
    switch (action) {
      case "deselect-option":
      case "pop-value":
      case "remove-value":
        return label.length ? "option ".concat(label, ", deselected") : "";
      case "clear":
        return "All selected options have been cleared.";
      case "select-option":
        return label.length && !isDisabled ? "option ".concat(label, ", selected.") : "";
      default:
        return "";
    }
  },
  onFilter: function onFilter(props) {
    var inputValue = props.inputValue, resultsMessage = props.resultsMessage;
    return inputValue ? "".concat(resultsMessage, " for search term ").concat(inputValue, ".") : "";
  }
};

// node_modules/@atlaskit/react-select/dist/esm/components/live-region.js
function ownKeys7(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread7(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys7(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys7(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var LiveRegion = function LiveRegion2(props) {
  var ariaSelection = props.ariaSelection, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id = props.id;
  var ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel7 = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isOptionDisabled3 = selectProps.isOptionDisabled, menuIsOpen = selectProps.menuIsOpen, options2 = selectProps.options, screenReaderStatus2 = selectProps.screenReaderStatus, isLoading = selectProps.isLoading;
  var ariaLive = selectProps["aria-live"];
  var messages = (0, import_react17.useMemo)(function() {
    return _objectSpread7(_objectSpread7({}, defaultAriaLiveMessages), ariaLiveMessages || {});
  }, [ariaLiveMessages]);
  var ariaSelected = (0, import_react17.useMemo)(function() {
    var message = "";
    if (menuIsOpen) {
      return "";
    }
    if (ariaSelection && messages.onChange) {
      var option = ariaSelection.option, selectedOptions = ariaSelection.options, removedValue = ariaSelection.removedValue, removedValues = ariaSelection.removedValues, value = ariaSelection.value;
      var asOption = function asOption2(val) {
        return !Array.isArray(val) ? val : null;
      };
      var selected = removedValue || option || asOption(value);
      var label = selected ? getOptionLabel7(selected) : "";
      var multiSelected = selectedOptions || removedValues || void 0;
      var labels = multiSelected ? multiSelected.map(getOptionLabel7) : [];
      if (!label && !labels.length) {
        return "";
      }
      var onChangeProps = _objectSpread7({
        // multiSelected items are usually items that have already been selected
        // or set by the user as a default value so we assume they are not disabled
        isDisabled: selected && isOptionDisabled3(selected, selectValue),
        label,
        labels
      }, ariaSelection);
      message = messages.onChange(onChangeProps);
    }
    return message;
  }, [ariaSelection, messages, isOptionDisabled3, selectValue, getOptionLabel7, menuIsOpen]);
  var ariaResults = (0, import_react17.useMemo)(function() {
    var resultsMsg = "";
    if (isLoading) {
      resultsMsg = "Loading. ";
    }
    if (menuIsOpen && options2.length && !isLoading && messages.onFilter) {
      var resultsMessage = screenReaderStatus2({
        count: focusableOptions.length
      });
      resultsMsg = messages.onFilter({
        inputValue,
        resultsMessage
      });
    }
    if (options2 && options2.length === 0) {
      resultsMsg = "No options. ";
    }
    return resultsMsg;
  }, [focusableOptions, inputValue, menuIsOpen, messages, options2, screenReaderStatus2, isLoading]);
  var isInitialFocus = (ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus";
  var ScreenReaderText = import_react17.default.createElement(import_react17.Fragment, null, import_react17.default.createElement("span", {
    id: "aria-selection"
  }, ariaSelected), import_react17.default.createElement("span", {
    id: "aria-results"
  }, ariaResults));
  return import_react17.default.createElement(import_react17.Fragment, null, import_react17.default.createElement(a11y_text_default, {
    id
  }, isInitialFocus && ScreenReaderText), import_react17.default.createElement(a11y_text_default, {
    "aria-live": ariaLive,
    role: "status"
  }, isFocused && !isInitialFocus && ScreenReaderText));
};
var live_region_default = LiveRegion;

// node_modules/@atlaskit/react-select/dist/esm/filters.js
init_defineProperty();

// node_modules/@atlaskit/react-select/dist/esm/diacritics.js
var diacritics = [{
  base: "A",
  letters: "AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"
}, {
  base: "AA",
  letters: "Ꜳ"
}, {
  base: "AE",
  letters: "ÆǼǢ"
}, {
  base: "AO",
  letters: "Ꜵ"
}, {
  base: "AU",
  letters: "Ꜷ"
}, {
  base: "AV",
  letters: "ꜸꜺ"
}, {
  base: "AY",
  letters: "Ꜽ"
}, {
  base: "B",
  letters: "BⒷＢḂḄḆɃƂƁ"
}, {
  base: "C",
  letters: "CⒸＣĆĈĊČÇḈƇȻꜾ"
}, {
  base: "D",
  letters: "DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"
}, {
  base: "DZ",
  letters: "ǱǄ"
}, {
  base: "Dz",
  letters: "ǲǅ"
}, {
  base: "E",
  letters: "EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"
}, {
  base: "F",
  letters: "FⒻＦḞƑꝻ"
}, {
  base: "G",
  letters: "GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"
}, {
  base: "H",
  letters: "HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"
}, {
  base: "I",
  letters: "IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"
}, {
  base: "J",
  letters: "JⒿＪĴɈ"
}, {
  base: "K",
  letters: "KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"
}, {
  base: "L",
  letters: "LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"
}, {
  base: "LJ",
  letters: "Ǉ"
}, {
  base: "Lj",
  letters: "ǈ"
}, {
  base: "M",
  letters: "MⓂＭḾṀṂⱮƜ"
}, {
  base: "N",
  letters: "NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"
}, {
  base: "NJ",
  letters: "Ǌ"
}, {
  base: "Nj",
  letters: "ǋ"
}, {
  base: "O",
  letters: "OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"
}, {
  base: "OI",
  letters: "Ƣ"
}, {
  base: "OO",
  letters: "Ꝏ"
}, {
  base: "OU",
  letters: "Ȣ"
}, {
  base: "P",
  letters: "PⓅＰṔṖƤⱣꝐꝒꝔ"
}, {
  base: "Q",
  letters: "QⓆＱꝖꝘɊ"
}, {
  base: "R",
  letters: "RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"
}, {
  base: "S",
  letters: "SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"
}, {
  base: "T",
  letters: "TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"
}, {
  base: "TZ",
  letters: "Ꜩ"
}, {
  base: "U",
  letters: "UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"
}, {
  base: "V",
  letters: "VⓋＶṼṾƲꝞɅ"
}, {
  base: "VY",
  letters: "Ꝡ"
}, {
  base: "W",
  letters: "WⓌＷẀẂŴẆẄẈⱲ"
}, {
  base: "X",
  letters: "XⓍＸẊẌ"
}, {
  base: "Y",
  letters: "YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"
}, {
  base: "Z",
  letters: "ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"
}, {
  base: "a",
  letters: "aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"
}, {
  base: "aa",
  letters: "ꜳ"
}, {
  base: "ae",
  letters: "æǽǣ"
}, {
  base: "ao",
  letters: "ꜵ"
}, {
  base: "au",
  letters: "ꜷ"
}, {
  base: "av",
  letters: "ꜹꜻ"
}, {
  base: "ay",
  letters: "ꜽ"
}, {
  base: "b",
  letters: "bⓑｂḃḅḇƀƃɓ"
}, {
  base: "c",
  letters: "cⓒｃćĉċčçḉƈȼꜿↄ"
}, {
  base: "d",
  letters: "dⓓｄḋďḍḑḓḏđƌɖɗꝺ"
}, {
  base: "dz",
  letters: "ǳǆ"
}, {
  base: "e",
  letters: "eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"
}, {
  base: "f",
  letters: "fⓕｆḟƒꝼ"
}, {
  base: "g",
  letters: "gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"
}, {
  base: "h",
  letters: "hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"
}, {
  base: "hv",
  letters: "ƕ"
}, {
  base: "i",
  letters: "iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"
}, {
  base: "j",
  letters: "jⓙｊĵǰɉ"
}, {
  base: "k",
  letters: "kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"
}, {
  base: "l",
  letters: "lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"
}, {
  base: "lj",
  letters: "ǉ"
}, {
  base: "m",
  letters: "mⓜｍḿṁṃɱɯ"
}, {
  base: "n",
  letters: "nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"
}, {
  base: "nj",
  letters: "ǌ"
}, {
  base: "o",
  letters: "oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"
}, {
  base: "oi",
  letters: "ƣ"
}, {
  base: "ou",
  letters: "ȣ"
}, {
  base: "oo",
  letters: "ꝏ"
}, {
  base: "p",
  letters: "pⓟｐṕṗƥᵽꝑꝓꝕ"
}, {
  base: "q",
  letters: "qⓠｑɋꝗꝙ"
}, {
  base: "r",
  letters: "rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"
}, {
  base: "s",
  letters: "sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"
}, {
  base: "t",
  letters: "tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"
}, {
  base: "tz",
  letters: "ꜩ"
}, {
  base: "u",
  letters: "uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"
}, {
  base: "v",
  letters: "vⓥｖṽṿʋꝟʌ"
}, {
  base: "vy",
  letters: "ꝡ"
}, {
  base: "w",
  letters: "wⓦｗẁẃŵẇẅẘẉⱳ"
}, {
  base: "x",
  letters: "xⓧｘẋẍ"
}, {
  base: "y",
  letters: "yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"
}, {
  base: "z",
  letters: "zⓩｚźẑżžẓẕƶȥɀⱬꝣ"
}];
var anyDiacritic = new RegExp("[" + diacritics.map(function(d) {
  return d.letters;
}).join("") + "]", "g");
var diacriticToBase = {};
for (i = 0; i < diacritics.length; i++) {
  diacritic = diacritics[i];
  for (j = 0; j < diacritic.letters.length; j++) {
    diacriticToBase[diacritic.letters[j]] = diacritic.base;
  }
}
var diacritic;
var j;
var i;
var stripDiacritics = function stripDiacritics2(str) {
  return str.replace(anyDiacritic, function(match) {
    return diacriticToBase[match];
  });
};

// node_modules/@atlaskit/react-select/dist/esm/filters.js
function ownKeys8(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread8(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys8(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys8(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var memoizedStripDiacriticsForInput = memoizeOne(stripDiacritics);
var trimString = function trimString2(str) {
  return str.replace(/^\s+|\s+$/g, "");
};
var defaultStringify = function defaultStringify2(option) {
  return "".concat(option.label, " ").concat(option.value);
};
var createFilter = function createFilter2(config) {
  return function(option, rawInput) {
    if (option.data.__isNew__) {
      return true;
    }
    var _ignoreCase$ignoreAcc = _objectSpread8({
      ignoreCase: true,
      ignoreAccents: true,
      stringify: defaultStringify,
      trim: true,
      matchFrom: "any"
    }, config), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify = _ignoreCase$ignoreAcc.stringify, trim = _ignoreCase$ignoreAcc.trim, matchFrom = _ignoreCase$ignoreAcc.matchFrom;
    var input = trim ? trimString(rawInput) : rawInput;
    var candidate = trim ? trimString(stringify(option)) : stringify(option);
    if (ignoreCase) {
      input = input.toLowerCase();
      candidate = candidate.toLowerCase();
    }
    if (ignoreAccents) {
      input = memoizedStripDiacriticsForInput(input);
      candidate = stripDiacritics(candidate);
    }
    return matchFrom === "start" ? candidate.substr(0, input.length) === input : candidate.indexOf(input) > -1;
  };
};

// node_modules/@atlaskit/react-select/dist/esm/styles.js
init_defineProperty();
function ownKeys9(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread9(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys9(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys9(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var defaultStyles = {
  clearIndicator: clearIndicatorCSS,
  container: containerCSS,
  control: css,
  dropdownIndicator: dropdownIndicatorCSS,
  group: groupCSS,
  groupHeading: groupHeadingCSS,
  indicatorsContainer: indicatorsContainerCSS,
  input: inputCSS,
  loadingIndicator: loadingIndicatorCSS,
  loadingMessage: loadingMessageCSS,
  menu: menuCSS,
  menuList: menuListCSS,
  menuPortal: menuPortalCSS,
  multiValue: multiValueCSS,
  multiValueLabel: multiValueLabelCSS,
  multiValueRemove: multiValueRemoveCSS,
  noOptionsMessage: noOptionsMessageCSS,
  option: optionCSS,
  placeholder: placeholderCSS,
  singleValue: css3,
  valueContainer: valueContainerCSS
};
function mergeStyles(source) {
  var target = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var styles4 = _objectSpread9({}, source);
  Object.keys(target).forEach(function(keyAsString) {
    var key = keyAsString;
    if (source[key]) {
      styles4[key] = function(rsCss, props) {
        return target[key](source[key](rsCss, props), props);
      };
    } else {
      styles4[key] = target[key];
    }
  });
  return styles4;
}

// node_modules/@atlaskit/react-select/dist/esm/select.js
function ownKeys10(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread10(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys10(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys10(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct3() {
    return !!t;
  })();
}
var defaultProps = {
  backspaceRemovesValue: true,
  blurInputOnSelect: isTouchCapable(),
  captureMenuScroll: !isTouchCapable(),
  classNames: {},
  closeMenuOnSelect: true,
  closeMenuOnScroll: false,
  components: {},
  controlShouldRenderValue: true,
  escapeClearsValue: false,
  filterOption: createFilter(),
  formatGroupLabel,
  getOptionLabel,
  getOptionValue,
  isDisabled: false,
  isLoading: false,
  isMulti: false,
  isRtl: false,
  isSearchable: true,
  isOptionDisabled,
  loadingMessage: function loadingMessage() {
    return "Loading...";
  },
  maxMenuHeight: 300,
  minMenuHeight: 140,
  menuIsOpen: false,
  menuPlacement: "bottom",
  menuPosition: "absolute",
  menuShouldBlockScroll: false,
  menuShouldScrollIntoView: !isMobileDevice(),
  noOptionsMessage: function noOptionsMessage() {
    return "No options";
  },
  openMenuOnFocus: false,
  openMenuOnClick: true,
  shouldPreventEscapePropagation: false,
  options: [],
  pageSize: 5,
  placeholder: "Select...",
  screenReaderStatus: function screenReaderStatus(_ref2) {
    var count = _ref2.count;
    return "".concat(count, " result").concat(count !== 1 ? "s" : "", " available");
  },
  styles: {},
  tabIndex: 0,
  tabSelectsValue: true,
  UNSAFE_is_experimental_generic: false
};
function toCategorizedOption(props, option, selectValue, index2) {
  var isDisabled = _isOptionDisabled(props, option, selectValue);
  var isSelected = _isOptionSelected(props, option, selectValue);
  var label = getOptionLabel3(props, option);
  var value = getOptionValue3(props, option);
  return {
    type: "option",
    data: option,
    isDisabled,
    isSelected,
    label,
    value,
    index: index2
  };
}
function buildCategorizedOptions(props, selectValue) {
  return props.options.map(function(groupOrOption, groupOrOptionIndex) {
    if ("options" in groupOrOption) {
      var categorizedOptions = groupOrOption.options.map(function(option, optionIndex) {
        return toCategorizedOption(props, option, selectValue, optionIndex);
      }).filter(function(categorizedOption2) {
        return isFocusable(props, categorizedOption2);
      });
      return categorizedOptions.length > 0 ? {
        type: "group",
        data: groupOrOption,
        options: categorizedOptions,
        index: groupOrOptionIndex
      } : void 0;
    }
    var categorizedOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
    return isFocusable(props, categorizedOption) ? categorizedOption : void 0;
  }).filter(notNullish);
}
function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
  return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === "group") {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return option.data;
      })));
    } else {
      optionsAccumulator.push(categorizedOption.data);
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptionsWithIds(categorizedOptions, optionId) {
  return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
    if (categorizedOption.type === "group") {
      optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return {
          data: option.data,
          id: "".concat(optionId, "-").concat(categorizedOption.index, "-").concat(option.index)
        };
      })));
    } else {
      optionsAccumulator.push({
        data: categorizedOption.data,
        id: "".concat(optionId, "-").concat(categorizedOption.index)
      });
    }
    return optionsAccumulator;
  }, []);
}
function buildFocusableOptions(props, selectValue) {
  return buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue));
}
function isFocusable(props, categorizedOption) {
  var _props$inputValue = props.inputValue, inputValue = _props$inputValue === void 0 ? "" : _props$inputValue;
  var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label, value = categorizedOption.value;
  return (!shouldHideSelectedOptions(props) || !isSelected) && _filterOption(props, {
    label,
    value,
    data
  }, inputValue);
}
function getNextFocusedValue(state, nextSelectValue) {
  var focusedValue = state.focusedValue, lastSelectValue = state.selectValue;
  var lastFocusedIndex = lastSelectValue.indexOf(focusedValue);
  if (lastFocusedIndex > -1) {
    var nextFocusedIndex = nextSelectValue.indexOf(focusedValue);
    if (nextFocusedIndex > -1) {
      return focusedValue;
    } else if (lastFocusedIndex < nextSelectValue.length) {
      return nextSelectValue[lastFocusedIndex];
    }
  }
  return null;
}
function getNextFocusedOption(state, options2) {
  var lastFocusedOption = state.focusedOption;
  return lastFocusedOption && options2.indexOf(lastFocusedOption) > -1 ? lastFocusedOption : options2[0];
}
var getFocusedOptionId = function getFocusedOptionId2(focusableOptionsWithIds, focusedOption) {
  var _focusableOptionsWith;
  var focusedOptionId = (_focusableOptionsWith = focusableOptionsWithIds.find(function(option) {
    return option.data === focusedOption;
  })) === null || _focusableOptionsWith === void 0 ? void 0 : _focusableOptionsWith.id;
  return focusedOptionId || null;
};
var getOptionLabel3 = function getOptionLabel4(props, data) {
  return props.getOptionLabel(data);
};
var getOptionValue3 = function getOptionValue4(props, data) {
  return props.getOptionValue(data);
};
function _isOptionDisabled(props, option, selectValue) {
  return typeof props.isOptionDisabled === "function" ? props.isOptionDisabled(option, selectValue) : false;
}
function _isOptionSelected(props, option, selectValue) {
  if (selectValue.indexOf(option) > -1) {
    return true;
  }
  if (typeof props.isOptionSelected === "function") {
    return props.isOptionSelected(option, selectValue);
  }
  var candidate = getOptionValue3(props, option);
  return selectValue.some(function(i) {
    return getOptionValue3(props, i) === candidate;
  });
}
function _filterOption(props, option, inputValue) {
  return props.filterOption ? props.filterOption(option, inputValue) : true;
}
var shouldHideSelectedOptions = function shouldHideSelectedOptions2(props) {
  var hideSelectedOptions = props.hideSelectedOptions, isMulti = props.isMulti;
  if (hideSelectedOptions === void 0) {
    return isMulti;
  }
  return hideSelectedOptions;
};
var instanceId = 1;
var Select = function(_Component) {
  function Select3(_props) {
    var _this;
    _classCallCheck(this, Select3);
    _this = _callSuper(this, Select3, [_props]);
    _defineProperty(_this, "state", {
      ariaSelection: null,
      focusedOption: null,
      focusedOptionId: null,
      focusableOptionsWithIds: [],
      focusedValue: null,
      focusedValueId: null,
      inputIsHidden: false,
      isFocused: false,
      selectValue: [],
      clearFocusValueOnUpdate: false,
      prevWasFocused: false,
      inputIsHiddenAfterUpdate: void 0,
      prevProps: void 0,
      instancePrefix: ""
    });
    _defineProperty(_this, "blockOptionHover", false);
    _defineProperty(_this, "isComposing", false);
    _defineProperty(_this, "initialTouchX", 0);
    _defineProperty(_this, "initialTouchY", 0);
    _defineProperty(_this, "openAfterFocus", false);
    _defineProperty(_this, "scrollToFocusedOptionOnUpdate", false);
    _defineProperty(_this, "controlRef", null);
    _defineProperty(_this, "getControlRef", function(ref) {
      _this.controlRef = ref;
    });
    _defineProperty(_this, "focusedOptionRef", null);
    _defineProperty(_this, "getFocusedOptionRef", function(ref) {
      _this.focusedOptionRef = ref;
    });
    _defineProperty(_this, "menuListRef", null);
    _defineProperty(_this, "getMenuListRef", function(ref) {
      _this.menuListRef = ref;
    });
    _defineProperty(_this, "inputRef", null);
    _defineProperty(_this, "getInputRef", function(ref) {
      _this.inputRef = ref;
    });
    _defineProperty(_this, "focus", _this.focusInput);
    _defineProperty(_this, "blur", _this.blurInput);
    _defineProperty(_this, "onChange", function(newValue, actionMeta) {
      var _this$props = _this.props, onChange2 = _this$props.onChange, name = _this$props.name;
      actionMeta.name = name;
      _this.ariaOnChange(newValue, actionMeta);
      onChange2(newValue, actionMeta);
    });
    _defineProperty(_this, "setValue", function(newValue, action, option) {
      var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti, inputValue = _this$props2.inputValue;
      if (isMulti && fg("platform_do_not_clear_input_for_multiselect")) {
        _this.onInputChange(inputValue, {
          action: "set-value",
          prevInputValue: inputValue
        });
      } else {
        _this.onInputChange("", {
          action: "set-value",
          prevInputValue: inputValue
        });
      }
      if (closeMenuOnSelect) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      }
      _this.setState({
        clearFocusValueOnUpdate: true
      });
      _this.onChange(newValue, {
        action,
        option
      });
    });
    _defineProperty(_this, "selectOption", function(newValue) {
      var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti, name = _this$props3.name;
      var selectValue = _this.state.selectValue;
      var deselected = isMulti && _this.isOptionSelected(newValue, selectValue);
      var isDisabled = _this.isOptionDisabled(newValue, selectValue);
      if (deselected) {
        var candidate = _this.getOptionValue(newValue);
        _this.setValue(multiValueAsValue(selectValue.filter(function(i) {
          return _this.getOptionValue(i) !== candidate;
        })), "deselect-option", newValue);
      } else if (!isDisabled) {
        if (isMulti) {
          _this.setValue(multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])), "select-option", newValue);
        } else {
          _this.setValue(singleValueAsValue(newValue), "select-option");
        }
      } else {
        _this.ariaOnChange(singleValueAsValue(newValue), {
          action: "select-option",
          option: newValue,
          name
        });
        return;
      }
      if (blurInputOnSelect) {
        _this.blurInput();
      }
    });
    _defineProperty(_this, "removeValue", function(removedValue) {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var candidate = _this.getOptionValue(removedValue);
      var newValueArray = selectValue.filter(function(i) {
        return _this.getOptionValue(i) !== candidate;
      });
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: "remove-value",
        removedValue
      });
      _this.focusInput();
    });
    _defineProperty(_this, "clearValue", function() {
      var selectValue = _this.state.selectValue;
      _this.onChange(valueTernary(_this.props.isMulti, [], null), {
        action: "clear",
        removedValues: selectValue
      });
    });
    _defineProperty(_this, "popValue", function() {
      var isMulti = _this.props.isMulti;
      var selectValue = _this.state.selectValue;
      var lastSelectedValue = selectValue[selectValue.length - 1];
      var newValueArray = selectValue.slice(0, selectValue.length - 1);
      var newValue = valueTernary(isMulti, newValueArray, newValueArray[0] || null);
      _this.onChange(newValue, {
        action: "pop-value",
        removedValue: lastSelectedValue
      });
    });
    _defineProperty(_this, "getFocusedOptionId", function(focusedOption) {
      return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption);
    });
    _defineProperty(_this, "getFocusableOptionsWithIds", function() {
      return buildFocusableOptionsWithIds(buildCategorizedOptions(_this.props, _this.state.selectValue), _this.getElementId("option"));
    });
    _defineProperty(_this, "getValue", function() {
      return _this.state.selectValue;
    });
    _defineProperty(_this, "cx", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return classNames.apply(void 0, [_this.props.classNamePrefix].concat(args));
    });
    _defineProperty(_this, "getOptionLabel", function(data) {
      return getOptionLabel3(_this.props, data);
    });
    _defineProperty(_this, "getOptionValue", function(data) {
      return getOptionValue3(_this.props, data);
    });
    _defineProperty(_this, "getStyles", function(key, props) {
      var base = defaultStyles[key](props);
      base.boxSizing = "border-box";
      var custom = _this.props.styles[key];
      if (!custom) {
        return base;
      }
      var customStyles = filterUnsupportedSelectors(custom(base, props));
      return customStyles;
    });
    _defineProperty(_this, "getClassNames", function(key, props) {
      var _this$props$className, _this$props$className2;
      return (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) === null || _this$props$className === void 0 ? void 0 : _this$props$className.call(_this$props$className2, props);
    });
    _defineProperty(_this, "getElementId", function(element) {
      return "".concat(_this.state.instancePrefix, "-").concat(element);
    });
    _defineProperty(_this, "getComponents", function() {
      return defaultComponents(_this.props);
    });
    _defineProperty(_this, "buildCategorizedOptions", function() {
      return buildCategorizedOptions(_this.props, _this.state.selectValue);
    });
    _defineProperty(_this, "getCategorizedOptions", function() {
      return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
    });
    _defineProperty(_this, "buildFocusableOptions", function() {
      return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
    });
    _defineProperty(_this, "getFocusableOptions", function() {
      return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
    });
    _defineProperty(_this, "ariaOnChange", function(value, actionMeta) {
      _this.setState({
        ariaSelection: _objectSpread10({
          value
        }, actionMeta)
      });
    });
    _defineProperty(_this, "onMenuMouseDown", function(event) {
      if (event.button !== 0) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      _this.focusInput();
    });
    _defineProperty(_this, "onMenuMouseMove", function(event) {
      _this.blockOptionHover = false;
    });
    _defineProperty(_this, "onControlMouseDown", function(event) {
      if (event.defaultPrevented) {
        var _this$controlRef;
        if (!((_this$controlRef = _this.controlRef) !== null && _this$controlRef !== void 0 && _this$controlRef.closest("[data-rbd-draggable-context-id]"))) {
          return;
        }
      }
      var openMenuOnClick = _this.props.openMenuOnClick;
      if (!_this.state.isFocused) {
        if (openMenuOnClick) {
          _this.openAfterFocus = true;
        }
        _this.focusInput();
      } else if (!_this.props.menuIsOpen) {
        if (openMenuOnClick) {
          _this.openMenu("first");
        }
      } else {
        if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
          _this.onMenuClose();
        }
      }
      if (event.target.tagName !== "INPUT" && event.target.tagName !== "TEXTAREA") {
        event.preventDefault();
      }
    });
    _defineProperty(_this, "onDropdownIndicatorMouseDown", function(event) {
      if (event && event.type === "mousedown" && event.button !== 0) {
        return;
      }
      if (_this.props.isDisabled) {
        return;
      }
      var _this$props4 = _this.props, isMulti = _this$props4.isMulti, menuIsOpen = _this$props4.menuIsOpen;
      _this.focusInput();
      if (menuIsOpen) {
        _this.setState({
          inputIsHiddenAfterUpdate: !isMulti
        });
        _this.onMenuClose();
      } else {
        _this.openMenu("first");
      }
      event.preventDefault();
    });
    _defineProperty(_this, "onClearIndicatorMouseDown", function(event) {
      if (event && event.type === "mousedown" && event.button !== 0) {
        return;
      }
      _this.clearValue();
      event.preventDefault();
      _this.openAfterFocus = false;
      if (event.type === "touchend") {
        _this.focusInput();
      } else {
        setTimeout(function() {
          return _this.focusInput();
        });
      }
    });
    _defineProperty(_this, "onScroll", function(event) {
      if (typeof _this.props.closeMenuOnScroll === "boolean") {
        if (event.target instanceof HTMLElement && isDocumentElement(event.target)) {
          _this.props.onMenuClose();
        }
      } else if (typeof _this.props.closeMenuOnScroll === "function") {
        if (_this.props.closeMenuOnScroll(event)) {
          _this.props.onMenuClose();
        }
      }
    });
    _defineProperty(_this, "onCompositionStart", function() {
      _this.isComposing = true;
    });
    _defineProperty(_this, "onCompositionEnd", function() {
      _this.isComposing = false;
    });
    _defineProperty(_this, "onTouchStart", function(_ref2) {
      var touches = _ref2.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      _this.initialTouchX = touch.clientX;
      _this.initialTouchY = touch.clientY;
      _this.userIsDragging = false;
    });
    _defineProperty(_this, "onTouchMove", function(_ref3) {
      var touches = _ref3.touches;
      var touch = touches && touches.item(0);
      if (!touch) {
        return;
      }
      var deltaX = Math.abs(touch.clientX - _this.initialTouchX);
      var deltaY = Math.abs(touch.clientY - _this.initialTouchY);
      var moveThreshold = 5;
      _this.userIsDragging = deltaX > moveThreshold || deltaY > moveThreshold;
    });
    _defineProperty(_this, "onTouchEnd", function(event) {
      if (_this.userIsDragging) {
        return;
      }
      if (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target)) {
        _this.blurInput();
      }
      _this.initialTouchX = 0;
      _this.initialTouchY = 0;
    });
    _defineProperty(_this, "onControlTouchEnd", function(event) {
      if (_this.userIsDragging) {
        return;
      }
      _this.onControlMouseDown(event);
    });
    _defineProperty(_this, "onClearIndicatorTouchEnd", function(event) {
      if (_this.userIsDragging) {
        return;
      }
      _this.onClearIndicatorMouseDown(event);
    });
    _defineProperty(_this, "onDropdownIndicatorTouchEnd", function(event) {
      if (_this.userIsDragging) {
        return;
      }
      _this.onDropdownIndicatorMouseDown(event);
    });
    _defineProperty(_this, "handleInputChange", function(event) {
      var prevInputValue = _this.props.inputValue;
      var inputValue = event.currentTarget.value;
      _this.setState({
        inputIsHiddenAfterUpdate: false
      });
      _this.onInputChange(inputValue, {
        action: "input-change",
        prevInputValue
      });
      if (!_this.props.menuIsOpen) {
        _this.onMenuOpen();
      }
    });
    _defineProperty(_this, "onInputFocus", function(event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
      _this.setState({
        inputIsHiddenAfterUpdate: false,
        isFocused: true
      });
      if (_this.openAfterFocus || _this.props.openMenuOnFocus) {
        _this.openMenu("first");
      }
      _this.openAfterFocus = false;
    });
    _defineProperty(_this, "onInputBlur", function(event) {
      var prevInputValue = _this.props.inputValue;
      if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
        _this.inputRef.focus();
        return;
      }
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
      _this.onInputChange("", {
        action: "input-blur",
        prevInputValue
      });
      if (fg("platform_dst_select_menu_close_on_blur")) {
        _this.props.menuIsOpen && _this.onMenuClose();
      } else {
        _this.onMenuClose();
      }
      _this.setState({
        focusedValue: null,
        isFocused: false
      });
    });
    _defineProperty(_this, "onOptionHover", function(focusedOption) {
      if (_this.blockOptionHover || _this.state.focusedOption === focusedOption) {
        return;
      }
      var options2 = _this.getFocusableOptions();
      var focusedOptionIndex = options2.indexOf(focusedOption);
      _this.setState({
        focusedOption,
        focusedOptionId: focusedOptionIndex > -1 ? _this.getFocusedOptionId(focusedOption) : null
      });
    });
    _defineProperty(_this, "shouldHideSelectedOptions", function() {
      return shouldHideSelectedOptions(_this.props);
    });
    _defineProperty(_this, "onValueInputFocus", function(e) {
      e.preventDefault();
      e.stopPropagation();
      _this.focus();
    });
    _defineProperty(_this, "onKeyDown", function(event) {
      var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, isDisabled = _this$props5.isDisabled, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus, shouldPreventEscapePropagation = _this$props5.shouldPreventEscapePropagation;
      var _this$state = _this.state, focusedOption = _this$state.focusedOption, focusedValue = _this$state.focusedValue, selectValue = _this$state.selectValue;
      if (isDisabled) {
        return;
      }
      if (typeof onKeyDown === "function") {
        onKeyDown(event);
        if (event.defaultPrevented) {
          return;
        }
      }
      _this.blockOptionHover = true;
      switch (event.key) {
        case "ArrowLeft":
          if (!isMulti || inputValue) {
            return;
          }
          _this.focusValue("previous");
          break;
        case "ArrowRight":
          if (!isMulti || inputValue) {
            return;
          }
          _this.focusValue("next");
          break;
        case "Delete":
        case "Backspace":
          if (inputValue) {
            return;
          }
          if (focusedValue) {
            _this.removeValue(focusedValue);
          } else {
            if (!backspaceRemovesValue) {
              return;
            }
            if (isMulti) {
              _this.popValue();
            } else if (isClearable) {
              _this.clearValue();
            }
          }
          break;
        case "Tab":
          if (_this.isComposing) {
            return;
          }
          if (event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || // don't capture the event if the menu opens on focus and the focused
          // option is already selected; it breaks the flow of navigation
          openMenuOnFocus && _this.isOptionSelected(focusedOption, selectValue)) {
            return;
          }
          _this.selectOption(focusedOption);
          break;
        case "Enter":
          if (event.keyCode === 229) {
            break;
          }
          if (focusedValue) {
            _this.removeValue(focusedValue);
          }
          if (menuIsOpen) {
            if (!focusedOption) {
              return;
            }
            if (_this.isComposing) {
              return;
            }
            _this.selectOption(focusedOption);
            break;
          }
          return;
        case "Escape":
          if (menuIsOpen) {
            _this.setState({
              inputIsHiddenAfterUpdate: false
            });
            _this.onInputChange("", {
              action: "menu-close",
              prevInputValue: inputValue
            });
            _this.onMenuClose();
            if (shouldPreventEscapePropagation && event.target instanceof HTMLElement) {
              event.stopPropagation();
            }
          } else if (isClearable && escapeClearsValue) {
            _this.clearValue();
          }
          break;
        case " ":
          if (inputValue) {
            return;
          }
          if (!menuIsOpen) {
            _this.openMenu("first");
            break;
          }
          if (!focusedOption) {
            return;
          }
          _this.selectOption(focusedOption);
          break;
        case "ArrowUp":
          if (menuIsOpen) {
            _this.focusOption("up");
          } else {
            _this.openMenu("last");
          }
          break;
        case "ArrowDown":
          if (menuIsOpen) {
            _this.focusOption("down");
          } else {
            _this.openMenu("first");
          }
          break;
        case "PageUp":
          if (!menuIsOpen) {
            return;
          }
          _this.focusOption("pageup");
          break;
        case "PageDown":
          if (!menuIsOpen) {
            return;
          }
          _this.focusOption("pagedown");
          break;
        case "Home":
          if (!menuIsOpen) {
            return;
          }
          _this.focusOption("first");
          break;
        case "End":
          if (!menuIsOpen) {
            return;
          }
          _this.focusOption("last");
          break;
        default:
          return;
      }
      event.preventDefault();
    });
    _defineProperty(_this, "handleOpenLayerObserverCloseSignal", function() {
      _this.onMenuClose();
    });
    _this.state.instancePrefix = "react-select-" + (_this.props.instanceId || ++instanceId);
    _this.state.selectValue = cleanValue(_props.value);
    if (_props.menuIsOpen) {
      var focusableOptionsWithIds = _this.getFocusableOptionsWithIds();
      var focusableOptions = _this.buildFocusableOptions();
      var optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
      _this.state.focusableOptionsWithIds = focusableOptionsWithIds;
      _this.state.focusedOption = focusableOptions[optionIndex];
      _this.state.focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusableOptions[optionIndex]);
    }
    return _this;
  }
  _inherits(Select3, _Component);
  return _createClass(Select3, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.startListeningComposition();
      this.startListeningToTouch();
      if (this.props.closeMenuOnScroll && document && document.addEventListener) {
        document.addEventListener("scroll", this.onScroll, true);
      }
      if (this.props.autoFocus) {
        this.focusInput();
      }
      if (this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props6 = this.props, isDisabled = _this$props6.isDisabled, menuIsOpen = _this$props6.menuIsOpen;
      var isFocused = this.state.isFocused;
      if (
        // ensure focus is restored correctly when the control becomes enabled
        isFocused && !isDisabled && prevProps.isDisabled || // ensure focus is on the Input when the menu opens
        isFocused && menuIsOpen && !prevProps.menuIsOpen
      ) {
        this.focusInput();
      }
      if (isFocused && isDisabled && !prevProps.isDisabled) {
        this.setState({
          isFocused: false
        }, this.onMenuClose);
      } else if (!isFocused && !isDisabled && prevProps.isDisabled && this.inputRef === document.activeElement) {
        this.setState({
          isFocused: true
        });
      }
      if (this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate) {
        scrollIntoView(this.menuListRef, this.focusedOptionRef);
        this.scrollToFocusedOptionOnUpdate = false;
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.stopListeningComposition();
      this.stopListeningToTouch();
      document.removeEventListener("scroll", this.onScroll, true);
    }
    // ==============================
    // Consumer Handlers
    // ==============================
  }, {
    key: "onMenuOpen",
    value: function onMenuOpen() {
      this.props.onMenuOpen();
    }
  }, {
    key: "onMenuClose",
    value: function onMenuClose() {
      this.onInputChange("", {
        action: "menu-close",
        prevInputValue: this.props.inputValue
      });
      this.props.onMenuClose();
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(newValue, actionMeta) {
      this.props.onInputChange(newValue, actionMeta);
    }
    // ==============================
    // Methods
    // ==============================
  }, {
    key: "focusInput",
    value: function focusInput() {
      if (!this.inputRef) {
        return;
      }
      this.inputRef.focus();
    }
  }, {
    key: "blurInput",
    value: function blurInput() {
      if (!this.inputRef) {
        return;
      }
      this.inputRef.blur();
    }
  }, {
    key: "openMenu",
    value: function openMenu(focusOption) {
      var _this2 = this;
      var _this$state2 = this.state, selectValue = _this$state2.selectValue, isFocused = _this$state2.isFocused;
      var focusableOptions = this.buildFocusableOptions();
      var openAtIndex = focusOption === "first" ? 0 : focusableOptions.length - 1;
      if (!this.props.isMulti) {
        var selectedIndex = focusableOptions.indexOf(selectValue[0]);
        if (selectedIndex > -1) {
          openAtIndex = selectedIndex;
        }
      }
      var focusedOption = focusableOptions[openAtIndex];
      this.scrollToFocusedOptionOnUpdate = !(isFocused && this.menuListRef);
      this.setState({
        inputIsHiddenAfterUpdate: false,
        focusedValue: null,
        focusedOption,
        focusedOptionId: this.getFocusedOptionId(focusedOption)
      }, function() {
        return _this2.onMenuOpen();
      });
      isSafari() && focusedOption && this.updateInputLabel(this.calculateInputLabel(focusedOption, openAtIndex));
    }
  }, {
    key: "updateInputLabel",
    value: function updateInputLabel(inputLabel) {
      var _this3 = this;
      if (inputLabel) {
        var _this$inputRef;
        (_this$inputRef = this.inputRef) === null || _this$inputRef === void 0 || _this$inputRef.setAttribute("aria-label", inputLabel);
        setTimeout(function() {
          var normalizedLabel = _this3.props["aria-label"] || _this3.props.label;
          if (normalizedLabel) {
            var _this3$inputRef;
            (_this3$inputRef = _this3.inputRef) === null || _this3$inputRef === void 0 || _this3$inputRef.setAttribute("aria-label", normalizedLabel);
          } else {
            var _this3$inputRef2;
            (_this3$inputRef2 = _this3.inputRef) === null || _this3$inputRef2 === void 0 || _this3$inputRef2.removeAttribute("aria-label");
          }
        }, 500);
      }
    }
  }, {
    key: "calculateInputLabel",
    value: function calculateInputLabel(focusedOption, optionIndex) {
      var _this4 = this;
      var options2 = this.props.options;
      var isOptionsGrouped3 = options2 === null || options2 === void 0 ? void 0 : options2.every(function(obj) {
        return _typeof(obj) === "object" && obj !== null && "options" in obj;
      });
      var inputLabel = this.getOptionLabel(focusedOption);
      var isOptionFocused = function isOptionFocused2(option) {
        return _this4.getOptionLabel(option) === inputLabel;
      };
      var groupData = options2 === null || options2 === void 0 ? void 0 : options2.find(function(option) {
        var _groupCandidate$optio, _groupCandidate$optio2;
        var groupCandidate = option;
        return (_groupCandidate$optio = (_groupCandidate$optio2 = groupCandidate.options) === null || _groupCandidate$optio2 === void 0 ? void 0 : _groupCandidate$optio2.some(isOptionFocused)) !== null && _groupCandidate$optio !== void 0 ? _groupCandidate$optio : false;
      });
      if (isOptionsGrouped3) {
        var _groupData$options$fi;
        var groupOptionIndex = (_groupData$options$fi = groupData === null || groupData === void 0 ? void 0 : groupData.options.findIndex(isOptionFocused)) !== null && _groupData$options$fi !== void 0 ? _groupData$options$fi : 0;
        var totalLength = options2 === null || options2 === void 0 ? void 0 : options2.reduce(function(acc, currentGroup) {
          var _group$options;
          var group = currentGroup;
          acc += group === null || group === void 0 || (_group$options = group.options) === null || _group$options === void 0 ? void 0 : _group$options.length;
          return acc;
        }, 0);
        inputLabel = "".concat(inputLabel, ", ").concat(groupData === null || groupData === void 0 ? void 0 : groupData.label, " (").concat(groupOptionIndex + 1, " of ").concat(totalLength, ")");
      } else {
        inputLabel = "".concat(inputLabel, " (").concat(optionIndex + 1, " of ").concat(options2 === null || options2 === void 0 ? void 0 : options2.length, ")");
      }
      return inputLabel;
    }
  }, {
    key: "focusValue",
    value: function focusValue(direction) {
      var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;
      if (!this.props.isMulti) {
        return;
      }
      this.setState({
        focusedOption: null
      });
      var focusedIndex = selectValue.indexOf(focusedValue);
      if (!focusedValue) {
        focusedIndex = -1;
      }
      var lastIndex = selectValue.length - 1;
      var nextFocus = -1;
      if (!selectValue.length) {
        return;
      }
      switch (direction) {
        case "previous":
          if (focusedIndex === 0) {
            nextFocus = 0;
          } else if (focusedIndex === -1) {
            nextFocus = lastIndex;
          } else {
            nextFocus = focusedIndex - 1;
          }
          break;
        case "next":
          if (focusedIndex > -1 && focusedIndex < lastIndex) {
            nextFocus = focusedIndex + 1;
          }
          break;
      }
      this.setState({
        inputIsHidden: nextFocus !== -1,
        focusedValue: selectValue[nextFocus],
        focusedValueId: "".concat(this.getElementId("selected-value"), "-").concat(nextFocus, "-remove"),
        focusedOption: null,
        focusedOptionId: null
      });
    }
  }, {
    key: "focusOption",
    value: function focusOption() {
      var direction = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "first";
      var pageSize = this.props.pageSize;
      var focusedOption = this.state.focusedOption;
      var options2 = this.getFocusableOptions();
      if (!options2.length) {
        return;
      }
      var nextFocus = 0;
      var focusedIndex = options2.indexOf(focusedOption);
      if (!focusedOption) {
        focusedIndex = -1;
      }
      if (direction === "up") {
        nextFocus = focusedIndex > 0 ? focusedIndex - 1 : options2.length - 1;
      } else if (direction === "down") {
        nextFocus = (focusedIndex + 1) % options2.length;
      } else if (direction === "pageup") {
        nextFocus = focusedIndex - pageSize;
        if (nextFocus < 0) {
          nextFocus = 0;
        }
      } else if (direction === "pagedown") {
        nextFocus = focusedIndex + pageSize;
        if (nextFocus > options2.length - 1) {
          nextFocus = options2.length - 1;
        }
      } else if (direction === "last") {
        nextFocus = options2.length - 1;
      }
      this.scrollToFocusedOptionOnUpdate = true;
      this.setState({
        focusedOption: options2[nextFocus],
        focusedValue: null,
        focusedValueId: null,
        focusedOptionId: this.getFocusedOptionId(options2[nextFocus])
      });
    }
  }, {
    key: "getCommonProps",
    value: function getCommonProps() {
      var clearValue = this.clearValue, cx2 = this.cx, getStyles = this.getStyles, getClassNames = this.getClassNames, getValue = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props;
      var isMulti = props.isMulti, isRtl = props.isRtl, options2 = props.options;
      var hasValue = this.hasValue();
      return {
        clearValue,
        cx: cx2,
        getStyles,
        getClassNames,
        getValue,
        hasValue,
        isMulti,
        isRtl,
        options: options2,
        selectOption,
        selectProps: props,
        setValue
      };
    }
  }, {
    key: "hasValue",
    value: function hasValue() {
      var selectValue = this.state.selectValue;
      return selectValue.length > 0;
    }
  }, {
    key: "hasOptions",
    value: function hasOptions() {
      return !!this.getFocusableOptions().length;
    }
  }, {
    key: "isClearable",
    value: function isClearable() {
      var _this$props7 = this.props, isClearable2 = _this$props7.isClearable, isMulti = _this$props7.isMulti;
      if (isClearable2 === void 0) {
        return isMulti;
      }
      return isClearable2;
    }
  }, {
    key: "isOptionDisabled",
    value: function isOptionDisabled3(option, selectValue) {
      return _isOptionDisabled(this.props, option, selectValue);
    }
  }, {
    key: "isOptionSelected",
    value: function isOptionSelected(option, selectValue) {
      return _isOptionSelected(this.props, option, selectValue);
    }
  }, {
    key: "filterOption",
    value: function filterOption(option, inputValue) {
      return _filterOption(this.props, option, inputValue);
    }
  }, {
    key: "formatOptionLabel",
    value: function formatOptionLabel3(data, context) {
      if (typeof this.props.formatOptionLabel === "function") {
        var inputValue = this.props.inputValue;
        var selectValue = this.state.selectValue;
        return this.props.formatOptionLabel(data, {
          context,
          inputValue,
          selectValue
        });
      } else {
        return this.getOptionLabel(data);
      }
    }
  }, {
    key: "formatGroupLabel",
    value: function formatGroupLabel3(data) {
      return this.props.formatGroupLabel(data);
    }
  }, {
    key: "calculateDescription",
    value: function calculateDescription() {
      var descriptionProp = this.props["aria-describedby"] || this.props.descriptionId;
      var isMulti = this.props.isMulti;
      var hasValue = this.state.selectValue.length > 0;
      var baseDescriptionId = hasValue ? isMulti ? "" : this.getElementId("single-value") : this.getElementId("placeholder");
      if (!isMulti && !descriptionProp) {
        return {
          "aria-describedby": baseDescriptionId
        };
      }
      var describedBy = baseDescriptionId;
      if (descriptionProp) {
        describedBy = describedBy ? "".concat(descriptionProp, " ").concat(describedBy) : descriptionProp;
      }
      if (isMulti) {
        var multiMessage = this.getElementId("multi-message");
        describedBy = describedBy ? "".concat(describedBy, " ").concat(multiMessage) : multiMessage;
      }
      return {
        "aria-describedby": describedBy
      };
    }
  }, {
    key: "startListeningComposition",
    value: (
      // ==============================
      // Composition Handlers
      // ==============================
      function startListeningComposition() {
        if (document && document.addEventListener) {
          document.addEventListener("compositionstart", this.onCompositionStart, false);
          document.addEventListener("compositionend", this.onCompositionEnd, false);
        }
      }
    )
  }, {
    key: "stopListeningComposition",
    value: function stopListeningComposition() {
      if (document && document.removeEventListener) {
        document.removeEventListener("compositionstart", this.onCompositionStart);
        document.removeEventListener("compositionend", this.onCompositionEnd);
      }
    }
  }, {
    key: "startListeningToTouch",
    value: (
      // ==============================
      // Touch Handlers
      // ==============================
      function startListeningToTouch() {
        if (document && document.addEventListener) {
          document.addEventListener("touchstart", this.onTouchStart, false);
          document.addEventListener("touchmove", this.onTouchMove, false);
          document.addEventListener("touchend", this.onTouchEnd, false);
        }
      }
    )
  }, {
    key: "stopListeningToTouch",
    value: function stopListeningToTouch() {
      if (document && document.removeEventListener) {
        document.removeEventListener("touchstart", this.onTouchStart);
        document.removeEventListener("touchmove", this.onTouchMove);
        document.removeEventListener("touchend", this.onTouchEnd);
      }
    }
  }, {
    key: "renderInput",
    value: (
      // ==============================
      // Renderers
      // ==============================
      function renderInput() {
        var _this$props8 = this.props, form = _this$props8.form, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, isDisabled = _this$props8.isDisabled, isInvalid = _this$props8.isInvalid, isRequired = _this$props8.isRequired, isSearchable = _this$props8.isSearchable, label = _this$props8.label, labelId = _this$props8.labelId, menuIsOpen = _this$props8.menuIsOpen, required = _this$props8.required, _this$props8$tabIndex = _this$props8.tabIndex, tabIndex = _this$props8$tabIndex === void 0 ? 0 : _this$props8$tabIndex, testId = _this$props8.testId;
        var _this$getComponents = this.getComponents(), Input3 = _this$getComponents.Input;
        var inputIsHidden = this.state.inputIsHidden;
        var commonProps = this.commonProps;
        var id = inputId || this.getElementId("input");
        var ariaAttributes = _objectSpread10(_objectSpread10(_objectSpread10({
          "aria-autocomplete": "both",
          "aria-errormessage": this.props["aria-errormessage"],
          "aria-expanded": menuIsOpen,
          // TODO: aria-haspopup is implied as listbox with role="combobox" and was deprecated for aria 1.2, we still might need to keep it for back compat
          "aria-haspopup": this.props["UNSAFE_is_experimental_generic"] ? "dialog" : "listbox",
          "aria-invalid": this.props["aria-invalid"] || isInvalid,
          "aria-label": this.props["aria-label"] || label,
          "aria-labelledby": this.props["aria-labelledby"] || labelId,
          "aria-required": required || isRequired,
          role: "combobox",
          "aria-activedescendant": this.props["UNSAFE_is_experimental_generic"] ? void 0 : this.state.focusedOptionId || this.state.focusedValueId || void 0
        }, menuIsOpen && {
          "aria-controls": this.getElementId("listbox")
        }), !isSearchable && {
          "aria-readonly": true
        }), this.calculateDescription());
        if (!isSearchable) {
          return import_react18.default.createElement(DummyInput, _extends({
            id,
            innerRef: this.getInputRef,
            onBlur: this.onInputBlur,
            onChange: noop2,
            onFocus: this.onInputFocus,
            disabled: isDisabled,
            tabIndex,
            inputMode: "none",
            form,
            value: "",
            "data-testid": testId && "".concat(testId, "-select--input")
          }, ariaAttributes));
        }
        return import_react18.default.createElement(Input3, _extends({}, commonProps, {
          autoCapitalize: "none",
          autoComplete: "off",
          autoCorrect: "off",
          id,
          testId,
          innerRef: this.getInputRef,
          isDisabled,
          isHidden: inputIsHidden,
          onBlur: this.onInputBlur,
          onChange: this.handleInputChange,
          onFocus: this.onInputFocus,
          spellCheck: "false",
          tabIndex,
          form,
          type: "text",
          value: inputValue
        }, ariaAttributes));
      }
    )
  }, {
    key: "renderPlaceholderOrValue",
    value: function renderPlaceholderOrValue() {
      var _this5 = this;
      var _this$getComponents2 = this.getComponents(), MultiValue3 = _this$getComponents2.MultiValue, MultiValueContainer3 = _this$getComponents2.MultiValueContainer, MultiValueLabel3 = _this$getComponents2.MultiValueLabel, MultiValueRemove4 = _this$getComponents2.MultiValueRemove, SingleValue3 = _this$getComponents2.SingleValue, Placeholder3 = _this$getComponents2.Placeholder;
      var commonProps = this.commonProps;
      var _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue, placeholder = _this$props9.placeholder, testId = _this$props9.testId;
      var _this$state4 = this.state, selectValue = _this$state4.selectValue, focusedValue = _this$state4.focusedValue, isFocused = _this$state4.isFocused;
      if (!this.hasValue() || !controlShouldRenderValue) {
        return inputValue ? null : import_react18.default.createElement(Placeholder3, _extends({}, commonProps, {
          key: "placeholder",
          isDisabled,
          isFocused,
          innerProps: _objectSpread10({
            id: this.getElementId("placeholder")
          }, testId && {
            "data-testid": "".concat(testId, "-select--placeholder")
          })
        }), placeholder);
      }
      if (isMulti) {
        return selectValue.map(function(opt, index2) {
          var isOptionFocused = opt === focusedValue;
          var key = "".concat(_this5.getOptionLabel(opt), "-").concat(_this5.getOptionValue(opt));
          return import_react18.default.createElement(MultiValue3, _extends({}, commonProps, {
            components: {
              Container: MultiValueContainer3,
              Label: MultiValueLabel3,
              Remove: MultiValueRemove4
            },
            isFocused: isOptionFocused,
            isDisabled,
            key,
            index: index2,
            removeProps: _objectSpread10(_objectSpread10({
              onClick: function onClick() {
                return _this5.removeValue(opt);
              },
              onTouchEnd: function onTouchEnd() {
                return _this5.removeValue(opt);
              },
              onMouseDown: function onMouseDown(e) {
                e.preventDefault();
              }
            }, testId && {
              "data-testid": "".concat(testId, "-select--multivalue-").concat(index2, "-remove")
            }), {}, {
              id: "".concat(_this5.getElementId("selected-value"), "-").concat(index2, "-remove")
            }),
            data: opt,
            innerProps: _objectSpread10(_objectSpread10({}, testId && {
              "data-testid": "".concat(testId, "-select--multivalue-").concat(index2)
            }), {}, {
              id: "".concat(_this5.getElementId("selected-value"), "-").concat(index2)
            })
          }), _this5.formatOptionLabel(opt, "value"));
        });
      }
      if (inputValue) {
        return null;
      }
      var singleValue = selectValue[0];
      return import_react18.default.createElement(SingleValue3, _extends({}, commonProps, {
        data: singleValue,
        isDisabled,
        innerProps: {
          id: this.getElementId("single-value")
        }
      }), this.formatOptionLabel(singleValue, "value"));
    }
  }, {
    key: "renderClearIndicator",
    value: function renderClearIndicator() {
      var _this$getComponents3 = this.getComponents(), ClearIndicator5 = _this$getComponents3.ClearIndicator;
      var commonProps = this.commonProps;
      var _this$props0 = this.props, clearControlLabel = _this$props0.clearControlLabel, isDisabled = _this$props0.isDisabled, isLoading = _this$props0.isLoading, spacing = _this$props0.spacing, testId = _this$props0.testId;
      var isFocused = this.state.isFocused;
      if (!this.isClearable() || !ClearIndicator5 || isDisabled || !this.hasValue() || isLoading) {
        return null;
      }
      var innerProps = _objectSpread10({
        onMouseDown: this.onClearIndicatorMouseDown,
        onTouchEnd: this.onClearIndicatorTouchEnd
      }, testId && {
        "data-testid": "".concat(testId, "-select--clear-indicator")
      });
      var isCompact = spacing === "compact";
      return import_react18.default.createElement(ClearIndicator5, _extends({
        clearControlLabel
      }, commonProps, {
        innerProps,
        isFocused,
        isCompact
      }));
    }
  }, {
    key: "renderLoadingIndicator",
    value: function renderLoadingIndicator() {
      var _this$getComponents4 = this.getComponents(), LoadingIndicator3 = _this$getComponents4.LoadingIndicator;
      var commonProps = this.commonProps;
      var _this$props1 = this.props, isDisabled = _this$props1.isDisabled, isLoading = _this$props1.isLoading, spacing = _this$props1.spacing, testId = _this$props1.testId;
      var isFocused = this.state.isFocused;
      if (!LoadingIndicator3 || !isLoading) {
        return null;
      }
      var isCompact = spacing === "compact";
      var innerProps = {
        "aria-hidden": "true"
      };
      return import_react18.default.createElement(LoadingIndicator3, _extends({
        "data-testid": testId && "".concat(testId, "-select--loading-indicator")
      }, commonProps, {
        innerProps,
        isDisabled,
        isFocused,
        isCompact
      }));
    }
  }, {
    key: "renderDropdownIndicator",
    value: function renderDropdownIndicator() {
      var _this$getComponents5 = this.getComponents(), DropdownIndicator5 = _this$getComponents5.DropdownIndicator;
      if (!DropdownIndicator5) {
        return null;
      }
      var commonProps = this.commonProps;
      var _this$props10 = this.props, isDisabled = _this$props10.isDisabled, spacing = _this$props10.spacing, testId = _this$props10.testId;
      var isFocused = this.state.isFocused;
      var isCompact = spacing === "compact";
      var innerProps = _objectSpread10({
        onMouseDown: this.onDropdownIndicatorMouseDown,
        onTouchEnd: this.onDropdownIndicatorTouchEnd,
        "aria-hidden": "true"
      }, testId && {
        "data-testid": "".concat(testId, "-select--dropdown-indicator")
      });
      return import_react18.default.createElement(DropdownIndicator5, _extends({}, commonProps, {
        innerProps,
        isDisabled,
        isFocused,
        isCompact
      }));
    }
  }, {
    key: "renderMenu",
    value: function renderMenu() {
      var _this6 = this;
      var _this$getComponents6 = this.getComponents(), Group3 = _this$getComponents6.Group, GroupHeading3 = _this$getComponents6.GroupHeading, Menu5 = _this$getComponents6.Menu, MenuList3 = _this$getComponents6.MenuList, MenuPortal3 = _this$getComponents6.MenuPortal, LoadingMessage3 = _this$getComponents6.LoadingMessage, NoOptionsMessage3 = _this$getComponents6.NoOptionsMessage, Option3 = _this$getComponents6.Option;
      var commonProps = this.commonProps;
      var focusedOption = this.state.focusedOption;
      var _this$props11 = this.props, captureMenuScroll = _this$props11.captureMenuScroll, inputValue = _this$props11.inputValue, isLoading = _this$props11.isLoading, loadingMessage2 = _this$props11.loadingMessage, minMenuHeight = _this$props11.minMenuHeight, maxMenuHeight = _this$props11.maxMenuHeight, menuIsOpen = _this$props11.menuIsOpen, menuPlacement = _this$props11.menuPlacement, menuPosition = _this$props11.menuPosition, menuPortalTarget = _this$props11.menuPortalTarget, menuShouldBlockScroll = _this$props11.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props11.menuShouldScrollIntoView, noOptionsMessage2 = _this$props11.noOptionsMessage, onMenuScrollToTop = _this$props11.onMenuScrollToTop, onMenuScrollToBottom = _this$props11.onMenuScrollToBottom, testId = _this$props11.testId;
      if (!menuIsOpen) {
        return null;
      }
      var render = function render2(props, id, headingId) {
        var type = props.type, data = props.data, isDisabled = props.isDisabled, isSelected = props.isSelected, label = props.label, value = props.value;
        var isFocused = focusedOption === data;
        var onHover = isDisabled ? void 0 : function() {
          return _this6.onOptionHover(data);
        };
        var onSelect = isDisabled ? void 0 : function() {
          return _this6.selectOption(data);
        };
        var optionId = "".concat(_this6.getElementId("option"), "-").concat(id);
        var innerProps = _objectSpread10({
          id: optionId,
          onClick: onSelect,
          onMouseMove: onHover,
          onMouseOver: onHover,
          role: _this6.props["UNSAFE_is_experimental_generic"] ? "listitem" : "option",
          "aria-selected": _this6.props["UNSAFE_is_experimental_generic"] ? void 0 : isSelected,
          // We don't want aria-disabled if it's false. It's just noisy.
          "aria-disabled": !isDisabled ? void 0 : isDisabled,
          "aria-describedby": headingId
        }, testId && {
          "data-testid": "".concat(testId, "-select--option-").concat(id)
        });
        return import_react18.default.createElement(Option3, _extends({}, commonProps, {
          innerProps,
          data,
          isDisabled,
          isSelected,
          key: optionId,
          label,
          type,
          value,
          isFocused,
          innerRef: isFocused ? _this6.getFocusedOptionRef : void 0
        }), _this6.formatOptionLabel(props.data, "menu"));
      };
      var menuUI;
      if (this.hasOptions()) {
        var items = this.getCategorizedOptions();
        menuUI = items.map(function(item) {
          if (item.type === "group") {
            var data = item.data, options2 = item.options, groupIndex = item.index;
            var groupId = "".concat(_this6.getElementId("group"), "-").concat(groupIndex);
            var headingId = "".concat(groupId, "-heading");
            return import_react18.default.createElement(Group3, _extends({}, commonProps, {
              key: groupId,
              data,
              options: options2,
              Heading: GroupHeading3,
              headingProps: _objectSpread10({
                id: headingId,
                data: item.data
              }, testId && {
                "data-testid": "".concat(testId, "-select--group-").concat(groupIndex, "-heading")
              }),
              label: _this6.formatGroupLabel(item.data)
            }), item.options.map(function(option) {
              return render(option, "".concat(groupIndex, "-").concat(option.index), headingId);
            }));
          } else if (item.type === "option") {
            return render(item, "".concat(item.index));
          }
        });
      } else if (isLoading) {
        var message = loadingMessage2({
          inputValue
        });
        if (message === null) {
          return null;
        }
        menuUI = import_react18.default.createElement(LoadingMessage3, commonProps, message);
      } else {
        var _message = noOptionsMessage2({
          inputValue
        });
        if (_message === null) {
          return null;
        }
        menuUI = import_react18.default.createElement(NoOptionsMessage3, _extends({}, commonProps, {
          innerProps: _objectSpread10({}, testId && {
            "data-testid": "".concat(testId, "-select--no-options")
          })
        }), _message);
      }
      var menuPlacementProps = {
        minMenuHeight,
        maxMenuHeight,
        menuPlacement,
        menuPosition,
        menuShouldScrollIntoView
      };
      var menuElement = import_react18.default.createElement(MenuPlacer, _extends({}, commonProps, menuPlacementProps), function(_ref4) {
        var ref = _ref4.ref, _ref4$placerProps = _ref4.placerProps, placement = _ref4$placerProps.placement, maxHeight = _ref4$placerProps.maxHeight;
        return import_react18.default.createElement(Menu5, _extends({}, commonProps, menuPlacementProps, {
          innerRef: ref,
          innerProps: _objectSpread10({
            onMouseDown: _this6.onMenuMouseDown,
            onMouseMove: _this6.onMenuMouseMove,
            id: _this6.props.components.Menu ? _this6.getElementId("listbox") : void 0
          }, testId && {
            "data-testid": "".concat(testId, "-select--listbox-container")
          }),
          isLoading,
          placement
        }), import_react18.default.createElement(ScrollManager, {
          captureEnabled: captureMenuScroll,
          onTopArrive: onMenuScrollToTop,
          onBottomArrive: onMenuScrollToBottom,
          lockEnabled: menuShouldBlockScroll
        }, function(scrollTargetRef) {
          var _this6$inputRef, _this6$inputRef2;
          return import_react18.default.createElement(MenuList3, _extends({}, commonProps, {
            innerRef: function innerRef(instance) {
              _this6.getMenuListRef(instance);
              scrollTargetRef(instance);
            },
            innerProps: _objectSpread10(_objectSpread10(_objectSpread10({
              role: _this6.props["UNSAFE_is_experimental_generic"] ? "dialog" : "listbox"
            }, _this6.props["UNSAFE_is_experimental_generic"] && {
              "aria-labelledby": ((_this6$inputRef = _this6.inputRef) === null || _this6$inputRef === void 0 ? void 0 : _this6$inputRef.id) || _this6.getElementId("input")
            }), {}, {
              "aria-multiselectable": !commonProps.isMulti || _this6.props["UNSAFE_is_experimental_generic"] ? void 0 : commonProps.isMulti,
              id: _this6.getElementId("listbox")
            }, testId && {
              "data-testid": "".concat(testId, "-select--listbox")
            }), isSafari() && !_this6.props["UNSAFE_is_experimental_generic"] && {
              "aria-describedby": ((_this6$inputRef2 = _this6.inputRef) === null || _this6$inputRef2 === void 0 ? void 0 : _this6$inputRef2.id) || _this6.getElementId("input")
            }),
            isLoading,
            maxHeight,
            focusedOption
          }), _this6.props["UNSAFE_is_experimental_generic"] ? import_react18.default.createElement("div", {
            role: "list"
          }, menuUI) : menuUI);
        }));
      });
      return menuPortalTarget || menuPosition === "fixed" ? import_react18.default.createElement(MenuPortal3, _extends({}, commonProps, {
        appendTo: menuPortalTarget,
        controlElement: this.controlRef,
        menuPlacement,
        menuPosition
      }), menuElement) : menuElement;
    }
  }, {
    key: "renderFormField",
    value: function renderFormField() {
      var _this7 = this;
      var _this$props12 = this.props, delimiter = _this$props12.delimiter, isDisabled = _this$props12.isDisabled, isMulti = _this$props12.isMulti, required = _this$props12.required, name = _this$props12.name;
      var selectValue = this.state.selectValue;
      if (required && !this.hasValue() && !isDisabled) {
        return import_react18.default.createElement(required_input_default, {
          name,
          onFocus: this.onValueInputFocus
        });
      }
      if (!name || isDisabled) {
        return;
      }
      if (isMulti) {
        if (delimiter) {
          var value = selectValue.map(function(opt) {
            return _this7.getOptionValue(opt);
          }).join(delimiter);
          return import_react18.default.createElement("input", {
            name,
            type: "hidden",
            value
          });
        } else {
          var input = selectValue.length > 0 ? selectValue.map(function(opt, i) {
            return import_react18.default.createElement("input", {
              key: "i-".concat(i),
              name,
              type: "hidden",
              value: _this7.getOptionValue(opt)
            });
          }) : import_react18.default.createElement("input", {
            name,
            type: "hidden",
            value: ""
          });
          return import_react18.default.createElement("div", null, input);
        }
      } else {
        var _value = selectValue[0] ? this.getOptionValue(selectValue[0]) : "";
        return import_react18.default.createElement("input", {
          name,
          type: "hidden",
          value: _value
        });
      }
    }
  }, {
    key: "renderLiveRegion",
    value: function renderLiveRegion() {
      var commonProps = this.commonProps;
      var _this$state5 = this.state, ariaSelection = _this$state5.ariaSelection, isFocused = _this$state5.isFocused, selectValue = _this$state5.selectValue;
      var focusableOptions = this.getFocusableOptions();
      return import_react18.default.createElement(live_region_default, _extends({}, commonProps, {
        id: this.getElementId("live-region"),
        ariaSelection,
        isFocused,
        selectValue,
        focusableOptions
      }));
    }
  }, {
    key: "renderMultiselectMessage",
    value: function renderMultiselectMessage() {
      var msg = ", multiple selections available, ".concat(this.state.selectValue.length ? "Use left or right arrow keys to navigate selected items" : "");
      return (
        // eslint-disable-next-line @atlaskit/design-system/use-primitives-text
        import_react18.default.createElement("span", {
          id: this.getElementId("multi-message"),
          hidden: true
        }, msg)
      );
    }
  }, {
    key: "render",
    value: function render() {
      var _this$getComponents7 = this.getComponents(), Control5 = _this$getComponents7.Control, IndicatorsContainer3 = _this$getComponents7.IndicatorsContainer, SelectContainer3 = _this$getComponents7.SelectContainer, ValueContainer3 = _this$getComponents7.ValueContainer;
      var _this$props13 = this.props, className = _this$props13.className, id = _this$props13.id, isDisabled = _this$props13.isDisabled, menuIsOpen = _this$props13.menuIsOpen, isInvalid = _this$props13.isInvalid, testId = _this$props13.testId, _this$props13$appeara = _this$props13.appearance, appearance = _this$props13$appeara === void 0 ? "default" : _this$props13$appeara, _this$props13$spacing = _this$props13.spacing, spacing = _this$props13$spacing === void 0 ? "default" : _this$props13$spacing;
      var isFocused = this.state.isFocused;
      var commonProps = this.commonProps = this.getCommonProps();
      var isCompact = spacing === "compact";
      return import_react18.default.createElement(SelectContainer3, _extends({}, commonProps, {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
        className,
        innerProps: _objectSpread10({
          id,
          onKeyDown: this.onKeyDown
        }, testId && {
          "data-testid": testId && "".concat(testId, "-select--container")
        }),
        isDisabled,
        isFocused
      }), this.renderLiveRegion(), commonProps.isMulti && this.renderMultiselectMessage(), import_react18.default.createElement(Control5, _extends({}, commonProps, {
        innerRef: this.getControlRef,
        innerProps: _objectSpread10({
          onMouseDown: this.onControlMouseDown,
          onTouchEnd: this.onControlTouchEnd
        }, testId && {
          "data-testid": "".concat(testId, "-select--control")
        }),
        appearance,
        isInvalid,
        isDisabled,
        isFocused,
        menuIsOpen,
        isCompact
      }), import_react18.default.createElement(ValueContainer3, _extends({}, commonProps, {
        isDisabled,
        isCompact,
        innerProps: _objectSpread10(_objectSpread10({}, testId && {
          "data-testid": "".concat(testId, "-select--value-container")
        }), commonProps.isMulti && commonProps.hasValue && !isAppleDevice() && {
          // Required to keep JAWS from popping out of forms mode when using LEFT/RIGHT arrow keys.
          // This is Jedi Master level ARIA and not taken lightly. Do not modify without consulting
          // DST Accessibility.
          role: "application"
        })
      }), this.renderPlaceholderOrValue(), this.renderInput()), import_react18.default.createElement(IndicatorsContainer3, _extends({}, commonProps, {
        isDisabled,
        innerProps: _objectSpread10({}, testId && {
          "data-testid": "".concat(testId, "-select--indicators-container")
        })
      }), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField(), import_react18.default.createElement(NotifyOpenLayerObserver, {
        isOpen: this.props.menuIsOpen,
        onClose: this.handleOpenLayerObserverCloseSignal
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var prevProps = state.prevProps, clearFocusValueOnUpdate = state.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate, ariaSelection = state.ariaSelection, isFocused = state.isFocused, prevWasFocused = state.prevWasFocused, instancePrefix = state.instancePrefix;
      var options2 = props.options, value = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti;
      var selectValue = cleanValue(value);
      var newMenuOptionsState = {};
      if (prevProps && (value !== prevProps.value || options2 !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
        var focusableOptions = menuIsOpen ? buildFocusableOptions(props, selectValue) : [];
        var focusableOptionsWithIds = menuIsOpen ? buildFocusableOptionsWithIds(buildCategorizedOptions(props, selectValue), "".concat(instancePrefix, "-option")) : [];
        var focusedValue = clearFocusValueOnUpdate ? getNextFocusedValue(state, selectValue) : null;
        var focusedOption = getNextFocusedOption(state, focusableOptions);
        var focusedOptionId = getFocusedOptionId(focusableOptionsWithIds, focusedOption);
        newMenuOptionsState = {
          selectValue,
          focusedOption,
          focusedOptionId,
          focusableOptionsWithIds,
          focusedValue,
          clearFocusValueOnUpdate: false
        };
      }
      var newInputIsHiddenState = inputIsHiddenAfterUpdate != null && props !== prevProps ? {
        inputIsHidden: inputIsHiddenAfterUpdate,
        inputIsHiddenAfterUpdate: void 0
      } : {};
      var newAriaSelection = ariaSelection;
      var hasKeptFocus = isFocused && prevWasFocused;
      if (isFocused && !hasKeptFocus) {
        newAriaSelection = {
          value: valueTernary(isMulti, selectValue, selectValue[0] || null),
          options: selectValue,
          action: "initial-input-focus"
        };
        hasKeptFocus = !prevWasFocused;
      }
      if ((ariaSelection === null || ariaSelection === void 0 ? void 0 : ariaSelection.action) === "initial-input-focus") {
        newAriaSelection = null;
      }
      return _objectSpread10(_objectSpread10(_objectSpread10({}, newMenuOptionsState), newInputIsHiddenState), {}, {
        prevProps: props,
        ariaSelection: newAriaSelection,
        prevWasFocused: hasKeptFocus
      });
    }
  }]);
}(import_react18.Component);
_defineProperty(Select, "defaultProps", defaultProps);

// node_modules/@atlaskit/react-select/dist/esm/state-manager.js
var StateManagedSelect = (0, import_react19.forwardRef)(function(props, ref) {
  var baseSelectProps = useStateManager(props);
  return import_react19.default.createElement(Select, _extends({
    ref
  }, baseSelectProps));
});

// node_modules/@atlaskit/react-select/dist/esm/async.js
init_extends();
var import_react21 = __toESM(require_react());

// node_modules/@atlaskit/react-select/dist/esm/use-async.js
init_defineProperty();
init_slicedToArray();
init_objectWithoutProperties();
var import_react20 = __toESM(require_react());
var _excluded8 = ["defaultOptions", "cacheOptions", "loadOptions", "options", "isLoading", "onInputChange", "filterOption"];
function ownKeys11(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread11(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys11(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys11(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function useAsync(_ref2) {
  var _ref$defaultOptions = _ref2.defaultOptions, propsDefaultOptions = _ref$defaultOptions === void 0 ? false : _ref$defaultOptions, _ref$cacheOptions = _ref2.cacheOptions, cacheOptions = _ref$cacheOptions === void 0 ? false : _ref$cacheOptions, propsLoadOptions = _ref2.loadOptions, propsOptions = _ref2.options, _ref$isLoading = _ref2.isLoading, propsIsLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, propsOnInputChange = _ref2.onInputChange, _ref$filterOption = _ref2.filterOption, filterOption = _ref$filterOption === void 0 ? null : _ref$filterOption, restSelectProps = _objectWithoutProperties(_ref2, _excluded8);
  var propsInputValue = restSelectProps.inputValue;
  var lastRequest = (0, import_react20.useRef)(void 0);
  var mounted = (0, import_react20.useRef)(false);
  var _useState = (0, import_react20.useState)(Array.isArray(propsDefaultOptions) ? propsDefaultOptions : void 0), _useState2 = _slicedToArray(_useState, 2), defaultOptions2 = _useState2[0], setDefaultOptions = _useState2[1];
  var _useState3 = (0, import_react20.useState)(typeof propsInputValue !== "undefined" ? propsInputValue : ""), _useState4 = _slicedToArray(_useState3, 2), stateInputValue = _useState4[0], setStateInputValue = _useState4[1];
  var _useState5 = (0, import_react20.useState)(propsDefaultOptions === true), _useState6 = _slicedToArray(_useState5, 2), isLoading = _useState6[0], setIsLoading = _useState6[1];
  var _useState7 = (0, import_react20.useState)(void 0), _useState8 = _slicedToArray(_useState7, 2), loadedInputValue = _useState8[0], setLoadedInputValue = _useState8[1];
  var _useState9 = (0, import_react20.useState)([]), _useState0 = _slicedToArray(_useState9, 2), loadedOptions = _useState0[0], setLoadedOptions = _useState0[1];
  var _useState1 = (0, import_react20.useState)(false), _useState10 = _slicedToArray(_useState1, 2), passEmptyOptions = _useState10[0], setPassEmptyOptions = _useState10[1];
  var _useState11 = (0, import_react20.useState)({}), _useState12 = _slicedToArray(_useState11, 2), optionsCache = _useState12[0], setOptionsCache = _useState12[1];
  var _useState13 = (0, import_react20.useState)(void 0), _useState14 = _slicedToArray(_useState13, 2), prevDefaultOptions = _useState14[0], setPrevDefaultOptions = _useState14[1];
  var _useState15 = (0, import_react20.useState)(void 0), _useState16 = _slicedToArray(_useState15, 2), prevCacheOptions = _useState16[0], setPrevCacheOptions = _useState16[1];
  if (cacheOptions !== prevCacheOptions) {
    setOptionsCache({});
    setPrevCacheOptions(cacheOptions);
  }
  if (propsDefaultOptions !== prevDefaultOptions) {
    setDefaultOptions(Array.isArray(propsDefaultOptions) ? propsDefaultOptions : void 0);
    setPrevDefaultOptions(propsDefaultOptions);
  }
  (0, import_react20.useEffect)(function() {
    mounted.current = true;
    return function() {
      mounted.current = false;
    };
  }, []);
  var loadOptions = (0, import_react20.useCallback)(function(inputValue, callback) {
    if (!propsLoadOptions) {
      return callback();
    }
    var loader = propsLoadOptions(inputValue, callback);
    if (loader && typeof loader.then === "function") {
      loader.then(callback, function() {
        return callback();
      });
    }
  }, [propsLoadOptions]);
  (0, import_react20.useEffect)(function() {
    if (propsDefaultOptions === true) {
      loadOptions(stateInputValue, function(options3) {
        if (!mounted.current) {
          return;
        }
        setDefaultOptions(options3 || []);
        setIsLoading(!!lastRequest.current);
      });
    }
  }, []);
  var onInputChange = (0, import_react20.useCallback)(function(newValue, actionMeta) {
    var inputValue = handleInputChange(newValue, actionMeta, propsOnInputChange);
    if (!inputValue) {
      lastRequest.current = void 0;
      setStateInputValue("");
      setLoadedInputValue("");
      setLoadedOptions([]);
      setIsLoading(false);
      setPassEmptyOptions(false);
      return;
    }
    if (cacheOptions && optionsCache[inputValue]) {
      setStateInputValue(inputValue);
      setLoadedInputValue(inputValue);
      setLoadedOptions(optionsCache[inputValue]);
      setIsLoading(false);
      setPassEmptyOptions(false);
    } else {
      var request = lastRequest.current = {};
      setStateInputValue(inputValue);
      setIsLoading(true);
      setPassEmptyOptions(!loadedInputValue);
      loadOptions(inputValue, function(options3) {
        if (!mounted) {
          return;
        }
        if (request !== lastRequest.current) {
          return;
        }
        lastRequest.current = void 0;
        setIsLoading(false);
        setLoadedInputValue(inputValue);
        setLoadedOptions(options3 || []);
        setPassEmptyOptions(false);
        setOptionsCache(options3 ? _objectSpread11(_objectSpread11({}, optionsCache), {}, _defineProperty({}, inputValue, options3)) : optionsCache);
      });
    }
  }, [cacheOptions, loadOptions, loadedInputValue, optionsCache, propsOnInputChange]);
  var options2 = passEmptyOptions ? [] : stateInputValue && loadedInputValue ? loadedOptions : defaultOptions2 || [];
  return _objectSpread11(_objectSpread11({}, restSelectProps), {}, {
    options: options2,
    isLoading: isLoading || propsIsLoading,
    onInputChange,
    filterOption
  });
}

// node_modules/@atlaskit/react-select/dist/esm/async.js
var AsyncSelect = (0, import_react21.forwardRef)(function(props, ref) {
  var isAsyncEnabledInBaseSelect = props.isAsync && !props.options && (!!props.loadOptions || !!props.defaultOptions);
  var stateManagedProps = useAsync(props);
  var selectAsyncProps = !props.isAsync || isAsyncEnabledInBaseSelect ? stateManagedProps : props;
  var selectProps = useStateManager(selectAsyncProps);
  return import_react21.default.createElement(Select, _extends({
    ref
  }, selectProps));
});
var async_default = AsyncSelect;

// node_modules/@atlaskit/react-select/dist/esm/creatable.js
init_extends();
var import_react23 = __toESM(require_react());

// node_modules/@atlaskit/react-select/dist/esm/use-creatable.js
init_defineProperty();
init_objectWithoutProperties();
var import_react22 = __toESM(require_react());
var _excluded9 = ["allowCreateWhileLoading", "createOptionPosition", "formatCreateLabel", "isValidNewOption", "getNewOptionData", "onCreateOption", "options", "onChange"];
function ownKeys12(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread12(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys12(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys12(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var compareOption = function compareOption2() {
  var inputValue = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var option = arguments.length > 1 ? arguments[1] : void 0;
  var accessors = arguments.length > 2 ? arguments[2] : void 0;
  var candidate = String(inputValue).toLowerCase();
  var optionValue = String(accessors.getOptionValue(option)).toLowerCase();
  var optionLabel3 = String(accessors.getOptionLabel(option)).toLowerCase();
  return optionValue === candidate || optionLabel3 === candidate;
};
var builtins = {
  formatCreateLabel: function formatCreateLabel(inputValue) {
    return 'Create "'.concat(inputValue, '"');
  },
  isValidNewOption: function isValidNewOption(inputValue, selectValue, selectOptions, accessors) {
    return !(!inputValue || selectValue.some(function(option) {
      return compareOption(inputValue, option, accessors);
    }) || selectOptions.some(function(option) {
      return compareOption(inputValue, option, accessors);
    }));
  },
  getNewOptionData: function getNewOptionData(inputValue, optionLabel3) {
    return {
      label: optionLabel3,
      value: inputValue,
      __isNew__: true
    };
  }
};
function useCreatable(_ref2) {
  var _ref$allowCreateWhile = _ref2.allowCreateWhileLoading, allowCreateWhileLoading = _ref$allowCreateWhile === void 0 ? false : _ref$allowCreateWhile, _ref$createOptionPosi = _ref2.createOptionPosition, createOptionPosition = _ref$createOptionPosi === void 0 ? "last" : _ref$createOptionPosi, _ref$formatCreateLabe = _ref2.formatCreateLabel, formatCreateLabel2 = _ref$formatCreateLabe === void 0 ? builtins.formatCreateLabel : _ref$formatCreateLabe, _ref$isValidNewOption = _ref2.isValidNewOption, isValidNewOption2 = _ref$isValidNewOption === void 0 ? builtins.isValidNewOption : _ref$isValidNewOption, _ref$getNewOptionData = _ref2.getNewOptionData, getNewOptionData2 = _ref$getNewOptionData === void 0 ? builtins.getNewOptionData : _ref$getNewOptionData, onCreateOption = _ref2.onCreateOption, _ref$options = _ref2.options, propsOptions = _ref$options === void 0 ? [] : _ref$options, propsOnChange = _ref2.onChange, restSelectProps = _objectWithoutProperties(_ref2, _excluded9);
  var _restSelectProps$getO = restSelectProps.getOptionValue, getOptionValue7 = _restSelectProps$getO === void 0 ? getOptionValue : _restSelectProps$getO, _restSelectProps$getO2 = restSelectProps.getOptionLabel, getOptionLabel7 = _restSelectProps$getO2 === void 0 ? getOptionLabel : _restSelectProps$getO2, inputValue = restSelectProps.inputValue, isLoading = restSelectProps.isLoading, isMulti = restSelectProps.isMulti, value = restSelectProps.value, name = restSelectProps.name;
  var newOption = (0, import_react22.useMemo)(function() {
    return isValidNewOption2(inputValue, cleanValue(value), propsOptions, {
      getOptionValue: getOptionValue7,
      getOptionLabel: getOptionLabel7
    }) ? getNewOptionData2(inputValue, formatCreateLabel2(inputValue)) : void 0;
  }, [formatCreateLabel2, getNewOptionData2, getOptionLabel7, getOptionValue7, inputValue, isValidNewOption2, propsOptions, value]);
  var options2 = (0, import_react22.useMemo)(function() {
    return (allowCreateWhileLoading || !isLoading) && newOption ? createOptionPosition === "first" ? [newOption].concat(_toConsumableArray(propsOptions)) : [].concat(_toConsumableArray(propsOptions), [newOption]) : propsOptions;
  }, [allowCreateWhileLoading, createOptionPosition, isLoading, newOption, propsOptions]);
  var onChange2 = (0, import_react22.useCallback)(function(newValue, actionMeta) {
    if (actionMeta.action !== "select-option") {
      return propsOnChange(newValue, actionMeta);
    }
    var valueArray = Array.isArray(newValue) ? newValue : [newValue];
    if (valueArray[valueArray.length - 1] === newOption) {
      if (onCreateOption) {
        onCreateOption(inputValue);
      } else {
        var newOptionData = getNewOptionData2(inputValue, inputValue);
        var newActionMeta = {
          action: "create-option",
          name,
          option: newOptionData
        };
        propsOnChange(valueTernary(isMulti, [].concat(_toConsumableArray(cleanValue(value)), [newOptionData]), newOptionData), newActionMeta);
      }
      return;
    }
    propsOnChange(newValue, actionMeta);
  }, [getNewOptionData2, inputValue, isMulti, name, newOption, onCreateOption, propsOnChange, value]);
  return _objectSpread12(_objectSpread12({}, restSelectProps), {}, {
    options: options2,
    onChange: onChange2
  });
}

// node_modules/@atlaskit/react-select/dist/esm/creatable.js
var CreatableSelect = (0, import_react23.forwardRef)(function(props, ref) {
  var creatableProps = useStateManager(props);
  var selectProps = useCreatable(creatableProps);
  return import_react23.default.createElement(Select, _extends({
    ref
  }, selectProps));
});
var creatable_default = CreatableSelect;

// node_modules/@atlaskit/select/dist/esm/components/input-options.js
init_extends();
init_slicedToArray();
var React21 = __toESM(require_react());
init_runtime();
var import_react25 = __toESM(require_react());
var import_checkbox = __toESM(require_checkbox());
var import_radio = __toESM(require_radio());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/select/dist/esm/components/input-options.compiled.css";

// node_modules/@atlaskit/icon/dist/esm/components/svg.js
var React20 = __toESM(require_react());
init_runtime();
var import_react24 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/icon/dist/esm/components/svg.compiled.css";
var sizeStyles = {
  small: "_1bsb7vkz _4t3i7vkz",
  medium: "_1bsb1tcg _4t3i1tcg",
  large: "_1bsbzwfg _4t3izwfg",
  xlarge: "_1bsbckbl _4t3ickbl"
};
var SVG = (0, import_react24.memo)(function SVG2(_ref2) {
  var _ref$size = _ref2.size, size2 = _ref$size === void 0 ? "medium" : _ref$size, label = _ref2.label, _ref$primaryColor = _ref2.primaryColor, primaryColor = _ref$primaryColor === void 0 ? "currentColor" : _ref$primaryColor, secondaryColor = _ref2.secondaryColor, testId = _ref2.testId, children = _ref2.children;
  return React20.createElement("svg", {
    viewBox: "0 0 24 24",
    style: {
      color: primaryColor,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      fill: secondaryColor
    },
    "data-testid": testId,
    "aria-label": label || void 0,
    role: label ? "img" : "presentation",
    className: ax(["_1reo15vq _18m915vq _lswuvuon _lcxvglyw _vc881r31", sizeStyles[size2]])
  }, children);
});
var svg_default = SVG;

// node_modules/@atlaskit/select/dist/esm/components/input-options.js
init_esm();
var optionStyles2 = {
  default: "_1e0c1txw _4cvr1h6o _1bsb1osq _uiztglyw _18ql1j7p _vchhusvi _85i51b66 _1q511b66 _bozgpxbi _y4tiutpp _bfhk1j28 _16qs1kw7 _syaz1kw7 _1di61dty",
  focused: "_bfhk166n _16qsn8hf _112e1vrj",
  disabled: "_syaz15gi"
};
var getPrimaryColor = function getPrimaryColor2(_ref2) {
  var isActive = _ref2.isActive, isDisabled = _ref2.isDisabled, isFocused = _ref2.isFocused, isSelected = _ref2.isSelected;
  if (isDisabled) {
    return "var(--ds-background-disabled, #091E4208)";
  } else if (isSelected && isActive) {
    return "var(--ds-background-selected-bold-pressed, #09326C)";
  } else if (isActive) {
    return "var(--ds-background-selected-pressed, #85B8FF)";
  } else if (isFocused && isSelected) {
    return "var(--ds-background-selected-bold-hovered, #0055CC)";
  } else if (isFocused) {
    return "var(--ds-surface, #FFFFFF)";
  } else if (isSelected) {
    return "var(--ds-background-selected-bold, #0C66E4)";
  }
  return "var(--ds-background-neutral, #091E420F)";
};
var getSecondaryColor = function getSecondaryColor2(_ref2) {
  var isDisabled = _ref2.isDisabled, isSelected = _ref2.isSelected;
  if (isDisabled && isSelected) {
    return "var(--ds-text-disabled, #091E424F)";
  } else if (!isSelected) {
    return "transparent";
  }
  return "var(--ds-surface, #FFFFFF)";
};
var iconStyles = {
  inherit: "_1u9j1r31 _1gqp1r31",
  default: "_1u9j1elr _1gqp1elr"
};
var ControlOption = function ControlOption2(props) {
  var _useState = (0, import_react25.useState)(false), _useState2 = _slicedToArray(_useState, 2), isActive = _useState2[0], setIsActive = _useState2[1];
  var onMouseDown = (0, import_react25.useCallback)(function() {
    return setIsActive(true);
  }, []);
  var onMouseUp = (0, import_react25.useCallback)(function() {
    return setIsActive(false);
  }, []);
  var Icon = props.Icon, children = props.children, innerProps = props.innerProps, innerRef = props.innerRef, cx2 = props.cx, className = props.className, isDisabled = props.isDisabled, isSelected = props.isSelected, isFocused = props.isFocused;
  var classNames2 = (0, import_react25.useMemo)(function() {
    return cx2({
      option: true,
      "option--is-disabled": isDisabled,
      "option--is-focused": isFocused,
      "option--is-selected": isSelected
    }, className);
  }, [cx2, isDisabled, isFocused, isSelected, className]);
  return React21.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([optionStyles2.default, isFocused && optionStyles2.focused, isDisabled && optionStyles2.disabled, classNames2]),
    ref: innerRef,
    onMouseDown,
    onMouseUp,
    onMouseLeave: onMouseUp
  }, innerProps), React21.createElement("div", {
    className: ax(["_1e0c1txw _4cvr1h6o _1o9zidpf _y4ti1b66 _16cu892t _1xci892t _59qxe4h9 _8y3xe4h9", isSelected || isActive || isDisabled ? iconStyles.inherit : iconStyles.default])
  }, !!Icon ? React21.createElement(Icon, {
    label: "",
    primaryColor: getPrimaryColor({
      isDisabled,
      isSelected,
      isFocused,
      isActive
    }),
    secondaryColor: getSecondaryColor({
      isDisabled,
      isSelected
    }),
    isFacadeDisabled: true
  }) : null), React21.createElement("div", {
    className: ax(["_16jlkb7n _1reo15vq _1bto1l2s _o5721q9c"])
  }, children));
};
var NewCheckboxIcon = function NewCheckboxIcon2(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props, @atlaskit/design-system/no-custom-icons
    React21.createElement(svg_default, props, React21.createElement("g", {
      fillRule: "evenodd"
    }, React21.createElement("rect", {
      x: "5.5",
      y: "5.5",
      width: "13",
      height: "13",
      rx: "1.5",
      fill: "currentColor"
    }), React21.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
      fill: "inherit"
    })))
  );
};
var NewRadioIcon = function NewRadioIcon2(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props, @atlaskit/design-system/no-custom-icons
    React21.createElement(svg_default, props, React21.createElement("g", {
      fillRule: "evenodd"
    }, React21.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "6.75",
      fill: "currentColor",
      strokeWidth: "1.5"
    }), React21.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "3",
      fill: "inherit"
    })))
  );
};
var CheckboxOption = function CheckboxOption2(props) {
  return React21.createElement(ControlOption, _extends({
    Icon: (
      // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
      fg("platform-visual-refresh-icons") ? NewCheckboxIcon : (
        // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
        import_checkbox.default
      )
    )
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};
var RadioOption = function RadioOption2(props) {
  return (
    // TODO https://product-fabric.atlassian.net/browse/DSP-20769
    React21.createElement(ControlOption, _extends({
      Icon: (
        // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
        fg("platform-visual-refresh-icons") ? NewRadioIcon : (
          // eslint-disable-next-line @atlaskit/design-system/no-legacy-icons
          import_radio.default
        )
      )
      // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    }, props))
  );
};

// node_modules/@atlaskit/select/dist/esm/createSelect.js
init_extends();
init_objectWithoutProperties();
var import_react26 = __toESM(require_react());
var _excluded10 = ["ariaLiveMessages", "isInvalid", "onClickPreventDefault", "tabSelectsValue", "validationState"];
function createSelect(WrappedComponent) {
  var AtlaskitSelect = (0, import_react26.forwardRef)(function AtlaskitSelect2(props, forwardedRef) {
    var ariaLiveMessages = props.ariaLiveMessages, isInvalid = props.isInvalid, _props$onClickPrevent = props.onClickPreventDefault, onClickPreventDefault = _props$onClickPrevent === void 0 ? true : _props$onClickPrevent, _props$tabSelectsValu = props.tabSelectsValue, tabSelectsValue = _props$tabSelectsValu === void 0 ? false : _props$tabSelectsValu, _props$validationStat = props.validationState, validationState = _props$validationStat === void 0 ? "default" : _props$validationStat, restProps = _objectWithoutProperties(props, _excluded10);
    var internalSelectRef = (0, import_react26.useRef)(null);
    (0, import_react26.useImperativeHandle)(forwardedRef, function() {
      return {
        select: internalSelectRef.current,
        focus: function focus() {
          var _internalSelectRef$cu;
          return (_internalSelectRef$cu = internalSelectRef.current) === null || _internalSelectRef$cu === void 0 ? void 0 : _internalSelectRef$cu.focus();
        },
        blur: function blur() {
          var _internalSelectRef$cu2;
          return (_internalSelectRef$cu2 = internalSelectRef.current) === null || _internalSelectRef$cu2 === void 0 ? void 0 : _internalSelectRef$cu2.blur();
        }
      };
    }, []);
    return import_react26.default.createElement(WrappedComponent, _extends({
      ref: internalSelectRef,
      ariaLiveMessages,
      tabSelectsValue,
      onClickPreventDefault,
      isInvalid: isInvalid || validationState === "error"
    }, restProps, {
      // indicates react-select to be async by default using the base Select component
      // so that makers can pass all async props on the base select to async load options.
      isAsync: true
    }));
  });
  AtlaskitSelect.displayName = "AtlaskitSelect";
  return AtlaskitSelect;
}

// node_modules/@atlaskit/select/dist/esm/Select.js
var packageName = "@atlaskit/select";
var packageVersion = "0.0.0-development";
var SelectWithoutAnalytics = createSelect(async_default);
var createAndFireEventOnAtlaskit = createAndFireEvent_default("atlaskit");
var Select2 = withAnalyticsContext_default({
  componentName: "select",
  packageName,
  packageVersion
})(withAnalyticsEvents_default({
  onChange: createAndFireEventOnAtlaskit({
    action: "changed",
    actionSubject: "option",
    attributes: {
      componentName: "select",
      packageName,
      packageVersion
    }
  })
})(SelectWithoutAnalytics));
var Select_default = Select2;

// node_modules/@atlaskit/select/dist/esm/AsyncSelect.js
var AsyncSelect2 = createSelect(async_default);
var AsyncSelect_default = AsyncSelect2;

// node_modules/@atlaskit/select/dist/esm/CreatableSelect.js
var CreatableSelect2 = createSelect(creatable_default);
var CreatableSelect_default = CreatableSelect2;

// node_modules/@atlaskit/react-select/dist/esm/async-creatable.js
init_extends();
var import_react27 = __toESM(require_react());
var AsyncCreatableSelect = (0, import_react27.forwardRef)(function(props, ref) {
  var stateManagerProps = useAsync(props);
  var creatableProps = useStateManager(stateManagerProps);
  var selectProps = useCreatable(creatableProps);
  return import_react27.default.createElement(Select, _extends({
    ref
  }, selectProps));
});
var async_creatable_default = AsyncCreatableSelect;

// node_modules/@atlaskit/select/dist/esm/AsyncCreatableSelect.js
var AsyncCreatableSelect2 = createSelect(async_creatable_default);
var AsyncCreatableSelect_default = AsyncCreatableSelect2;

// node_modules/@atlaskit/select/dist/esm/utils/grouped-options-announcement.js
var isOptionsGrouped = function isOptionsGrouped2(arr) {
  return arr === null || arr === void 0 ? void 0 : arr.every(function(obj) {
    return obj.hasOwnProperty("options");
  });
};

// node_modules/@atlaskit/select/dist/esm/CheckboxSelect.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
var import_react28 = __toESM(require_react());
var _excluded11 = ["components"];
function ownKeys13(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread13(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys13(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys13(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var CheckboxSelectInternal = function CheckboxSelectInternal2(_ref2) {
  var components2 = _ref2.components, props = _objectWithoutProperties(_ref2, _excluded11);
  var mergedComponents = (0, import_react28.useMemo)(function() {
    return _objectSpread13(_objectSpread13({}, components2), {}, {
      Option: CheckboxOption
    });
  }, [components2]);
  return import_react28.default.createElement(Select_default, _extends({
    closeMenuOnSelect: false,
    hideSelectedOptions: false,
    isMulti: true
  }, props, {
    components: mergedComponents
  }));
};
var CheckboxSelect = import_react28.default.memo(
  CheckboxSelectInternal
  // Type casting as `React.memo` does not forward generic types
  // Reference: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37087#issuecomment-656596623
);
var CheckboxSelect_default = CheckboxSelect;

// node_modules/@atlaskit/select/dist/esm/CountrySelect.js
init_extends();
var React25 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/select/dist/esm/CountrySelect.compiled.css";

// node_modules/@atlaskit/select/dist/esm/data/countries.js
var allCountries = [{
  icon: "🇦🇫",
  name: "Afghanistan",
  abbr: "AF",
  code: "93"
}, {
  icon: "🇦🇽",
  name: "Alland Islands",
  abbr: "AX",
  code: "358"
}, {
  icon: "🇦🇱",
  name: "Albania",
  abbr: "AL",
  code: "355"
}, {
  icon: "🇩🇿",
  name: "Algeria",
  abbr: "DZ",
  code: "213"
}, {
  icon: "🇦🇸",
  name: "American Samoa",
  abbr: "AS",
  code: "1-684"
}, {
  icon: "🇦🇩",
  name: "Andorra",
  abbr: "AD",
  code: "376"
}, {
  icon: "🇦🇴",
  name: "Angola",
  abbr: "AO",
  code: "244"
}, {
  icon: "🇦🇮",
  name: "Anguilla",
  abbr: "AI",
  code: "1-264"
}, {
  icon: "🇦🇶",
  name: "Antarctica",
  abbr: "AQ",
  code: "672"
}, {
  icon: "🇦🇬",
  name: "Antigua and Barbuda",
  abbr: "AG",
  code: "1-268"
}, {
  icon: "🇦🇷",
  name: "Argentina",
  abbr: "AR",
  code: "54"
}, {
  icon: "🇦🇲",
  name: "Armenia",
  abbr: "AM",
  code: "374"
}, {
  icon: "🇦🇼",
  name: "Aruba",
  abbr: "AW",
  code: "297"
}, {
  icon: "🇦🇺",
  name: "Australia",
  abbr: "AU",
  code: "61",
  suggested: true
}, {
  icon: "🇦🇹",
  name: "Austria",
  abbr: "AT",
  code: "43"
}, {
  icon: "🇦🇿",
  name: "Azerbaijan",
  abbr: "AZ",
  code: "994"
}, {
  icon: "🇧🇸",
  name: "Bahamas",
  abbr: "BS",
  code: "1-242"
}, {
  icon: "🇧🇭",
  name: "Bahrain",
  abbr: "BH",
  code: "973"
}, {
  icon: "🇧🇩",
  name: "Bangladesh",
  abbr: "BD",
  code: "880"
}, {
  icon: "🇧🇧",
  name: "Barbados",
  abbr: "BB",
  code: "1-246"
}, {
  icon: "🇧🇾",
  name: "Belarus",
  abbr: "BY",
  code: "375"
}, {
  icon: "🇧🇪",
  name: "Belgium",
  abbr: "BE",
  code: "32"
}, {
  icon: "🇧🇿",
  name: "Belize",
  abbr: "BZ",
  code: "501"
}, {
  icon: "🇧🇯",
  name: "Benin",
  abbr: "BJ",
  code: "229"
}, {
  icon: "🇧🇲",
  name: "Bermuda",
  abbr: "BM",
  code: "1-441"
}, {
  icon: "🇧🇹",
  name: "Bhutan",
  abbr: "BT",
  code: "975"
}, {
  icon: "🇧🇴",
  name: "Bolivia",
  abbr: "BO",
  code: "591"
}, {
  icon: "🇧🇦",
  name: "Bosnia and Herzegovina",
  abbr: "BA",
  code: "387"
}, {
  icon: "🇧🇼",
  name: "Botswana",
  abbr: "BW",
  code: "267"
}, {
  icon: "🇧🇻",
  name: "Bouvet Island",
  abbr: "BV",
  code: "47"
}, {
  icon: "🇧🇷",
  name: "Brazil",
  abbr: "BR",
  code: "55"
}, {
  icon: "🇮🇴",
  name: "British Indian Ocean Territory",
  abbr: "IO",
  code: "246"
}, {
  icon: "🇻🇬",
  name: "British Virgin Islands",
  abbr: "VG",
  code: "1-284"
}, {
  icon: "🇧🇳",
  name: "Brunei Darussalam",
  abbr: "BN",
  code: "673"
}, {
  icon: "🇧🇬",
  name: "Bulgaria",
  abbr: "BG",
  code: "359"
}, {
  icon: "🇧🇫",
  name: "Burkina Faso",
  abbr: "BF",
  code: "226"
}, {
  icon: "🇧🇮",
  name: "Burundi",
  abbr: "BI",
  code: "257"
}, {
  icon: "🇰🇭",
  name: "Cambodia",
  abbr: "KH",
  code: "855"
}, {
  icon: "🇨🇲",
  name: "Cameroon",
  abbr: "CM",
  code: "237"
}, {
  icon: "🇨🇦",
  name: "Canada",
  abbr: "CA",
  code: "1",
  suggested: true
}, {
  icon: "🇨🇻",
  name: "Cape Verde",
  abbr: "CV",
  code: "238"
}, {
  icon: "🇰🇾",
  name: "Cayman Islands",
  abbr: "KY",
  code: "1-345"
}, {
  icon: "🇨🇫",
  name: "Central African Republic",
  abbr: "CF",
  code: "236"
}, {
  icon: "🇹🇩",
  name: "Chad",
  abbr: "TD",
  code: "235"
}, {
  icon: "🇨🇱",
  name: "Chile",
  abbr: "CL",
  code: "56"
}, {
  icon: "🇨🇳",
  name: "China",
  abbr: "CN",
  code: "86"
}, {
  icon: "🇨🇽",
  name: "Christmas Island",
  abbr: "CX",
  code: "61"
}, {
  icon: "🇨🇨",
  name: "Cocos (Keeling) Islands",
  abbr: "CC",
  code: "61"
}, {
  icon: "🇨🇴",
  name: "Colombia",
  abbr: "CO",
  code: "57"
}, {
  icon: "🇰🇲",
  name: "Comoros",
  abbr: "KM",
  code: "269"
}, {
  icon: "🇨🇩",
  name: "Congo, Democratic Republic of the",
  abbr: "CG",
  code: "243"
}, {
  icon: "🇨🇬",
  name: "Congo, Republic of the",
  abbr: "CD",
  code: "242"
}, {
  icon: "🇨🇰",
  name: "Cook Islands",
  abbr: "CK",
  code: "682"
}, {
  icon: "🇨🇷",
  name: "Costa Rica",
  abbr: "CR",
  code: "506"
}, {
  icon: "🇨🇮",
  name: "Cote d'Ivoire",
  abbr: "CI",
  code: "225"
}, {
  icon: "🇭🇷",
  name: "Croatia",
  abbr: "HR",
  code: "385"
}, {
  icon: "🇨🇺",
  name: "Cuba",
  abbr: "CU",
  code: "53"
}, {
  icon: "🇨🇼",
  name: "Curacao",
  abbr: "CW",
  code: "599"
}, {
  icon: "🇨🇾",
  name: "Cyprus",
  abbr: "CY",
  code: "357"
}, {
  icon: "🇨🇿",
  name: "Czech Republic",
  abbr: "CZ",
  code: "420"
}, {
  icon: "🇩🇰",
  name: "Denmark",
  abbr: "DK",
  code: "45"
}, {
  icon: "🇩🇯",
  name: "Djibouti",
  abbr: "DJ",
  code: "253"
}, {
  icon: "🇩🇲",
  name: "Dominica",
  abbr: "DM",
  code: "1-767"
}, {
  icon: "🇩🇴",
  name: "Dominican Republic",
  abbr: "DO",
  code: "1-809"
}, {
  icon: "🇪🇨",
  name: "Ecuador",
  abbr: "EC",
  code: "593"
}, {
  icon: "🇪🇬",
  name: "Egypt",
  abbr: "EG",
  code: "20"
}, {
  icon: "🇸🇻",
  name: "El Salvador",
  abbr: "SV",
  code: "503"
}, {
  icon: "🇬🇶",
  name: "Equatorial Guinea",
  abbr: "GQ",
  code: "240"
}, {
  icon: "🇪🇷",
  name: "Eritrea",
  abbr: "ER",
  code: "291"
}, {
  icon: "🇪🇪",
  name: "Estonia",
  abbr: "EE",
  code: "372"
}, {
  icon: "🇪🇹",
  name: "Ethiopia",
  abbr: "ET",
  code: "251"
}, {
  icon: "🇫🇰",
  name: "Falkland Islands (Malvinas)",
  abbr: "FK",
  code: "500"
}, {
  icon: "🇫🇴",
  name: "Faroe Islands",
  abbr: "FO",
  code: "298"
}, {
  icon: "🇫🇯",
  name: "Fiji",
  abbr: "FJ",
  code: "679"
}, {
  icon: "🇫🇮",
  name: "Finland",
  abbr: "FI",
  code: "358"
}, {
  icon: "🇫🇷",
  name: "France",
  abbr: "FR",
  code: "33",
  suggested: true
}, {
  icon: "🇬🇫",
  name: "French Guiana",
  abbr: "GF",
  code: "594"
}, {
  icon: "🇵🇫",
  name: "French Polynesia",
  abbr: "PF",
  code: "689"
}, {
  icon: "🇹🇫",
  name: "French Southern Territories",
  abbr: "TF",
  code: "262"
}, {
  icon: "🇬🇦",
  name: "Gabon",
  abbr: "GA",
  code: "241"
}, {
  icon: "🇬🇲",
  name: "Gambia",
  abbr: "GM",
  code: "220"
}, {
  icon: "🇬🇪",
  name: "Georgia",
  abbr: "GE",
  code: "995"
}, {
  icon: "🇩🇪",
  name: "Germany",
  abbr: "DE",
  code: "49",
  suggested: true
}, {
  icon: "🇬🇭",
  name: "Ghana",
  abbr: "GH",
  code: "233"
}, {
  icon: "🇬🇮",
  name: "Gibraltar",
  abbr: "GI",
  code: "350"
}, {
  icon: "🇬🇷",
  name: "Greece",
  abbr: "GR",
  code: "30"
}, {
  icon: "🇬🇱",
  name: "Greenland",
  abbr: "GL",
  code: "299"
}, {
  icon: "🇬🇩",
  name: "Grenada",
  abbr: "GD",
  code: "1-473"
}, {
  icon: "🇬🇵",
  name: "Guadeloupe",
  abbr: "GP",
  code: "590"
}, {
  icon: "🇬🇺",
  name: "Guam",
  abbr: "GU",
  code: "1-671"
}, {
  icon: "🇬🇹",
  name: "Guatemala",
  abbr: "GT",
  code: "502"
}, {
  icon: "🇬🇬",
  name: "Guernsey",
  abbr: "GG",
  code: "44"
}, {
  icon: "🇬🇼",
  name: "Guinea-Bissau",
  abbr: "GW",
  code: "245"
}, {
  icon: "🇬🇳",
  name: "Guinea",
  abbr: "GN",
  code: "224"
}, {
  icon: "🇬🇾",
  name: "Guyana",
  abbr: "GY",
  code: "592"
}, {
  icon: "🇭🇹",
  name: "Haiti",
  abbr: "HT",
  code: "509"
}, {
  icon: "🇭🇲",
  name: "Heard Island and McDonald Islands",
  abbr: "HM",
  code: "672"
}, {
  icon: "🇻🇦",
  name: "Holy See (Vatican City State)",
  abbr: "VA",
  code: "379"
}, {
  icon: "🇭🇳",
  name: "Honduras",
  abbr: "HN",
  code: "504"
}, {
  icon: "🇭🇰",
  name: "Hong Kong",
  abbr: "HK",
  code: "852"
}, {
  icon: "🇭🇺",
  name: "Hungary",
  abbr: "HU",
  code: "36"
}, {
  icon: "🇮🇸",
  name: "Iceland",
  abbr: "IS",
  code: "354"
}, {
  icon: "🇮🇳",
  name: "India",
  abbr: "IN",
  code: "91"
}, {
  icon: "🇮🇩",
  name: "Indonesia",
  abbr: "ID",
  code: "62"
}, {
  icon: "🇮🇷",
  name: "Iran, Islamic Republic of",
  abbr: "IR",
  code: "98"
}, {
  icon: "🇮🇶",
  name: "Iraq",
  abbr: "IQ",
  code: "964"
}, {
  icon: "🇮🇪",
  name: "Ireland",
  abbr: "IE",
  code: "353"
}, {
  icon: "🇮🇲",
  name: "Isle of Man",
  abbr: "IM",
  code: "44"
}, {
  icon: "🇮🇱",
  name: "Israel",
  abbr: "IL",
  code: "972"
}, {
  icon: "🇮🇹",
  name: "Italy",
  abbr: "IT",
  code: "39"
}, {
  icon: "🇯🇲",
  name: "Jamaica",
  abbr: "JM",
  code: "1-876"
}, {
  icon: "🇯🇵",
  name: "Japan",
  abbr: "JP",
  code: "81",
  suggested: true
}, {
  icon: "🇯🇪",
  name: "Jersey",
  abbr: "JE",
  code: "44"
}, {
  icon: "🇯🇴",
  name: "Jordan",
  abbr: "JO",
  code: "962"
}, {
  icon: "🇰🇿",
  name: "Kazakhstan",
  abbr: "KZ",
  code: "7"
}, {
  icon: "🇰🇪",
  name: "Kenya",
  abbr: "KE",
  code: "254"
}, {
  icon: "🇰🇮",
  name: "Kiribati",
  abbr: "KI",
  code: "686"
}, {
  icon: "🇰🇵",
  name: "Korea, Democratic People's Republic of",
  abbr: "KP",
  code: "850"
}, {
  icon: "🇰🇷",
  name: "Korea, Republic of",
  abbr: "KR",
  code: "82"
}, {
  icon: "🇽🇰",
  name: "Kosovo",
  abbr: "XK",
  code: "383"
}, {
  icon: "🇰🇼",
  name: "Kuwait",
  abbr: "KW",
  code: "965"
}, {
  icon: "🇰🇬",
  name: "Kyrgyzstan",
  abbr: "KG",
  code: "996"
}, {
  icon: "🇱🇦",
  name: "Lao People's Democratic Republic",
  abbr: "LA",
  code: "856"
}, {
  icon: "🇱🇻",
  name: "Latvia",
  abbr: "LV",
  code: "371"
}, {
  icon: "🇱🇧",
  name: "Lebanon",
  abbr: "LB",
  code: "961"
}, {
  icon: "🇱🇸",
  name: "Lesotho",
  abbr: "LS",
  code: "266"
}, {
  icon: "🇱🇷",
  name: "Liberia",
  abbr: "LR",
  code: "231"
}, {
  icon: "🇱🇾",
  name: "Libya",
  abbr: "LY",
  code: "218"
}, {
  icon: "🇱🇮",
  name: "Liechtenstein",
  abbr: "LI",
  code: "423"
}, {
  icon: "🇱🇹",
  name: "Lithuania",
  abbr: "LT",
  code: "370"
}, {
  icon: "🇱🇺",
  name: "Luxembourg",
  abbr: "LU",
  code: "352"
}, {
  icon: "🇲🇴",
  name: "Macao",
  abbr: "MO",
  code: "853"
}, {
  icon: "🇲🇰",
  name: "Macedonia, the Former Yugoslav Republic of",
  abbr: "MK",
  code: "389"
}, {
  icon: "🇲🇬",
  name: "Madagascar",
  abbr: "MG",
  code: "261"
}, {
  icon: "🇲🇼",
  name: "Malawi",
  abbr: "MW",
  code: "265"
}, {
  icon: "🇲🇾",
  name: "Malaysia",
  abbr: "MY",
  code: "60"
}, {
  icon: "🇲🇻",
  name: "Maldives",
  abbr: "MV",
  code: "960"
}, {
  icon: "🇲🇱",
  name: "Mali",
  abbr: "ML",
  code: "223"
}, {
  icon: "🇲🇹",
  name: "Malta",
  abbr: "MT",
  code: "356"
}, {
  icon: "🇲🇭",
  name: "Marshall Islands",
  abbr: "MH",
  code: "692"
}, {
  icon: "🇲🇶",
  name: "Martinique",
  abbr: "MQ",
  code: "596"
}, {
  icon: "🇲🇷",
  name: "Mauritania",
  abbr: "MR",
  code: "222"
}, {
  icon: "🇲🇺",
  name: "Mauritius",
  abbr: "MU",
  code: "230"
}, {
  icon: "🇾🇹",
  name: "Mayotte",
  abbr: "YT",
  code: "262"
}, {
  icon: "🇲🇽",
  name: "Mexico",
  abbr: "MX",
  code: "52"
}, {
  icon: "🇫🇲",
  name: "Micronesia, Federated States of",
  abbr: "FM",
  code: "691"
}, {
  icon: "🇲🇩",
  name: "Moldova, Republic of",
  abbr: "MD",
  code: "373"
}, {
  icon: "🇲🇨",
  name: "Monaco",
  abbr: "MC",
  code: "377"
}, {
  icon: "🇲🇳",
  name: "Mongolia",
  abbr: "MN",
  code: "976"
}, {
  icon: "🇲🇪",
  name: "Montenegro",
  abbr: "ME",
  code: "382"
}, {
  icon: "🇲🇸",
  name: "Montserrat",
  abbr: "MS",
  code: "1-664"
}, {
  icon: "🇲🇦",
  name: "Morocco",
  abbr: "MA",
  code: "212"
}, {
  icon: "🇲🇿",
  name: "Mozambique",
  abbr: "MZ",
  code: "258"
}, {
  icon: "🇲🇲",
  name: "Myanmar",
  abbr: "MM",
  code: "95"
}, {
  icon: "🇳🇦",
  name: "Namibia",
  abbr: "NA",
  code: "264"
}, {
  icon: "🇳🇷",
  name: "Nauru",
  abbr: "NR",
  code: "674"
}, {
  icon: "🇳🇵",
  name: "Nepal",
  abbr: "NP",
  code: "977"
}, {
  icon: "🇳🇱",
  name: "Netherlands",
  abbr: "NL",
  code: "31"
}, {
  icon: "🇳🇨",
  name: "New Caledonia",
  abbr: "NC",
  code: "687"
}, {
  icon: "🇳🇿",
  name: "New Zealand",
  abbr: "NZ",
  code: "64"
}, {
  icon: "🇳🇮",
  name: "Nicaragua",
  abbr: "NI",
  code: "505"
}, {
  icon: "🇳🇪",
  name: "Niger",
  abbr: "NE",
  code: "227"
}, {
  icon: "🇳🇬",
  name: "Nigeria",
  abbr: "NG",
  code: "234"
}, {
  icon: "🇳🇺",
  name: "Niue",
  abbr: "NU",
  code: "683"
}, {
  icon: "🇳🇫",
  name: "Norfolk Island",
  abbr: "NF",
  code: "672"
}, {
  icon: "🇲🇵",
  name: "Northern Mariana Islands",
  abbr: "MP",
  code: "1-670"
}, {
  icon: "🇳🇴",
  name: "Norway",
  abbr: "NO",
  code: "47"
}, {
  icon: "🇴🇲",
  name: "Oman",
  abbr: "OM",
  code: "968"
}, {
  icon: "🇵🇰",
  name: "Pakistan",
  abbr: "PK",
  code: "92"
}, {
  icon: "🇵🇼",
  name: "Palau",
  abbr: "PW",
  code: "680"
}, {
  icon: "🇵🇸",
  name: "Palestine, State of",
  abbr: "PS",
  code: "970"
}, {
  icon: "🇵🇦",
  name: "Panama",
  abbr: "PA",
  code: "507"
}, {
  icon: "🇵🇬",
  name: "Papua New Guinea",
  abbr: "PG",
  code: "675"
}, {
  icon: "🇵🇾",
  name: "Paraguay",
  abbr: "PY",
  code: "595"
}, {
  icon: "🇵🇪",
  name: "Peru",
  abbr: "PE",
  code: "51"
}, {
  icon: "🇵🇭",
  name: "Philippines",
  abbr: "PH",
  code: "63"
}, {
  icon: "🇵🇳",
  name: "Pitcairn",
  abbr: "PN",
  code: "870"
}, {
  icon: "🇵🇱",
  name: "Poland",
  abbr: "PL",
  code: "48"
}, {
  icon: "🇵🇹",
  name: "Portugal",
  abbr: "PT",
  code: "351"
}, {
  icon: "🇵🇷",
  name: "Puerto Rico",
  abbr: "PR",
  code: "1"
}, {
  icon: "🇶🇦",
  name: "Qatar",
  abbr: "QA",
  code: "974"
}, {
  icon: "🇷🇪",
  name: "Reunion",
  abbr: "RE",
  code: "262"
}, {
  icon: "🇷🇴",
  name: "Romania",
  abbr: "RO",
  code: "40"
}, {
  icon: "🇷🇺",
  name: "Russian Federation",
  abbr: "RU",
  code: "7"
}, {
  icon: "🇷🇼",
  name: "Rwanda",
  abbr: "RW",
  code: "250"
}, {
  icon: "🇧🇱",
  name: "Saint Barthelemy",
  abbr: "BL",
  code: "590"
}, {
  icon: "🇸🇭",
  name: "Saint Helena",
  abbr: "SH",
  code: "290"
}, {
  icon: "🇰🇳",
  name: "Saint Kitts and Nevis",
  abbr: "KN",
  code: "1-869"
}, {
  icon: "🇱🇨",
  name: "Saint Lucia",
  abbr: "LC",
  code: "1-758"
}, {
  icon: "🇲🇫",
  name: "Saint Martin (French part)",
  abbr: "MF",
  code: "590"
}, {
  icon: "🇵🇲",
  name: "Saint Pierre and Miquelon",
  abbr: "PM",
  code: "508"
}, {
  icon: "🇻🇨",
  name: "Saint Vincent and the Grenadines",
  abbr: "VC",
  code: "1-784"
}, {
  icon: "🇼🇸",
  name: "Samoa",
  abbr: "WS",
  code: "685"
}, {
  icon: "🇸🇲",
  name: "San Marino",
  abbr: "SM",
  code: "378"
}, {
  icon: "🇸🇹",
  name: "Sao Tome and Principe",
  abbr: "ST",
  code: "239"
}, {
  icon: "🇸🇦",
  name: "Saudi Arabia",
  abbr: "SA",
  code: "966"
}, {
  icon: "🇸🇳",
  name: "Senegal",
  abbr: "SN",
  code: "221"
}, {
  icon: "🇷🇸",
  name: "Serbia",
  abbr: "RS",
  code: "381"
}, {
  icon: "🇸🇨",
  name: "Seychelles",
  abbr: "SC",
  code: "248"
}, {
  icon: "🇸🇱",
  name: "Sierra Leone",
  abbr: "SL",
  code: "232"
}, {
  icon: "🇸🇬",
  name: "Singapore",
  abbr: "SG",
  code: "65"
}, {
  icon: "🇸🇽",
  name: "Sint Maarten (Dutch part)",
  abbr: "SX",
  code: "1-721"
}, {
  icon: "🇸🇰",
  name: "Slovakia",
  abbr: "SK",
  code: "421"
}, {
  icon: "🇸🇮",
  name: "Slovenia",
  abbr: "SI",
  code: "386"
}, {
  icon: "🇸🇧",
  name: "Solomon Islands",
  abbr: "SB",
  code: "677"
}, {
  icon: "🇸🇴",
  name: "Somalia",
  abbr: "SO",
  code: "252"
}, {
  icon: "🇿🇦",
  name: "South Africa",
  abbr: "ZA",
  code: "27"
}, {
  icon: "🇬🇸",
  name: "South Georgia and the South Sandwich Islands",
  abbr: "GS",
  code: "500"
}, {
  icon: "🇸🇸",
  name: "South Sudan",
  abbr: "SS",
  code: "211"
}, {
  icon: "🇪🇸",
  name: "Spain",
  abbr: "ES",
  code: "34"
}, {
  icon: "🇱🇰",
  name: "Sri Lanka",
  abbr: "LK",
  code: "94"
}, {
  icon: "🇸🇩",
  name: "Sudan",
  abbr: "SD",
  code: "249"
}, {
  icon: "🇸🇷",
  name: "Suriname",
  abbr: "SR",
  code: "597"
}, {
  icon: "🇸🇯",
  name: "Svalbard and Jan Mayen",
  abbr: "SJ",
  code: "47"
}, {
  icon: "🇸🇿",
  name: "Swaziland",
  abbr: "SZ",
  code: "268"
}, {
  icon: "🇸🇪",
  name: "Sweden",
  abbr: "SE",
  code: "46"
}, {
  icon: "🇨🇭",
  name: "Switzerland",
  abbr: "CH",
  code: "41"
}, {
  icon: "🇸🇾",
  name: "Syrian Arab Republic",
  abbr: "SY",
  code: "963"
}, {
  icon: "🇹🇼",
  name: "Taiwan, Province of China",
  abbr: "TW",
  code: "886"
}, {
  icon: "🇹🇯",
  name: "Tajikistan",
  abbr: "TJ",
  code: "992"
}, {
  icon: "🇹🇭",
  name: "Thailand",
  abbr: "TH",
  code: "66"
}, {
  icon: "🇹🇱",
  name: "Timor-Leste",
  abbr: "TL",
  code: "670"
}, {
  icon: "🇹🇬",
  name: "Togo",
  abbr: "TG",
  code: "228"
}, {
  icon: "🇹🇰",
  name: "Tokelau",
  abbr: "TK",
  code: "690"
}, {
  icon: "🇹🇴",
  name: "Tonga",
  abbr: "TO",
  code: "676"
}, {
  icon: "🇹🇹",
  name: "Trinidad and Tobago",
  abbr: "TT",
  code: "1-868"
}, {
  icon: "🇹🇳",
  name: "Tunisia",
  abbr: "TN",
  code: "216"
}, {
  icon: "🇹🇷",
  name: "Turkey",
  abbr: "TR",
  code: "90"
}, {
  icon: "🇹🇲",
  name: "Turkmenistan",
  abbr: "TM",
  code: "993"
}, {
  icon: "🇹🇨",
  name: "Turks and Caicos Islands",
  abbr: "TC",
  code: "1-649"
}, {
  icon: "🇹🇻",
  name: "Tuvalu",
  abbr: "TV",
  code: "688"
}, {
  icon: "🇺🇬",
  name: "Uganda",
  abbr: "UG",
  code: "256"
}, {
  icon: "🇺🇦",
  name: "Ukraine",
  abbr: "UA",
  code: "380"
}, {
  icon: "🇦🇪",
  name: "United Arab Emirates",
  abbr: "AE",
  code: "971"
}, {
  icon: "🇬🇧",
  name: "United Kingdom",
  abbr: "GB",
  code: "44"
}, {
  icon: "🇹🇿",
  name: "United Republic of Tanzania",
  abbr: "TZ",
  code: "255"
}, {
  icon: "🇺🇲",
  name: "United States",
  abbr: "US",
  code: "1",
  suggested: true
}, {
  icon: "🇺🇾",
  name: "Uruguay",
  abbr: "UY",
  code: "598"
}, {
  icon: "🇻🇮",
  name: "US Virgin Islands",
  abbr: "VI",
  code: "1-340"
}, {
  icon: "🇺🇿",
  name: "Uzbekistan",
  abbr: "UZ",
  code: "998"
}, {
  icon: "🇻🇺",
  name: "Vanuatu",
  abbr: "VU",
  code: "678"
}, {
  icon: "🇻🇪",
  name: "Venezuela",
  abbr: "VE",
  code: "58"
}, {
  icon: "🇻🇳",
  name: "Vietnam",
  abbr: "VN",
  code: "84"
}, {
  icon: "🇼🇫",
  name: "Wallis and Futuna",
  abbr: "WF",
  code: "681"
}, {
  icon: "🇪🇭",
  name: "Western Sahara",
  abbr: "EH",
  code: "212"
}, {
  icon: "🇾🇪",
  name: "Yemen",
  abbr: "YE",
  code: "967"
}, {
  icon: "🇿🇲",
  name: "Zambia",
  abbr: "ZM",
  code: "260"
}, {
  icon: "🇿🇼",
  name: "Zimbabwe",
  abbr: "ZW",
  code: "263"
}];
var groupedCountries = [{
  label: "Suggested",
  options: allCountries.filter(function(c) {
    return c.suggested;
  })
}, {
  label: "All Countries",
  options: allCountries.filter(function(c) {
    return !c.suggested;
  })
}];

// node_modules/@atlaskit/select/dist/esm/CountrySelect.js
var Opt = function Opt2(_ref2) {
  var children = _ref2.children, icon = _ref2.icon;
  return React25.createElement("div", {
    className: ax(["_1e0c1txw _4cvr1h6o _vwz4cjiy"])
  }, React25.createElement("span", {
    "aria-hidden": "true",
    className: ax(["_1wyb1cby _12l2u2gc"])
  }, icon), children);
};
var getOptionLabel5 = function getOptionLabel6(_ref2) {
  var abbr = _ref2.abbr, code = _ref2.code, name = _ref2.name;
  return "".concat(name, " (").concat(abbr.toUpperCase(), ") +").concat(code);
};
var getOptionValue5 = function getOptionValue6(opt) {
  return opt.abbr;
};
var controlLabel = function controlLabel2(opt) {
  return React25.createElement(Opt, {
    icon: opt.icon
  }, opt.abbr.toUpperCase());
};
var optionLabel = function optionLabel2(_ref3) {
  var abbr = _ref3.abbr, code = _ref3.code, icon = _ref3.icon, name = _ref3.name;
  return React25.createElement(Opt, {
    icon
  }, getOptionLabel5({
    abbr,
    code,
    name
  }));
};
var formatOptionLabel = function formatOptionLabel2(opt, _ref4) {
  var context = _ref4.context;
  return context === "value" ? controlLabel(opt) : optionLabel(opt);
};
var CountrySelect = function CountrySelect2(props) {
  var options2 = props.options;
  var countryOptions = options2 || groupedCountries;
  return React25.createElement(Select_default, _extends({
    isClearable: false,
    formatOptionLabel,
    getOptionLabel: getOptionLabel5,
    getOptionValue: getOptionValue5,
    isMulti: false,
    options: countryOptions
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};
var CountrySelect_default = CountrySelect;

// node_modules/@atlaskit/select/dist/esm/RadioSelect.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
var import_react29 = __toESM(require_react());
var _excluded12 = ["components"];
function ownKeys14(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread14(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys14(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys14(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var RadioSelect = import_react29.default.memo(function(_ref2) {
  var components2 = _ref2.components, props = _objectWithoutProperties(_ref2, _excluded12);
  var mergedComponents = (0, import_react29.useMemo)(function() {
    return _objectSpread14(_objectSpread14({}, components2), {}, {
      Option: RadioOption
    });
  }, [components2]);
  return import_react29.default.createElement(Select_default, _extends({}, props, {
    isMulti: false,
    components: mergedComponents
  }));
});
var RadioSelect_default = RadioSelect;

// node_modules/@atlaskit/select/dist/esm/PopupSelect/PopupSelect.js
init_extends();
init_objectWithoutProperties();
init_classCallCheck();
init_createClass();
init_possibleConstructorReturn();
init_getPrototypeOf();
init_inherits();
init_defineProperty();
var import_react45 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/react-focus-lock/dist/es2015/Combination.js
init_objectWithoutPropertiesLoose();
init_extends();
var import_react38 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
init_extends();
var import_react35 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react30 = __toESM(require_react());
function useCallbackRef(initialValue, callback) {
  var ref = (0, import_react30.useState)(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React27 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React27.useLayoutEffect : React27.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
var import_react31 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref2) {
  var _ref$children = _ref2.children, children = _ref$children === void 0 ? null : _ref$children;
  return import_react31.default.createElement(import_react31.Fragment, null, import_react31.default.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && import_react31.default.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = true ? {
  children: import_prop_types.default.node
} : {};

// node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}

// node_modules/use-sidecar/dist/es2015/hoc.js
var React29 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react32 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  return innerCreateMedium(defaults, middleware);
}
function createSidecarMedium(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options2);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React30 = __toESM(require_react());
var import_react33 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React31 = __toESM(require_react());
var SideCar = function(_a) {
  var sideCar2 = _a.sideCar, rest = __rest(_a, ["sideCar"]);
  if (!sideCar2) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar2.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React31.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;

// node_modules/react-focus-lock/dist/es2015/medium.js
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true,
  ssr: typeof document !== "undefined"
});

// node_modules/react-focus-lock/dist/es2015/scope.js
var import_react34 = __toESM(require_react());
var focusScope = (0, import_react34.createContext)(void 0);

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = (0, import_react35.forwardRef)(function FocusLockUI(props, parentRef) {
  var _extends2;
  var _useState = (0, import_react35.useState)(), realObserved = _useState[0], setObserved = _useState[1];
  var observed = (0, import_react35.useRef)();
  var isActive = (0, import_react35.useRef)(false);
  var originalFocusedElement = (0, import_react35.useRef)(null);
  var _useState2 = (0, import_react35.useState)({}), update = _useState2[1];
  var children = props.children, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$noFocusGuards = props.noFocusGuards, noFocusGuards = _props$noFocusGuards === void 0 ? false : _props$noFocusGuards, _props$persistentFocu = props.persistentFocus, persistentFocus = _props$persistentFocu === void 0 ? false : _props$persistentFocu, _props$crossFrame = props.crossFrame, crossFrame = _props$crossFrame === void 0 ? true : _props$crossFrame, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, _props$returnFocus = props.returnFocus, shouldReturnFocus = _props$returnFocus === void 0 ? false : _props$returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _useState3 = (0, import_react35.useState)({}), id = _useState3[0];
  var onActivation = (0, import_react35.useCallback)(function(_ref2) {
    var captureFocusRestore2 = _ref2.captureFocusRestore;
    if (!originalFocusedElement.current) {
      var _document;
      var activeElement = (_document = document) == null ? void 0 : _document.activeElement;
      originalFocusedElement.current = activeElement;
      if (activeElement !== document.body) {
        originalFocusedElement.current = captureFocusRestore2(activeElement);
      }
    }
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
    update();
  }, [onActivationCallback]);
  var onDeactivation = (0, import_react35.useCallback)(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
    update();
  }, [onDeactivationCallback]);
  var returnFocus = (0, import_react35.useCallback)(function(allowDefer) {
    var focusRestore = originalFocusedElement.current;
    if (focusRestore) {
      var returnFocusTo = (typeof focusRestore === "function" ? focusRestore() : focusRestore) || document.body;
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = (0, import_react35.useCallback)(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = (0, import_react35.useCallback)(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (true) {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    (0, import_react35.useEffect)(function() {
      if (!observed.current && typeof Container !== "string") {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends2 = {}, _extends2[FOCUS_DISABLED] = disabled && "disabled", _extends2[FOCUS_GROUP] = group, _extends2), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs([parentRef, setObserveNode]);
  var focusScopeValue = (0, import_react35.useMemo)(function() {
    return {
      observed,
      shards,
      enabled: !disabled,
      active: isActive.current
    };
  }, [disabled, isActive.current, shards, realObserved]);
  return import_react35.default.createElement(import_react35.Fragment, null, hasLeadingGuards && [
    import_react35.default.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    hasPositiveIndices ? import_react35.default.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && import_react35.default.createElement(SideCar2, {
    id,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions,
    noFocusGuards
  }), import_react35.default.createElement(Container, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), import_react35.default.createElement(focusScope.Provider, {
    value: focusScopeValue
  }, children)), hasTailingGuards && import_react35.default.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = true ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
  focusOptions: import_prop_types2.object,
  noFocusGuards: import_prop_types2.bool,
  hasPositiveIndices: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
var import_react37 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
init_setPrototypeOf();
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

// node_modules/react-clientside-effect/lib/index.es.js
init_defineProperty();
var import_react36 = __toESM(require_react());
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  if (true) {
    if (typeof reducePropsToState2 !== "function") {
      throw new Error("Expected reducePropsToState to be a function.");
    }
    if (typeof handleStateChangeOnClient2 !== "function") {
      throw new Error("Expected handleStateChangeOnClient to be a function.");
    }
  }
  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap(WrappedComponent) {
    if (true) {
      if (typeof WrappedComponent !== "function") {
        throw new Error("Expected WrappedComponent to be a React component.");
      }
    }
    var mountedInstances = [];
    var state;
    function emitChange() {
      state = reducePropsToState2(mountedInstances.map(function(instance) {
        return instance.props;
      }));
      handleStateChangeOnClient2(state);
    }
    var SideEffect = function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek() {
        return state;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index2 = mountedInstances.indexOf(this);
        mountedInstances.splice(index2, 1);
        emitChange();
      };
      _proto.render = function render() {
        return import_react36.default.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(import_react36.PureComponent);
    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
    return SideEffect;
  };
}
var index_es_default = withSideEffect;

// node_modules/focus-lock/dist/es2015/utils/array.js
var toArray = function(a) {
  var ret = Array(a.length);
  for (var i = 0; i < a.length; ++i) {
    ret[i] = a[i];
  }
  return ret;
};
var asArray = function(a) {
  return Array.isArray(a) ? a : [a];
};
var getFirst = function(a) {
  return Array.isArray(a) ? a[0] : a;
};

// node_modules/focus-lock/dist/es2015/utils/is.js
var isElementHidden = function(node2) {
  if (node2.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node2, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode2 = function(node2) {
  return node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    node2.parentNode.host
  ) : node2.parentNode;
};
var isTopNode = function(node2) {
  return node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE;
};
var isInert = function(node2) {
  return node2.hasAttribute("inert");
};
var isVisibleUncached = function(node2, checkParent) {
  return !node2 || isTopNode(node2) || !isElementHidden(node2) && !isInert(node2) && checkParent(getParentNode2(node2));
};
var isVisibleCached = function(visibilityCache, node2) {
  var cached = visibilityCache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node2, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node2, result);
  return result;
};
var isAutoFocusAllowedUncached = function(node2, checkParent) {
  return node2 && !isTopNode(node2) ? isAutoFocusAllowed(node2) ? checkParent(getParentNode2(node2)) : false : true;
};
var isAutoFocusAllowedCached = function(cache, node2) {
  var cached = cache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isAutoFocusAllowedUncached(node2, isAutoFocusAllowedCached.bind(void 0, cache));
  cache.set(node2, result);
  return result;
};
var getDataset = function(node2) {
  return node2.dataset;
};
var isHTMLButtonElement = function(node2) {
  return node2.tagName === "BUTTON";
};
var isHTMLInputElement = function(node2) {
  return node2.tagName === "INPUT";
};
var isRadioElement = function(node2) {
  return isHTMLInputElement(node2) && node2.type === "radio";
};
var notHiddenInput = function(node2) {
  return !((isHTMLInputElement(node2) || isHTMLButtonElement(node2)) && (node2.type === "hidden" || node2.disabled));
};
var isAutoFocusAllowed = function(node2) {
  var attribute = node2.getAttribute(FOCUS_NO_AUTOFOCUS);
  return ![true, "true", ""].includes(attribute);
};
var isGuard = function(node2) {
  var _a;
  return Boolean(node2 && ((_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.focusGuard));
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
var tabSort = function(a, b) {
  var aTab = Math.max(0, a.tabIndex);
  var bTab = Math.max(0, b.tabIndex);
  var tabDiff = aTab - bTab;
  var indexDiff = a.index - b.index;
  if (tabDiff) {
    if (!aTab) {
      return 1;
    }
    if (!bTab) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var getTabIndex = function(node2) {
  if (node2.tabIndex < 0) {
    if (!node2.hasAttribute("tabindex")) {
      return 0;
    }
  }
  return node2.tabIndex;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray(nodes).map(function(node2, index2) {
    var tabIndex = getTabIndex(node2);
    return {
      node: node2,
      index: index2,
      tabIndex: keepGuards && tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  // elements with explicit roles will also use explicit tabindex
  // '[role="button"]',
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
  return toArray((parent.shadowRoot || parent).children).reduce(function(acc, child) {
    return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
  }, []);
};
var getFocusablesWithIFrame = function(parent, withGuards) {
  var _a;
  if (parent instanceof HTMLIFrameElement && ((_a = parent.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {
    return getFocusables([parent.contentDocument.body], withGuards);
  }
  return [parent];
};
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    var _a;
    var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
    var focusableWithIframes = (_a = []).concat.apply(_a, focusableWithShadowDom.map(function(node2) {
      return getFocusablesWithIFrame(node2, withGuards);
    }));
    return acc.concat(
      // add all tabbables inside and within shadow DOMs in DOM order
      focusableWithIframes,
      // add if node is tabbable itself
      parent.parentNode ? toArray(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
        return node2 === parent;
      }) : []
    );
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes, visibilityCache) {
  return toArray(nodes).filter(function(node2) {
    return isVisibleCached(visibilityCache, node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var filterAutoFocusable = function(nodes, cache) {
  if (cache === void 0) {
    cache = /* @__PURE__ */ new Map();
  }
  return toArray(nodes).filter(function(node2) {
    return isAutoFocusAllowedCached(cache, node2);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getFocusableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};
var contains = function(scope, element) {
  if (scope.shadowRoot) {
    return contains(scope.shadowRoot, element);
  } else {
    if (Object.getPrototypeOf(scope).contains !== void 0 && Object.getPrototypeOf(scope).contains.call(scope, element)) {
      return true;
    }
    return toArray(scope.children).some(function(child) {
      var _a;
      if (child instanceof HTMLIFrameElement) {
        var iframeBody = (_a = child.contentDocument) === null || _a === void 0 ? void 0 : _a.body;
        if (iframeBody) {
          return contains(iframeBody, element);
        }
        return false;
      }
      return contains(child, element);
    });
  }
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l = nodes.length;
  for (var i = 0; i < l; i += 1) {
    for (var j = i + 1; j < l; j += 1) {
      var position = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index2) {
    return !contained.has(index2);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/safe.js
var safeProbe = function(cb) {
  try {
    return cb();
  } catch (e) {
    return void 0;
  }
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
var getActiveElement = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  if (!inDocument || !inDocument.activeElement) {
    return void 0;
  }
  var activeElement = inDocument.activeElement;
  return activeElement.shadowRoot ? getActiveElement(activeElement.shadowRoot) : activeElement instanceof HTMLIFrameElement && safeProbe(function() {
    return activeElement.contentWindow.document;
  }) ? getActiveElement(activeElement.contentWindow.document) : activeElement;
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame, activeElement) {
  return frame === activeElement;
};
var focusInsideIframe = function(topNode, activeElement) {
  return Boolean(toArray(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2, activeElement);
  }));
};
var focusInside = function(topNode, activeElement) {
  if (activeElement === void 0) {
    activeElement = getActiveElement(getFirst(topNode).ownerDocument);
  }
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).some(function(node2) {
    return contains(node2, activeElement) || focusInsideIframe(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
var focusIsHidden = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  var activeElement = getActiveElement(inDocument);
  if (!activeElement) {
    return false;
  }
  return toArray(inDocument.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node2) {
    return contains(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadioElement).filter(function(el) {
    return el.name === node2.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadioElement(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, node2) {
  return nodes.indexOf(correctNode(node2, nodes));
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, innerTabbables, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  if (activeIndex === -1) {
    if (lastNodeInside !== -1) {
      return lastNodeInside;
    }
    return NEW_FOCUS;
  }
  if (lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var currentFocusableIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var previousFocusableIndex = lastNode ? correctedNodes.indexOf(lastNode) : currentFocusableIndex;
  var tabbableNodes = correctedNodes.filter(function(node2) {
    return node2.tabIndex >= 0;
  });
  var currentTabbableIndex = activeElement !== void 0 ? tabbableNodes.indexOf(activeElement) : -1;
  var previousTabbableIndex = lastNode ? tabbableNodes.indexOf(lastNode) : currentTabbableIndex;
  var focusIndexDiff = currentTabbableIndex >= 0 && previousTabbableIndex >= 0 ? (
    // old/new are tabbables, measure distance in tabbable space
    previousTabbableIndex - currentTabbableIndex
  ) : (
    // or else measure in focusable space
    previousFocusableIndex - currentFocusableIndex
  );
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (innerTabbables.length === 0) {
    return lastNodeInside;
  }
  var returnFirstNode = pickFocusable(innerNodes, innerTabbables[0]);
  var returnLastNode = pickFocusable(innerNodes, innerTabbables[innerTabbables.length - 1]);
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(focusIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/utils/auto-focus.js
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    var _a;
    var autofocus = (_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.autofocus;
    return (
      // @ts-expect-error
      node2.autofocus || //
      autofocus !== void 0 && autofocus !== "false" || //
      autoFocusables.indexOf(node2) >= 0
    );
  };
};
var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
  var nodes = nodesIndexes.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var autoFocusable = filterAutoFocusable(nodes.filter(findAutoFocused(groups)));
  if (autoFocusable && autoFocusable.length) {
    return pickFirstFocus(autoFocusable);
  }
  return pickFirstFocus(filterAutoFocusable(orderedNodes));
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode.host || node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || contains(common, topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2, visibilityCache));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusSolver.js
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined);
};
var focusSolver = function(topNode, lastNode) {
  var activeElement = getActiveElement(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getFocusableNodes(entries, visibilityCache);
  var innerElements = anyFocusable.filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    return void 0;
  }
  var outerNodes = getFocusableNodes([commonParent], visibilityCache).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerFocusables = orderedInnerElements.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var innerTabbable = orderedInnerElements.filter(function(_a) {
    var tabIndex = _a.tabIndex;
    return tabIndex >= 0;
  }).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var newId = newFocus(innerFocusables, innerTabbable, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var focusNode = (
      // first try only tabbable, and the fallback to all focusable, as long as at least one element should be picked for focus
      pickAutofocus(anyFocusable, innerTabbable, allParentAutofocusables(entries, visibilityCache)) || pickAutofocus(anyFocusable, innerFocusables, allParentAutofocusables(entries, visibilityCache))
    );
    if (focusNode) {
      return { node: focusNode };
    } else {
      console.warn("focus-lock: cannot find any node to move focus into");
      return void 0;
    }
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/focusables.js
var expandFocusableNodes = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var outerNodes = orderByTabIndex(getFocusables([commonParent], true), true, true);
  var innerElements = getFocusables(entries, false);
  return outerNodes.map(function(_a) {
    var node2 = _a.node, index2 = _a.index;
    return {
      node: node2,
      index: index2,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};

// node_modules/focus-lock/dist/es2015/commands.js
var focusOn = function(target, focusOptions) {
  if (!target) {
    return;
  }
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};

// node_modules/focus-lock/dist/es2015/moveFocusInside.js
var guardCount = 0;
var lockDisabled = false;
var moveFocusInside = function(topNode, lastNode, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var focusable = focusSolver(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options2.focusOptions);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/return-focus.js
function weakRef(value) {
  if (!value)
    return null;
  if (typeof WeakRef === "undefined") {
    return function() {
      return value || null;
    };
  }
  var w2 = value ? new WeakRef(value) : null;
  return function() {
    return (w2 === null || w2 === void 0 ? void 0 : w2.deref()) || null;
  };
}
var recordElementLocation = function(element) {
  if (!element) {
    return null;
  }
  var stack = [];
  var currentElement = element;
  while (currentElement && currentElement !== document.body) {
    stack.push({
      current: weakRef(currentElement),
      parent: weakRef(currentElement.parentElement),
      left: weakRef(currentElement.previousElementSibling),
      right: weakRef(currentElement.nextElementSibling)
    });
    currentElement = currentElement.parentElement;
  }
  return {
    element: weakRef(element),
    stack,
    ownerDocument: element.ownerDocument
  };
};
var restoreFocusTo = function(location) {
  var _a, _b, _c, _d, _e;
  if (!location) {
    return void 0;
  }
  var stack = location.stack, ownerDocument = location.ownerDocument;
  var visibilityCache = /* @__PURE__ */ new Map();
  for (var _i = 0, stack_1 = stack; _i < stack_1.length; _i++) {
    var line = stack_1[_i];
    var parent_1 = (_a = line.parent) === null || _a === void 0 ? void 0 : _a.call(line);
    if (parent_1 && ownerDocument.contains(parent_1)) {
      var left = (_b = line.left) === null || _b === void 0 ? void 0 : _b.call(line);
      var savedCurrent = line.current();
      var current = parent_1.contains(savedCurrent) ? savedCurrent : void 0;
      var right = (_c = line.right) === null || _c === void 0 ? void 0 : _c.call(line);
      var focusables = getTabbableNodes([parent_1], visibilityCache);
      var aim = (
        // that is element itself
        (_e = (_d = current !== null && current !== void 0 ? current : (
          // or something in it's place
          left === null || left === void 0 ? void 0 : left.nextElementSibling
        )) !== null && _d !== void 0 ? _d : (
          // or somebody to the right, still close enough
          right
        )) !== null && _e !== void 0 ? _e : (
          // or somebody to the left, something?
          left
        )
      );
      while (aim) {
        for (var _f = 0, focusables_1 = focusables; _f < focusables_1.length; _f++) {
          var focusable = focusables_1[_f];
          if (aim === null || aim === void 0 ? void 0 : aim.contains(focusable.node)) {
            return focusable.node;
          }
        }
        aim = aim.nextElementSibling;
      }
      if (focusables.length) {
        return focusables[0].node;
      }
    }
  }
  return void 0;
};
var captureFocusRestore = function(targetElement) {
  var location = recordElementLocation(targetElement);
  return function() {
    return restoreFocusTo(location);
  };
};

// node_modules/focus-lock/dist/es2015/sibling.js
var getRelativeFocusable = function(element, scope, useTabbables) {
  if (!element || !scope) {
    console.error("no element or scope given");
    return {};
  }
  var shards = asArray(scope);
  if (shards.every(function(shard) {
    return !contains(shard, element);
  })) {
    console.error("Active element is not contained in the scope");
    return {};
  }
  var focusables = useTabbables ? getTabbableNodes(shards, /* @__PURE__ */ new Map()) : getFocusableNodes(shards, /* @__PURE__ */ new Map());
  var current = focusables.findIndex(function(_a) {
    var node2 = _a.node;
    return node2 === element;
  });
  if (current === -1) {
    return void 0;
  }
  return {
    prev: focusables[current - 1],
    next: focusables[current + 1],
    first: focusables[0],
    last: focusables[focusables.length - 1]
  };
};
var getBoundary = function(shards, useTabbables) {
  var set = useTabbables ? getTabbableNodes(asArray(shards), /* @__PURE__ */ new Map()) : getFocusableNodes(asArray(shards), /* @__PURE__ */ new Map());
  return {
    first: set[0],
    last: set[set.length - 1]
  };
};
var defaultOptions = function(options2) {
  return Object.assign({
    scope: document.body,
    cycle: true,
    onlyTabbable: true
  }, options2);
};
var moveFocus = function(fromElement, options2, cb) {
  if (options2 === void 0) {
    options2 = {};
  }
  var newOptions = defaultOptions(options2);
  var solution = getRelativeFocusable(fromElement, newOptions.scope, newOptions.onlyTabbable);
  if (!solution) {
    return;
  }
  var target = cb(solution, newOptions.cycle);
  if (target) {
    focusOn(target.node, newOptions.focusOptions);
  }
};
var focusNextElement = function(fromElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  moveFocus(fromElement, options2, function(_a, cycle) {
    var next = _a.next, first = _a.first;
    return next || cycle && first;
  });
};
var focusPrevElement = function(fromElement, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  moveFocus(fromElement, options2, function(_a, cycle) {
    var prev = _a.prev, last = _a.last;
    return prev || cycle && last;
  });
};
var pickBoundary = function(scope, options2, what) {
  var _a;
  var boundary = getBoundary(scope, (_a = options2.onlyTabbable) !== null && _a !== void 0 ? _a : true);
  var node2 = boundary[what];
  if (node2) {
    focusOn(node2.node, options2.focusOptions);
  }
};
var focusFirstElement = function(scope, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  pickBoundary(scope, options2, "first");
};
var focusLastElement = function(scope, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  pickBoundary(scope, options2, "last");
};

// node_modules/react-focus-lock/dist/es2015/util.js
function deferAction(action) {
  setTimeout(action, 1);
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var tryRestoreFocus = function tryRestoreFocus2() {
  return null;
};
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var windowFocused = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el, boundary) {
  return el && (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var getNodeFocusables = function getNodeFocusables2(nodes) {
  return getFocusableNodes(nodes, /* @__PURE__ */ new Map());
};
var isNotFocusable = function isNotFocusable2(node2) {
  return !getNodeFocusables([node2.parentNode]).some(function(el) {
    return el.node === node2;
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions, noFocusGuards = _lastActiveTrap.noFocusGuards;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    if (focusOnBody() && lastActiveFocus && lastActiveFocus !== document.body) {
      if (!document.body.contains(lastActiveFocus) || isNotFocusable(lastActiveFocus)) {
        var newTarget = tryRestoreFocus();
        if (newTarget) {
          newTarget.focus();
        }
      }
    }
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      var shouldForceRestoreFocus = function shouldForceRestoreFocus2() {
        if (!focusWasOutside(crossFrame) || !noFocusGuards || !lastActiveFocus || windowFocused) {
          return false;
        }
        var nodes = getNodeFocusables(workingArea);
        var lastIndex = nodes.findIndex(function(_ref2) {
          var node2 = _ref2.node;
          return node2 === lastActiveFocus;
        });
        return lastIndex === 0 || lastIndex === nodes.length - 1;
      };
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || shouldForceRestoreFocus() || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !(focusInside(workingArea) || activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = moveFocusInside(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          lastActiveFocus = document && document.activeElement;
          if (lastActiveFocus !== document.body) {
            tryRestoreFocus = captureFocusRestore(lastActiveFocus);
          }
          focusWasOutsideWindow = false;
        }
      }
      if (document && activeElement !== document.activeElement && document.querySelector("[data-focus-auto-guard]")) {
        var newActiveElement = document && document.activeElement;
        var allNodes = expandFocusableNodes(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref3) {
            var guard = _ref3.guard, node2 = _ref3.node;
            return guard && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref4) {
            var node2 = _ref4.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref5) {
  var children = _ref5.children;
  return import_react37.default.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = true ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowFocus = function onWindowFocus2() {
  windowFocused = true;
};
var onWindowBlur = function onWindowBlur2() {
  windowFocused = false;
  focusWasOutsideWindow = "just";
  deferAction(function() {
    focusWasOutsideWindow = "meanwhile";
  });
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("focus", onWindowFocus);
  window.addEventListener("blur", onWindowBlur);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("focus", onWindowFocus);
  window.removeEventListener("blur", onWindowBlur);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref6) {
    var disabled = _ref6.disabled;
    return !disabled;
  });
}
var focusLockAPI = {
  moveFocusInside,
  focusInside,
  focusNextElement,
  focusPrevElement,
  focusFirstElement,
  focusLastElement,
  captureFocusRestore
};
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref7) {
      var id = _ref7.id;
      return id === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation(focusLockAPI);
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb) {
  return cb(focusLockAPI);
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = (0, import_react38.forwardRef)(function FocusLockUICombination(props, ref) {
  return import_react38.default.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose(_ref, ["sideCar"]);
FocusLockCombination.propTypes = true ? propTypes : {};
var Combination_default = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
init_extends();
var import_react39 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref2) {
  var _ref$disabled = _ref2.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, children = _ref2.children, _ref$className = _ref2.className, className = _ref$className === void 0 ? void 0 : _ref$className;
  return import_react39.default.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = true ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
init_extends();
var import_react40 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  (0, import_react40.useEffect)(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref2) {
  var _ref$disabled = _ref2.disabled, isDisabled = _ref$disabled === void 0 ? false : _ref$disabled, className = _ref2.className, children = _ref2.children;
  var ref = (0, import_react40.useRef)(null);
  useFocusInside(isDisabled ? void 0 : ref);
  return import_react40.default.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = true ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
init_extends();
var import_react41 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref2) {
  var children = _ref2.children, className = _ref2.className;
  return import_react41.default.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = true ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};

// node_modules/react-focus-lock/dist/es2015/use-focus-scope.js
init_extends();
var import_react42 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/use-focus-state.js
var import_react43 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/nano-events.js
var createNanoEvents = function createNanoEvents2() {
  return {
    emit: function emit(event) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      for (var i = 0, callbacks = this.events[event] || [], length = callbacks.length; i < length; i++) {
        callbacks[i].apply(callbacks, args);
      }
    },
    events: {},
    on: function on(event, cb) {
      var _this$events, _this = this;
      ((_this$events = this.events)[event] || (_this$events[event] = [])).push(cb);
      return function() {
        var _this$events$event;
        _this.events[event] = (_this$events$event = _this.events[event]) == null ? void 0 : _this$events$event.filter(function(i) {
          return cb !== i;
        });
      };
    }
  };
};

// node_modules/react-focus-lock/dist/es2015/use-focus-state.js
var mainbus = createNanoEvents();

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default = Combination_default;

// node_modules/shallow-equal/dist/index.modern.mjs
function shallowEqualObjects(objA, objB) {
  if (objA === objB) {
    return true;
  }
  if (!objA || !objB) {
    return false;
  }
  const aKeys = Object.keys(objA);
  const bKeys = Object.keys(objB);
  const len = aKeys.length;
  if (bKeys.length !== len) {
    return false;
  }
  for (let i = 0; i < len; i++) {
    const key = aKeys[i];
    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
      return false;
    }
  }
  return true;
}

// node_modules/@atlaskit/select/dist/esm/PopupSelect/PopupSelect.js
init_esm();

// node_modules/@atlaskit/select/dist/esm/PopupSelect/components.js
init_extends();
init_objectWithoutProperties();
init_defineProperty();
var React39 = __toESM(require_react());
init_runtime();
var import_react44 = __toESM(require_react());
var import_search_editor_search = __toESM(require_search_editor_search());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/select/dist/esm/PopupSelect/components.compiled.css";
var _excluded13 = ["innerRef", "innerProps"];
function ownKeys15(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread15(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys15(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys15(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var MenuDialog = (0, import_react44.forwardRef)(function(_ref2, ref) {
  var children = _ref2.children, id = _ref2.id, style = _ref2.style, testId = _ref2.testId;
  return React39.createElement("div", {
    ref,
    id,
    "data-testid": testId && "".concat(testId, "--menu"),
    className: ax(["_2rko12b0 _1pby16oo _bfhk1bhr _16qsu838"]),
    style: _objectSpread15(_objectSpread15({}, style), {}, {
      "--_z6sjud": cssCustomPropertyValue("var(--ds-shadow-overlay, ".concat("0 0 0 1px ".concat(N40A, ", 0 4px 11px ").concat(N40A), ")"))
    })
  }, children);
});
var DropdownIndicator3 = function DropdownIndicator4() {
  return React39.createElement("div", {
    className: ax(["_1bsbzwfg _12l2v77o _y3gn1h6o"])
  }, React39.createElement(import_search_editor_search.default, {
    color: "currentColor",
    label: ""
  }));
};
var Control3 = function Control4(_ref2) {
  var innerRef = _ref2.innerRef, innerProps = _ref2.innerProps, props = _objectWithoutProperties(_ref2, _excluded13);
  return React39.createElement("div", {
    ref: innerRef,
    className: ax(["_85i51b66 _1q51u2gc _y4tiu2gc _bozgu2gc"])
  }, React39.createElement(components.Control, _extends({}, props, {
    innerProps
  })));
};
var DummyControl = function DummyControl2(props) {
  return React39.createElement(visually_hidden_default, null, React39.createElement(components.Control, props));
};
var Menu3 = function Menu4(_ref3) {
  var children = _ref3.children, innerProps = _ref3.innerProps;
  return React39.createElement("div", innerProps, children);
};
var ClearIndicator3 = function ClearIndicator4(props) {
  return React39.createElement(components.ClearIndicator, props);
};
var MultiValueRemove2 = function MultiValueRemove3(props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    React39.createElement(components.MultiValueRemove, props)
  );
};
var defaultComponents3 = {
  Control: Control3,
  DropdownIndicator: DropdownIndicator3,
  Menu: Menu3,
  ClearIndicator: ClearIndicator3,
  MultiValueRemove: MultiValueRemove2
};

// node_modules/@atlaskit/select/dist/esm/PopupSelect/notify-open-layer-observer.js
function NotifyOpenLayerObserver2(_ref2) {
  var isOpen = _ref2.isOpen, onClose = _ref2.onClose;
  useNotifyOpenLayerObserver({
    isOpen,
    onClose
  });
  return null;
}

// node_modules/@atlaskit/select/dist/esm/PopupSelect/PopupSelect.js
var _excluded14 = ["footer", "label", "maxMenuWidth", "minMenuWidth", "placeholder", "target", "testId", "onMenuOpen", "onMenuClose"];
function ownKeys16(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread16(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys16(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys16(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _callSuper2(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct2() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct2() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct2 = function _isNativeReflectConstruct3() {
    return !!t;
  })();
}
var canUseDOM2 = function canUseDOM3() {
  return Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
};
var modifiers = [{
  name: "offset",
  options: {
    offset: [0, 8]
  }
}, {
  name: "preventOverflow",
  enabled: true,
  options: {
    padding: 5,
    boundary: "clippingParents",
    altAxis: true,
    altBoundary: true
  }
}];
var newDefaultModifiers = [{
  name: "offset",
  options: {
    offset: [0, 8]
  }
}, {
  name: "preventOverflow",
  enabled: true,
  options: {
    padding: 5,
    boundary: "clippingParents",
    rootBoundary: "document"
  }
}, {
  name: "flip",
  options: {
    flipVariations: false,
    padding: 5,
    boundary: "clippingParents",
    rootBoundary: "viewport"
  }
}];
var defaultPopperProps = {
  modifiers,
  placement: "bottom-start"
};
var newDefaultPopperProps = {
  modifiers: newDefaultModifiers,
  placement: "bottom-start"
};
var isEmpty = function isEmpty2(obj) {
  return Object.keys(obj).length === 0;
};
var PopupSelect = function(_PureComponent) {
  function PopupSelect2() {
    var _this$defaultOpenStat;
    var _this;
    _classCallCheck(this, PopupSelect2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper2(this, PopupSelect2, [].concat(args));
    _defineProperty(_this, "menuRef", null);
    _defineProperty(_this, "selectRef", null);
    _defineProperty(_this, "targetRef", null);
    _defineProperty(_this, "unbindWindowClick", null);
    _defineProperty(_this, "unbindWindowKeydown", null);
    _defineProperty(_this, "defaultStyles", {
      groupHeading: function groupHeading(provided) {
        return _objectSpread16(_objectSpread16({}, provided), {}, {
          color: "var(--ds-text-subtlest, ".concat(N80, ")")
        });
      }
    });
    _defineProperty(_this, "isOpenControlled", _this.props.isOpen !== void 0);
    _defineProperty(_this, "defaultOpenState", _this.isOpenControlled ? _this.props.isOpen : _this.props.defaultIsOpen);
    _defineProperty(_this, "state", {
      focusLockEnabled: false,
      isOpen: (_this$defaultOpenStat = _this.defaultOpenState) !== null && _this$defaultOpenStat !== void 0 ? _this$defaultOpenStat : false,
      mergedComponents: defaultComponents3,
      mergedPopperProps: fg("platform_dst_nav4_layering_in_main_slot_fixes") ? newDefaultPopperProps : defaultPopperProps
    });
    _defineProperty(_this, "handleTargetKeyDown", function(event) {
      switch (event.key) {
        case "ArrowDown":
          _this.open();
          break;
        default:
      }
    });
    _defineProperty(_this, "handleKeyDown", function(event) {
      var tabEvent = event.key === "Tab" && event.shiftKey || event.key === "Tab";
      if (_this.props.shouldCloseMenuOnTab && tabEvent) {
        _this.close();
      }
      switch (event.key) {
        case "Escape":
        case "Esc":
          _this.close();
          break;
        default:
      }
      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(event);
      }
    });
    _defineProperty(_this, "handleClick", function(_ref2) {
      var target = _ref2.target;
      var isOpen = _this.state.isOpen;
      if (!(target instanceof Element)) {
        return;
      }
      if (isOpen && _this.menuRef && !_this.menuRef.contains(target)) {
        _this.close();
      }
      if (!isOpen && _this.targetRef && _this.targetRef.contains(target)) {
        _this.open();
      }
    });
    _defineProperty(_this, "handleSelectChange", function(value, actionMeta) {
      var _this$props = _this.props, closeMenuOnSelect = _this$props.closeMenuOnSelect, onChange2 = _this$props.onChange;
      if (closeMenuOnSelect && actionMeta.action !== "clear") {
        _this.close();
      }
      if (onChange2) {
        onChange2(value, actionMeta);
      }
    });
    _defineProperty(_this, "handleFirstPopperUpdate", function() {
      _this.setState({
        focusLockEnabled: true
      });
    });
    _defineProperty(_this, "open", function(options2) {
      var _this$props2 = _this.props, onOpen = _this$props2.onOpen, onMenuOpen = _this$props2.onMenuOpen;
      if (!(options2 !== null && options2 !== void 0 && options2.controlOverride) && _this.isOpenControlled) {
        return;
      }
      if (onOpen) {
        onOpen();
      }
      if (onMenuOpen) {
        onMenuOpen();
      }
      _this.setState({
        isOpen: true
      }, function() {
        if (_this.selectRef) {
          var _this$selectRef$selec;
          (_this$selectRef$selec = _this.selectRef.select) === null || _this$selectRef$selec === void 0 || _this$selectRef$selec.openMenu("first");
        }
      });
      if (typeof window === "undefined") {
        return;
      }
      _this.unbindWindowKeydown = (0, import_bind_event_listener.bind)(window, {
        type: "keydown",
        listener: _this.handleKeyDown,
        options: {
          capture: true
        }
      });
    });
    _defineProperty(_this, "close", function(options2) {
      var _this$unbindWindowKey, _this2;
      var _this$props3 = _this.props, onClose = _this$props3.onClose, onMenuClose = _this$props3.onMenuClose;
      if (!(options2 !== null && options2 !== void 0 && options2.controlOverride) && _this.isOpenControlled) {
        return;
      }
      if (onClose) {
        onClose();
      }
      if (onMenuClose) {
        onMenuClose();
      }
      _this.setState({
        isOpen: false
      });
      _this.setState({
        focusLockEnabled: false
      });
      if (_this.targetRef != null) {
        _this.targetRef.focus();
      }
      if (typeof window === "undefined") {
        return;
      }
      (_this$unbindWindowKey = (_this2 = _this).unbindWindowKeydown) === null || _this$unbindWindowKey === void 0 || _this$unbindWindowKey.call(_this2);
      _this.unbindWindowKeydown = null;
    });
    _defineProperty(_this, "resolveTargetRef", function(popperRef) {
      return function(ref) {
        if (!_this.targetRef && popperRef && ref) {
          _this.targetRef = ref;
          if (typeof popperRef === "function") {
            popperRef(ref);
          } else {
            popperRef.current = ref;
          }
        }
      };
    });
    _defineProperty(_this, "resolveMenuRef", function(popperRef) {
      return function(ref) {
        _this.menuRef = ref;
        if (typeof popperRef === "function") {
          popperRef(ref);
        } else {
          popperRef.current = ref;
        }
      };
    });
    _defineProperty(_this, "getSelectRef", function(ref) {
      _this.selectRef = ref;
    });
    _defineProperty(_this, "getItemCount", function() {
      var options2 = _this.props.options;
      var count = 0;
      options2.forEach(function(groupOrOption) {
        if (groupOrOption.options) {
          groupOrOption.options.forEach(function() {
            return count++;
          });
        } else {
          count++;
        }
      });
      return count;
    });
    _defineProperty(_this, "getMaxHeight", function() {
      var _this$selectRef$selec2;
      var maxMenuHeight = _this.props.maxMenuHeight;
      if (!_this.selectRef) {
        return maxMenuHeight;
      }
      var showSearchControl = _this.showSearchControl();
      var controlRef = (_this$selectRef$selec2 = _this.selectRef.select) === null || _this$selectRef$selec2 === void 0 ? void 0 : _this$selectRef$selec2.controlRef;
      var offsetHeight = showSearchControl && controlRef ? controlRef.offsetHeight : 0;
      var maxHeight = maxMenuHeight - offsetHeight;
      return maxHeight;
    });
    _defineProperty(_this, "showSearchControl", function() {
      var _this$props4 = _this.props, searchThreshold = _this$props4.searchThreshold, isSearchable = _this$props4.isSearchable;
      return isSearchable && _this.getItemCount() > searchThreshold;
    });
    _defineProperty(_this, "renderSelect", function(id) {
      var _this$props5 = _this.props, footer = _this$props5.footer, label = _this$props5.label, maxMenuWidth = _this$props5.maxMenuWidth, minMenuWidth = _this$props5.minMenuWidth, placeholder = _this$props5.placeholder, target = _this$props5.target, testId = _this$props5.testId, onMenuOpen = _this$props5.onMenuOpen, onMenuClose = _this$props5.onMenuClose, props = _objectWithoutProperties(_this$props5, _excluded14);
      var _this$state = _this.state, focusLockEnabled = _this$state.focusLockEnabled, isOpen = _this$state.isOpen, mergedComponents = _this$state.mergedComponents, mergedPopperProps = _this$state.mergedPopperProps;
      var showSearchControl = _this.showSearchControl();
      var portalDestination = canUseDOM2() ? document.body : null;
      if (!portalDestination || !isOpen) {
        return null;
      }
      var selectComponents = _objectSpread16(_objectSpread16({}, mergedComponents), {}, {
        Control: showSearchControl ? mergedComponents.Control : DummyControl
      });
      var getLabel = function getLabel2() {
        if (label) {
          return label;
        } else if (typeof placeholder === "string") {
          return placeholder;
        }
      };
      var popper = import_react45.default.createElement(Popper, _extends({}, mergedPopperProps, {
        onFirstUpdate: function onFirstUpdate(state) {
          var _mergedPopperProps$on;
          _this.handleFirstPopperUpdate();
          (_mergedPopperProps$on = mergedPopperProps.onFirstUpdate) === null || _mergedPopperProps$on === void 0 || _mergedPopperProps$on.call(mergedPopperProps, state);
        }
      }), function(_ref2) {
        var placement = _ref2.placement, ref = _ref2.ref, style = _ref2.style;
        return import_react45.default.createElement(
          MenuDialog,
          {
            style: _objectSpread16(_objectSpread16({}, style), {}, {
              maxWidth: maxMenuWidth,
              minWidth: minMenuWidth
            }),
            "data-placement": placement,
            id,
            testId,
            ref: _this.resolveMenuRef(ref)
          },
          import_react45.default.createElement(es2015_default, {
            disabled: !focusLockEnabled,
            returnFocus: true
          }, import_react45.default.createElement(Select_default, _extends({
            label: getLabel(),
            backspaceRemovesValue: false,
            controlShouldRenderValue: false,
            isClearable: false,
            tabSelectsValue: false,
            menuIsOpen: true,
            placeholder,
            ref: _this.getSelectRef
          }, props, {
            isSearchable: showSearchControl,
            styles: mergeStyles(_this.defaultStyles, props.styles || {}),
            maxMenuHeight: _this.getMaxHeight(),
            components: selectComponents,
            onChange: _this.handleSelectChange,
            testId
            // Note: We are intentionally not using `onMenuClose={this.close}` here, due to state management conflicts
            // between PopupSelect's popup and the internal select menu. This can result in the PopupSelect closing
            // or opening unexpectedly.
          })), footer)
        );
      });
      return mergedPopperProps.strategy === "fixed" ? popper : (0, import_react_dom2.createPortal)(popper, portalDestination);
    });
    _defineProperty(_this, "handleOpenLayerObserverCloseSignal", function() {
      _this.close();
    });
    return _this;
  }
  _inherits(PopupSelect2, _PureComponent);
  return _createClass(PopupSelect2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (typeof window === "undefined") {
        return;
      }
      this.unbindWindowClick = (0, import_bind_event_listener.bind)(window, {
        type: "click",
        listener: this.handleClick,
        options: {
          capture: true
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$unbindWindowCli, _this$unbindWindowKey2;
      if (typeof window === "undefined") {
        return;
      }
      (_this$unbindWindowCli = this.unbindWindowClick) === null || _this$unbindWindowCli === void 0 || _this$unbindWindowCli.call(this);
      this.unbindWindowClick = null;
      (_this$unbindWindowKey2 = this.unbindWindowKeydown) === null || _this$unbindWindowKey2 === void 0 || _this$unbindWindowKey2.call(this);
      this.unbindWindowKeydown = null;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var isOpen = this.props.isOpen;
      if (prevProps.isOpen !== isOpen) {
        if (isOpen === true) {
          this.open({
            controlOverride: true
          });
        } else if (isOpen === false) {
          this.close({
            controlOverride: true
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var target = this.props.target;
      var isOpen = this.state.isOpen;
      return import_react45.default.createElement(Manager, null, import_react45.default.createElement(IdProvider, {
        postfix: "-popup-select"
      }, function(_ref3) {
        var id = _ref3.id;
        return import_react45.default.createElement(import_react45.default.Fragment, null, import_react45.default.createElement(Reference, null, function(_ref4) {
          var ref = _ref4.ref;
          return target && target({
            isOpen,
            onKeyDown: _this3.handleTargetKeyDown,
            ref: _this3.resolveTargetRef(ref),
            // Should technically be 'dialog' by default instead of 'true' via AriaAttributes, but will require further changes.
            // See go/DSP-22283
            "aria-haspopup": "true",
            "aria-expanded": isOpen,
            "aria-controls": isOpen ? id : void 0
          });
        }), _this3.renderSelect(id));
      }), import_react45.default.createElement(NotifyOpenLayerObserver2, {
        isOpen: this.state.isOpen,
        onClose: this.handleOpenLayerObserverCloseSignal
      }));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var newState = {};
      var mergedPopperProps = _objectSpread16(_objectSpread16({}, fg("platform_dst_nav4_layering_in_main_slot_fixes") ? newDefaultPopperProps : defaultPopperProps), props.popperProps);
      if (!shallowEqualObjects(mergedPopperProps, state.mergedPopperProps)) {
        newState.mergedPopperProps = mergedPopperProps;
      }
      var mergedComponents = _objectSpread16(_objectSpread16({}, defaultComponents3), props.components);
      if (!shallowEqualObjects(mergedComponents, state.mergedComponents)) {
        newState.mergedComponents = mergedComponents;
      }
      if (!isEmpty(newState)) {
        return newState;
      }
      return null;
    }
  }]);
}(import_react45.PureComponent);
_defineProperty(PopupSelect, "defaultProps", {
  closeMenuOnSelect: true,
  shouldCloseMenuOnTab: true,
  components: {},
  maxMenuHeight: 300,
  maxMenuWidth: 440,
  minMenuWidth: 220,
  popperProps: {},
  isSearchable: true,
  searchThreshold: 5,
  styles: {},
  options: []
});
export {
  AsyncCreatableSelect_default as AsyncCreatableSelect,
  AsyncSelect_default as AsyncSelect,
  CheckboxOption,
  CheckboxSelect_default as CheckboxSelect,
  CountrySelect_default as CountrySelect,
  CreatableSelect_default as CreatableSelect,
  PopupSelect,
  RadioOption,
  RadioSelect_default as RadioSelect,
  SelectWithoutAnalytics,
  components,
  createFilter,
  Select_default as default,
  isOptionsGrouped,
  mergeStyles,
  useAsync,
  useCreatable
};
//# sourceMappingURL=@atlaskit_select.js.map
