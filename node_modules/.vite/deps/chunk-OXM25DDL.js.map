{
  "version": 3,
  "sources": ["../../@atlaskit/icon/core/status-success.js", "../../@atlaskit/heading/dist/esm/heading.partial.js", "../../@atlaskit/heading/dist/esm/heading-context.js"],
  "sourcesContent": ["/**\n * THIS FILE WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::174472a7e38932dc7a97866e0be8034a>>\n * @codegenCommand yarn build:icon-glyphs\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _baseNew = _interopRequireDefault(require(\"@atlaskit/icon/base-new\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * Icon: \"StatusSuccess\".\n * Category: single-purpose\n * Location: @atlaskit/icon\n * Usage guidance: Reserved for success statuses and messaging. Filled status icons provide higher visual contrast to draw attention to important information.\n * - [Examples](https://atlaskit.atlassian.com/packages/design-system/icon)\n * - [Code](https://atlaskit.atlassian.com/packages/design-system/icon/docs/custom-icons)\n */\nconst StatusSuccessIcon = props => /*#__PURE__*/_react.default.createElement(_baseNew.default, Object.assign({\n  name: \"StatusSuccessIcon\",\n  dangerouslySetGlyph: `<path fill=\"currentcolor\" fill-rule=\"evenodd\" d=\"M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0M6.75 9.828 4.826 7.52l-1.152.96 2.5 3a.75.75 0 0 0 1.152 0l5-6-1.152-.96z\" clip-rule=\"evenodd\"/>`\n  // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props\n}, props));\nStatusSuccessIcon.displayName = 'StatusSuccessIcon';\nvar _default = exports.default = StatusSuccessIcon;", "/* heading.partial.tsx generated by @compiled/babel-plugin v0.36.1 */\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"./heading.partial.compiled.css\";\nimport * as React from 'react';\nimport { ax, ix } from \"@compiled/react/runtime\";\nimport { forwardRef } from 'react';\n// eslint-disable-next-line @atlaskit/design-system/no-emotion-primitives -- to be migrated to @atlaskit/primitives/compiled â€“ go/akcss\nimport { UNSAFE_inverseColorMap } from '@atlaskit/primitives';\nimport { UNSAFE_useSurface } from '@atlaskit/primitives/compiled';\nimport { useHeading } from './heading-context';\nvar sizeTagMap = {\n  xxlarge: 'h1',\n  xlarge: 'h1',\n  large: 'h2',\n  medium: 'h3',\n  small: 'h4',\n  xsmall: 'h5',\n  xxsmall: 'h6'\n};\nvar styles = {\n  reset: \"_1mouidpf _1dyz4jg8 _1p1dglyw\"\n};\nvar headingColorStylesMap = {\n  'color.text': \"_syaz1fxt\",\n  'color.text.inverse': \"_syaz15cr\",\n  'color.text.warning.inverse': \"_syazal3n\"\n};\n\n/**\n * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}\n * @codegen <<SignedSource::c47bed69b7a147a63fdb8c394e98514a>>\n * @codegenId typography\n * @codegenCommand yarn workspace @atlaskit/heading codegen\n */\nvar headingSizeStylesMap = {\n  xxlarge: \"_11c84xcc\",\n  xlarge: \"_11c81c04\",\n  large: \"_11c8nf1z\",\n  medium: \"_11c8lodh\",\n  small: \"_11c8nbxd\",\n  xsmall: \"_11c8140y\",\n  xxsmall: \"_11c81vhk\"\n};\n/**\n * @codegenEnd\n */\n\nvar useColor = function useColor(colorProp) {\n  var surface = UNSAFE_useSurface();\n  if (colorProp) {\n    return colorProp;\n  }\n  if (UNSAFE_inverseColorMap.hasOwnProperty(surface)) {\n    return UNSAFE_inverseColorMap[surface];\n  }\n  return 'color.text';\n};\n\n/**\n * __Heading__\n *\n * Heading is a typography component used to display text in defined sizes and styles.\n *\n * @example\n *\n * ```jsx\n * <Heading size=\"xxlarge\">Page title</Heading>\n * ```\n */\nvar Heading = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n    size = props.size,\n    id = props.id,\n    testId = props.testId,\n    as = props.as,\n    colorProp = props.color;\n  if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production' && as && typeof as !== 'string') {\n    throw new Error('`as` prop should be a string.');\n  }\n  var _useHeading = useHeading(sizeTagMap[size]),\n    _useHeading2 = _slicedToArray(_useHeading, 2),\n    hLevel = _useHeading2[0],\n    inferredElement = _useHeading2[1];\n  var Component = as || inferredElement;\n  var needsAriaRole = Component === 'div' && hLevel;\n  var color = useColor(colorProp);\n  return /*#__PURE__*/React.createElement(Component, {\n    id: id,\n    ref: ref,\n    \"data-testid\": testId,\n    role: needsAriaRole ? 'heading' : undefined,\n    \"aria-level\": needsAriaRole ? hLevel : undefined,\n    className: ax([styles.reset, size && headingSizeStylesMap[size], headingColorStylesMap[color]])\n  }, children);\n});\nexport default Heading;", "import React, { createContext, useContext } from 'react';\n\n// Allows support for heading levels 1-9 via aria-level\n\nvar HeadingLevelContext = /*#__PURE__*/createContext(0);\n\n/**\n * @internal\n * @returns The current heading level context.\n */\nvar useHeadingLevel = function useHeadingLevel() {\n  return useContext(HeadingLevelContext);\n};\n\n/**\n * Infers the correct heading markup based on the current heading level context.\n */\nexport var useHeading = function useHeading(fallback) {\n  var hLevel = useHeadingLevel();\n  /**\n   * Order here is important, we for now apply\n   * 1. inferred a11y level (this only applies if context is present)\n   * 2. default final fallback\n   */\n  return [hLevel, hLevel && (hLevel > 6 ? 'div' : \"h\".concat(hLevel)) || fallback];\n};\n/**\n * __Heading level provider__\n *\n * The Heading level provider injects the heading level to all `Heading` components below it in the component tree.\n *\n * @example\n * ```tsx\n * // Will correctly infer the heading level\n * <HeadingContext value={1}>\n *  <Heading>H1</Heading>\n *  <HeadingContext>\n *    <Heading>H2</Heading>\n *  </HeadingContext>\n * </HeadingContext>\n * ```\n */\nvar HeadingLevelContextProvider = function HeadingLevelContextProvider(_ref) {\n  var children = _ref.children,\n    value = _ref.value;\n  var parentHeadingLevel = useHeadingLevel();\n  var headingLevel = parentHeadingLevel + 1;\n  return /*#__PURE__*/React.createElement(HeadingLevelContext.Provider, {\n    value: value || headingLevel\n  }, children);\n};\nexport default HeadingLevelContextProvider;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAOA,WAAO,eAAe,SAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,YAAQ,UAAU;AAClB,QAAI,SAAS,uBAAuB,eAAgB;AACpD,QAAI,WAAW,uBAAuB,iDAAkC;AACxE,aAAS,uBAAuB,GAAG;AAAE,aAAO,KAAK,EAAE,aAAa,IAAI,EAAE,SAAS,EAAE;AAAA,IAAG;AASpF,QAAM,oBAAoB,WAAsB,OAAO,QAAQ,cAAc,SAAS,SAAS,OAAO,OAAO;AAAA,MAC3G,MAAM;AAAA,MACN,qBAAqB;AAAA;AAAA,IAEvB,GAAG,KAAK,CAAC;AACT,sBAAkB,cAAc;AAChC,QAAI,WAAW,QAAQ,UAAU;AAAA;AAAA;;;AC3BjC;AAEA,IAAAA,SAAuB;AACvB;AACA,IAAAC,gBAA2B;AAH3B,OAAO;;;ACFP,mBAAiD;AAIjD,IAAI,0BAAmC,4BAAc,CAAC;AAMtD,IAAI,kBAAkB,SAASC,mBAAkB;AAC/C,aAAO,yBAAW,mBAAmB;AACvC;AAKO,IAAI,aAAa,SAASC,YAAW,UAAU;AACpD,MAAI,SAAS,gBAAgB;AAM7B,SAAO,CAAC,QAAQ,WAAW,SAAS,IAAI,QAAQ,IAAI,OAAO,MAAM,MAAM,QAAQ;AACjF;;;ADfA,IAAI,aAAa;AAAA,EACf,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACX;AACA,IAAI,SAAS;AAAA,EACX,OAAO;AACT;AACA,IAAI,wBAAwB;AAAA,EAC1B,cAAc;AAAA,EACd,sBAAsB;AAAA,EACtB,8BAA8B;AAChC;AAQA,IAAI,uBAAuB;AAAA,EACzB,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,SAAS;AACX;AAKA,IAAI,WAAW,SAASC,UAAS,WAAW;AAC1C,MAAI,UAAU,WAAkB;AAChC,MAAI,WAAW;AACb,WAAO;AAAA,EACT;AACA,MAAI,gBAAuB,eAAe,OAAO,GAAG;AAClD,WAAO,gBAAuB,OAAO;AAAA,EACvC;AACA,SAAO;AACT;AAaA,IAAI,cAAuB,0BAAW,SAAU,OAAO,KAAK;AAC1D,MAAI,WAAW,MAAM,UACnB,OAAO,MAAM,MACb,KAAK,MAAM,IACX,SAAS,MAAM,QACf,KAAK,MAAM,IACX,YAAY,MAAM;AACpB,MAAI,OAAO,YAAY,eAAe,QAAyC,MAAM,OAAO,OAAO,UAAU;AAC3G,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AACA,MAAI,cAAc,WAAW,WAAW,IAAI,CAAC,GAC3C,eAAe,eAAe,aAAa,CAAC,GAC5C,SAAS,aAAa,CAAC,GACvB,kBAAkB,aAAa,CAAC;AAClC,MAAI,YAAY,MAAM;AACtB,MAAI,gBAAgB,cAAc,SAAS;AAC3C,MAAI,QAAQ,SAAS,SAAS;AAC9B,SAA0B,qBAAc,WAAW;AAAA,IACjD;AAAA,IACA;AAAA,IACA,eAAe;AAAA,IACf,MAAM,gBAAgB,YAAY;AAAA,IAClC,cAAc,gBAAgB,SAAS;AAAA,IACvC,WAAW,GAAG,CAAC,OAAO,OAAO,QAAQ,qBAAqB,IAAI,GAAG,sBAAsB,KAAK,CAAC,CAAC;AAAA,EAChG,GAAG,QAAQ;AACb,CAAC;AACD,IAAO,0BAAQ;",
  "names": ["React", "import_react", "useHeadingLevel", "useHeading", "useColor"]
}
