import {
  COLOR_MODE_ATTRIBUTE,
  CONTRAST_MODE_ATTRIBUTE,
  CUSTOM_THEME_ATTRIBUTE,
  THEME_DATA_ATTRIBUTE,
  TOKEN_NOT_FOUND_CSS_VAR,
  findMissingCustomStyleElements,
  hash,
  isValidBrandHex,
  themeColorModes,
  themeIds,
  themeIdsWithOverrides,
  themeStateDefaults,
  theme_config_default,
  token_names_default
} from "./chunk-NI4BJGZ3.js";
import {
  require_dist
} from "./chunk-CGH4DJNJ.js";
import {
  warnOnce
} from "./chunk-ATF5PCW4.js";
import {
  _asyncToGenerator,
  fg,
  init_asyncToGenerator,
  init_esm,
  require_regenerator
} from "./chunk-GTO4PDQE.js";
import {
  _slicedToArray,
  _toConsumableArray,
  init_slicedToArray
} from "./chunk-XN5DX7DZ.js";
import {
  _classCallCheck,
  _createClass,
  init_classCallCheck,
  init_createClass
} from "./chunk-NS4BQYS2.js";
import {
  _defineProperty,
  _typeof,
  init_defineProperty,
  init_typeof
} from "./chunk-LBGAJG32.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/tokens/dist/esm/get-token.js
init_esm();
function token(path, fallback) {
  var token2 = token_names_default[path];
  if (typeof process !== "undefined" && true) {
    if (!token2) {
      warnOnce("Unknown token id at path: ".concat(path, " in @atlaskit/tokens"));
    }
    if (token2 === "--ds-icon-subtlest" && !fg("platform-component-visual-refresh")) {
      warnOnce(`Token "color.icon.subtlest" is only available when feature flag "platform-component-visual-refresh" is on, don't use it if the flag can't be turned on on this page`);
    }
  }
  if (!token2) {
    token2 = TOKEN_NOT_FOUND_CSS_VAR;
  }
  var tokenCall = fallback ? "var(".concat(token2, ", ").concat(fallback, ")") : "var(".concat(token2, ")");
  return tokenCall;
}
var get_token_default = token;

// node_modules/@atlaskit/tokens/dist/esm/get-token-value.js
init_esm();
function getTokenValue(tokenId) {
  var fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var token2 = token_names_default[tokenId];
  var tokenValue = fallback;
  if (typeof process !== "undefined" && true) {
    if (!token2) {
      warnOnce("Unknown token id at path: ".concat(tokenId, " in @atlaskit/tokens"));
    }
    if (token2 === "--ds-icon-subtlest" && !fg("platform-component-visual-refresh")) {
      warnOnce(`Token "color.icon.subtlest" is only available when feature flag "platform-component-visual-refresh" is on, don't use it if the flag can't be turned on on this page`);
    }
  }
  if (typeof window === "undefined") {
    return tokenValue;
  }
  tokenValue = window.getComputedStyle(document.documentElement).getPropertyValue(token2).trim();
  tokenValue = tokenValue || fallback;
  return tokenValue;
}
var get_token_value_default = getTokenValue;

// node_modules/@atlaskit/tokens/dist/esm/set-global-theme.js
init_asyncToGenerator();
var import_regenerator2 = __toESM(require_regenerator());
init_esm();

// node_modules/@atlaskit/tokens/dist/esm/utils/configure-page.js
init_slicedToArray();
init_esm();

// node_modules/@atlaskit/tokens/dist/esm/get-theme-html-attrs.js
init_defineProperty();
init_esm();

// node_modules/@atlaskit/tokens/dist/esm/theme-state-transformer.js
init_typeof();
init_slicedToArray();
var themeKinds = ["light", "dark", "spacing", "typography", "shape"];
var customThemeOptions = "UNSAFE_themeOptions";
var isThemeKind = function isThemeKind2(themeKind) {
  return themeKinds.find(function(kind) {
    return kind === themeKind;
  }) !== void 0;
};
var isThemeIds = function isThemeIds2(themeId) {
  return themeIds.find(function(id) {
    return id === themeId;
  }) !== void 0;
};
var isColorMode = function isColorMode2(modeId) {
  return ["light", "dark", "auto"].includes(modeId);
};
var themeStringToObject = function themeStringToObject2(themeState) {
  return themeState.split(" ").map(function(theme) {
    return theme.split(/:([^]*)/);
  }).reduce(function(themeObject, _ref) {
    var _ref2 = _slicedToArray(_ref, 2), kind = _ref2[0], id = _ref2[1];
    if (kind === "colorMode" && isColorMode(id)) {
      themeObject[kind] = id;
    }
    if (isThemeKind(kind) && isThemeIds(id)) {
      themeObject[kind] = id;
    }
    if (kind === customThemeOptions) {
      try {
        themeObject[customThemeOptions] = JSON.parse(id);
      } catch (e) {
        new Error("Invalid custom theme string");
      }
    }
    return themeObject;
  }, {});
};
var themeObjectToString = function themeObjectToString2(themeState) {
  return Object.entries(themeState).reduce(function(themeString, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), kind = _ref4[0], id = _ref4[1];
    if (
      // colorMode theme state
      kind === "colorMode" && typeof id === "string" && isColorMode(id) || // custom theme state
      kind === customThemeOptions && _typeof(id) === "object" || // other theme states
      isThemeKind(kind) && typeof id === "string" && isThemeIds(id)
    ) {
      return themeString + "".concat(themeString ? " " : "") + "".concat(kind, ":").concat(_typeof(id) === "object" ? JSON.stringify(id) : id);
    }
    return themeString;
  }, "");
};

// node_modules/@atlaskit/tokens/dist/esm/get-theme-html-attrs.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var defaultColorMode = "light";
var defaultContrastMode = "no-preference";
var getThemeHtmlAttrs = function getThemeHtmlAttrs2() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$colorMode = _ref.colorMode, colorMode = _ref$colorMode === void 0 ? themeStateDefaults["colorMode"] : _ref$colorMode, _ref$dark = _ref.dark, dark2 = _ref$dark === void 0 ? themeStateDefaults["dark"] : _ref$dark, _ref$light = _ref.light, light2 = _ref$light === void 0 ? themeStateDefaults["light"] : _ref$light, _ref$contrastMode = _ref.contrastMode, contrastMode = _ref$contrastMode === void 0 ? themeStateDefaults["contrastMode"] : _ref$contrastMode, _ref$shape = _ref.shape, shape2 = _ref$shape === void 0 ? themeStateDefaults["shape"] : _ref$shape, _ref$spacing = _ref.spacing, spacing2 = _ref$spacing === void 0 ? themeStateDefaults["spacing"] : _ref$spacing, _ref$typography = _ref.typography, typography2 = _ref$typography === void 0 ? themeStateDefaults["typography"]() : _ref$typography, _ref$UNSAFE_themeOpti = _ref.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults["UNSAFE_themeOptions"] : _ref$UNSAFE_themeOpti;
  var themeAttribute = themeObjectToString({
    dark: dark2,
    light: light2,
    shape: shape2,
    spacing: spacing2,
    typography: typography2
  });
  var result = _defineProperty(_defineProperty({}, THEME_DATA_ATTRIBUTE, themeAttribute), COLOR_MODE_ATTRIBUTE, colorMode === "auto" ? defaultColorMode : colorMode);
  if (fg("platform_increased-contrast-themes")) {
    result = _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, CONTRAST_MODE_ATTRIBUTE, contrastMode === "auto" ? defaultContrastMode : contrastMode));
  }
  if (UNSAFE_themeOptions && isValidBrandHex(UNSAFE_themeOptions.brandColor)) {
    var optionString = JSON.stringify(UNSAFE_themeOptions);
    var uniqueId = hash(optionString);
    result[CUSTOM_THEME_ATTRIBUTE] = uniqueId;
  }
  return result;
};
var get_theme_html_attrs_default = getThemeHtmlAttrs;

// node_modules/@atlaskit/tokens/dist/esm/utils/color-mode-listeners.js
init_classCallCheck();
init_createClass();
init_defineProperty();
var import_bind_event_listener = __toESM(require_dist());

// node_modules/@atlaskit/tokens/dist/esm/utils/theme-loading.js
init_asyncToGenerator();
var import_regenerator = __toESM(require_regenerator());
init_esm();

// node_modules/@atlaskit/tokens/dist/esm/artifacts/theme-import-map.js
var themeImportsMap = {
  "light": function light() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light" */
      "./atlassian-light-FFXD2O52.js"
    );
  },
  "light-future": function lightFuture() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light-future" */
      "./atlassian-light-future-EKTQY3D6.js"
    );
  },
  "light-increased-contrast": function lightIncreasedContrast() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light-increased-contrast" */
      "./atlassian-light-increased-contrast-KSNMWSWV.js"
    );
  },
  "dark": function dark() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark" */
      "./atlassian-dark-FV32KUUB.js"
    );
  },
  "dark-future": function darkFuture() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark-future" */
      "./atlassian-dark-future-VFDZZC7E.js"
    );
  },
  "dark-increased-contrast": function darkIncreasedContrast() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark-increased-contrast" */
      "./atlassian-dark-increased-contrast-FWU34RL4.js"
    );
  },
  "legacy-light": function legacyLight() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-legacy-light" */
      "./atlassian-legacy-light-UYPSTJ3H.js"
    );
  },
  "legacy-dark": function legacyDark() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-legacy-dark" */
      "./atlassian-legacy-dark-QUXUH3NS.js"
    );
  },
  "spacing": function spacing() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-spacing" */
      "./atlassian-spacing-YJXLDA2M.js"
    );
  },
  "typography": function typography() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography" */
      "./atlassian-typography-IKCGUKLX.js"
    );
  },
  "typography-adg3": function typographyAdg3() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography-adg3" */
      "./atlassian-typography-adg3-M6G5UMBE.js"
    );
  },
  "shape": function shape() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-shape" */
      "./atlassian-shape-GIVUFLKE.js"
    );
  },
  "shape-rounder": function shapeRounder() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-shape-rounder" */
      "./atlassian-shape-rounder-U7AKCSUA.js"
    );
  },
  "shape-roundest": function shapeRoundest() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-shape-roundest" */
      "./atlassian-shape-roundest-V4REBHHM.js"
    );
  },
  "typography-modernized": function typographyModernized() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography-modernized" */
      "./atlassian-typography-modernized-3LMT3L4K.js"
    );
  },
  "typography-refreshed": function typographyRefreshed() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography-refreshed" */
      "./atlassian-typography-refreshed-JPFE3RRH.js"
    );
  },
  "light-brand-refresh": function lightBrandRefresh() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light-brand-refresh" */
      "./atlassian-light-brand-refresh-7FPDVW4U.js"
    );
  },
  "dark-brand-refresh": function darkBrandRefresh() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark-brand-refresh" */
      "./atlassian-dark-brand-refresh-GFK3K77V.js"
    );
  }
};
var theme_import_map_default = themeImportsMap;

// node_modules/@atlaskit/tokens/dist/esm/utils/theme-loading.js
var loadAndAppendThemeCss = function() {
  var _ref = _asyncToGenerator(import_regenerator.default.mark(function _callee(themeId) {
    var themeCss, style;
    return import_regenerator.default.wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            if (!document.head.querySelector("style[".concat(THEME_DATA_ATTRIBUTE, '="').concat(themeId, '"]:not([').concat(CUSTOM_THEME_ATTRIBUTE, "])"))) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            if (themeId) {
              _context.next = 4;
              break;
            }
            return _context.abrupt("return");
          case 4:
            _context.next = 6;
            return loadThemeCss(themeId);
          case 6:
            themeCss = _context.sent;
            style = document.createElement("style");
            style.textContent = themeCss;
            style.dataset.theme = themeId;
            document.head.appendChild(style);
          case 11:
          case "end":
            return _context.stop();
        }
    }, _callee);
  }));
  return function loadAndAppendThemeCss2(_x) {
    return _ref.apply(this, arguments);
  };
}();
var loadThemeCss = function() {
  var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee2(themeId) {
    var _yield$themeImportMap, themeCss;
    return import_regenerator.default.wrap(function _callee2$(_context2) {
      while (1)
        switch (_context2.prev = _context2.next) {
          case 0:
            if ((themeId === "light" || themeId === "dark") && fg("platform-component-visual-refresh")) {
              themeId += "-brand-refresh";
            }
            _context2.next = 3;
            return theme_import_map_default[themeId]();
          case 3:
            _yield$themeImportMap = _context2.sent;
            themeCss = _yield$themeImportMap.default;
            return _context2.abrupt("return", themeCss);
          case 6:
          case "end":
            return _context2.stop();
        }
    }, _callee2);
  }));
  return function loadThemeCss2(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var darkModeMediaQuery = "(prefers-color-scheme: dark)";
var moreContrastMediaQuery = "(prefers-contrast: more)";

// node_modules/@atlaskit/tokens/dist/esm/utils/color-mode-listeners.js
var isMatchMediaAvailable = typeof window !== "undefined" && "matchMedia" in window;
function checkNativeListener(e) {
  var element = document.documentElement;
  element.setAttribute(COLOR_MODE_ATTRIBUTE, e.matches ? "dark" : "light");
}
var darkModeMql = isMatchMediaAvailable && window.matchMedia(darkModeMediaQuery);
var ColorModeObserver = function() {
  function ColorModeObserver2() {
    _classCallCheck(this, ColorModeObserver2);
    _defineProperty(this, "unbindThemeChangeListener", null);
  }
  return _createClass(ColorModeObserver2, [{
    key: "getColorMode",
    value: function getColorMode() {
      if (!darkModeMql) {
        return "light";
      }
      return darkModeMql !== null && darkModeMql !== void 0 && darkModeMql.matches ? "dark" : "light";
    }
  }, {
    key: "bind",
    value: function bind() {
      if (darkModeMql && this.unbindThemeChangeListener === null) {
        this.unbindThemeChangeListener = (0, import_bind_event_listener.bind)(darkModeMql, {
          type: "change",
          listener: checkNativeListener
        });
      }
    }
  }, {
    key: "unbind",
    value: function unbind() {
      if (this.unbindThemeChangeListener) {
        this.unbindThemeChangeListener();
        this.unbindThemeChangeListener = null;
      }
    }
  }]);
}();
var SingletonColorModeObserver = new ColorModeObserver();
var color_mode_listeners_default = SingletonColorModeObserver;

// node_modules/@atlaskit/tokens/dist/esm/utils/contrast-mode-listeners.js
init_classCallCheck();
init_createClass();
init_defineProperty();
var import_bind_event_listener2 = __toESM(require_dist());
var isMatchMediaAvailable2 = typeof window !== "undefined" && "matchMedia" in window;
function checkNativeListener2(e) {
  var element = document.documentElement;
  element.setAttribute(CONTRAST_MODE_ATTRIBUTE, e.matches ? "more" : "no-preference");
}
var contrastModeMql = isMatchMediaAvailable2 && window.matchMedia(moreContrastMediaQuery);
var ContrastModeObserver = function() {
  function ContrastModeObserver2() {
    _classCallCheck(this, ContrastModeObserver2);
    _defineProperty(this, "unbindContrastChangeListener", null);
  }
  return _createClass(ContrastModeObserver2, [{
    key: "getContrastMode",
    value: function getContrastMode() {
      if (!contrastModeMql) {
        return "no-preference";
      }
      return contrastModeMql !== null && contrastModeMql !== void 0 && contrastModeMql.matches ? "more" : "no-preference";
    }
  }, {
    key: "bind",
    value: function bind() {
      if (contrastModeMql && this.unbindContrastChangeListener === null) {
        this.unbindContrastChangeListener = (0, import_bind_event_listener2.bind)(contrastModeMql, {
          type: "change",
          listener: checkNativeListener2
        });
      }
    }
  }, {
    key: "unbind",
    value: function unbind() {
      if (this.unbindContrastChangeListener) {
        this.unbindContrastChangeListener();
        this.unbindContrastChangeListener = null;
      }
    }
  }]);
}();
var SingletonContrastModeObserver = new ContrastModeObserver();
var contrast_mode_listeners_default = SingletonContrastModeObserver;

// node_modules/@atlaskit/tokens/dist/esm/utils/configure-page.js
function configurePage(themeState) {
  if (themeState.colorMode === "auto") {
    themeState.colorMode = color_mode_listeners_default.getColorMode();
    color_mode_listeners_default.bind();
  } else {
    color_mode_listeners_default.unbind();
  }
  if (fg("platform_increased-contrast-themes")) {
    if (themeState.contrastMode === "auto") {
      themeState.contrastMode = contrast_mode_listeners_default.getContrastMode();
      contrast_mode_listeners_default.bind();
    } else {
      contrast_mode_listeners_default.unbind();
    }
  }
  var themeAttributes = get_theme_html_attrs_default(themeState);
  Object.entries(themeAttributes).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
    document.documentElement.setAttribute(key, value);
  });
  return function() {
    color_mode_listeners_default.unbind();
    if (fg("platform_increased-contrast-themes")) {
      contrast_mode_listeners_default.unbind();
    }
  };
}

// node_modules/@atlaskit/tokens/dist/esm/utils/get-theme-preferences.js
init_esm();

// node_modules/@atlaskit/tokens/dist/esm/utils/get-increased-contrast-theme.js
init_slicedToArray();
function getIncreasedContrastTheme(themeId) {
  var _Object$entries$find;
  return (_Object$entries$find = Object.entries(theme_config_default).find(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), increasesContrastFor = _ref2[1].increasesContrastFor;
    return increasesContrastFor === themeId;
  })) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[1].id;
}

// node_modules/@atlaskit/tokens/dist/esm/utils/get-theme-preferences.js
var getThemePreferences = function getThemePreferences2(themeState) {
  var colorMode = themeState.colorMode, contrastMode = themeState.contrastMode, dark2 = themeState.dark, light2 = themeState.light, shape2 = themeState.shape, spacing2 = themeState.spacing, typography2 = themeState.typography;
  var autoColorModeThemes = [light2, dark2];
  var themePreferences = [];
  if (colorMode === "auto") {
    if (contrastMode !== "no-preference" && fg("platform_increased-contrast-themes")) {
      autoColorModeThemes.forEach(function(normalTheme) {
        var increasedContrastTheme2 = getIncreasedContrastTheme(normalTheme);
        if (increasedContrastTheme2) {
          autoColorModeThemes.push(increasedContrastTheme2);
        }
      });
    }
    themePreferences.push.apply(themePreferences, autoColorModeThemes);
  } else {
    themePreferences.push(themeState[colorMode]);
    if (contrastMode !== "no-preference" && fg("platform_increased-contrast-themes")) {
      var increasedContrastTheme = getIncreasedContrastTheme(themeState[colorMode]);
      if (increasedContrastTheme) {
        themePreferences.push(increasedContrastTheme);
      }
    }
  }
  [shape2, spacing2, typography2].forEach(function(themeId) {
    if (themeId) {
      themePreferences.push(themeId);
    }
  });
  return _toConsumableArray(new Set(themePreferences));
};
var getThemeOverridePreferences = function getThemeOverridePreferences2(_themeState) {
  var themeOverridePreferences = [];
  return _toConsumableArray(new Set(themeOverridePreferences));
};

// node_modules/@atlaskit/tokens/dist/esm/set-global-theme.js
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var _n = 0, F = function F2() {
      };
      return { s: F, n: function n() {
        return _n >= r.length ? { done: true } : { done: false, value: r[_n++] };
      }, e: function e2(r2) {
        throw r2;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a = true, u = false;
  return { s: function s() {
    t = t.call(r);
  }, n: function n() {
    var r2 = t.next();
    return a = r2.done, r2;
  }, e: function e2(r2) {
    u = true, o = r2;
  }, f: function f() {
    try {
      a || null == t.return || t.return();
    } finally {
      if (u)
        throw o;
    }
  } };
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r)
      return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
var setGlobalTheme = function() {
  var _ref = _asyncToGenerator(import_regenerator2.default.mark(function _callee3() {
    var _ref2, _ref2$colorMode, colorMode, _ref2$contrastMode, contrastMode, _ref2$dark, dark2, _ref2$light, light2, _ref2$shape, shape2, _ref2$spacing, spacing2, _ref2$typography, typography2, _ref2$UNSAFE_themeOpt, UNSAFE_themeOptions, themeLoader, themeState, themePreferences, loadingStrategy, loadingTasks, mode, attrOfMissingCustomStyles, themeOverridePreferences, _iterator, _step, themeId, autoUnbind, _args3 = arguments;
    return import_regenerator2.default.wrap(function _callee3$(_context3) {
      while (1)
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref2 = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : {}, _ref2$colorMode = _ref2.colorMode, colorMode = _ref2$colorMode === void 0 ? themeStateDefaults["colorMode"] : _ref2$colorMode, _ref2$contrastMode = _ref2.contrastMode, contrastMode = _ref2$contrastMode === void 0 ? themeStateDefaults["contrastMode"] : _ref2$contrastMode, _ref2$dark = _ref2.dark, dark2 = _ref2$dark === void 0 ? themeStateDefaults["dark"] : _ref2$dark, _ref2$light = _ref2.light, light2 = _ref2$light === void 0 ? themeStateDefaults["light"] : _ref2$light, _ref2$shape = _ref2.shape, shape2 = _ref2$shape === void 0 ? themeStateDefaults["shape"] : _ref2$shape, _ref2$spacing = _ref2.spacing, spacing2 = _ref2$spacing === void 0 ? themeStateDefaults["spacing"] : _ref2$spacing, _ref2$typography = _ref2.typography, typography2 = _ref2$typography === void 0 ? themeStateDefaults["typography"]() : _ref2$typography, _ref2$UNSAFE_themeOpt = _ref2.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref2$UNSAFE_themeOpt === void 0 ? themeStateDefaults["UNSAFE_themeOptions"] : _ref2$UNSAFE_themeOpt;
            themeLoader = _args3.length > 1 ? _args3[1] : void 0;
            if (!fg("platform_increased-contrast-themes")) {
              if (light2 === "light-increased-contrast") {
                light2 = "light";
              }
              if (dark2 === "dark-increased-contrast") {
                dark2 = "dark";
              }
            }
            themeState = {
              colorMode,
              contrastMode,
              dark: dark2,
              light: light2,
              shape: shape2,
              spacing: spacing2,
              typography: typography2,
              UNSAFE_themeOptions: themeLoader ? void 0 : UNSAFE_themeOptions
            };
            themePreferences = getThemePreferences(themeState);
            loadingStrategy = themeLoader ? themeLoader : loadAndAppendThemeCss;
            loadingTasks = themePreferences.map(function() {
              var _ref3 = _asyncToGenerator(import_regenerator2.default.mark(function _callee(themeId2) {
                return import_regenerator2.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return loadingStrategy(themeId2);
                      case 2:
                        return _context.abrupt("return", _context.sent);
                      case 3:
                      case "end":
                        return _context.stop();
                    }
                }, _callee);
              }));
              return function(_x) {
                return _ref3.apply(this, arguments);
              };
            }());
            if (!themeLoader && UNSAFE_themeOptions && isValidBrandHex(UNSAFE_themeOptions === null || UNSAFE_themeOptions === void 0 ? void 0 : UNSAFE_themeOptions.brandColor)) {
              mode = colorMode || themeStateDefaults["colorMode"];
              attrOfMissingCustomStyles = findMissingCustomStyleElements(UNSAFE_themeOptions, mode);
              if (attrOfMissingCustomStyles.length > 0) {
                loadingTasks.push(_asyncToGenerator(import_regenerator2.default.mark(function _callee2() {
                  var _yield$import, loadAndAppendCustomThemeCss;
                  return import_regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1)
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return import(
                            /* webpackChunkName: "@atlaskit-internal_atlassian-custom-theme" */
                            "./custom-theme-VTQSUSCD.js"
                          );
                        case 2:
                          _yield$import = _context2.sent;
                          loadAndAppendCustomThemeCss = _yield$import.loadAndAppendCustomThemeCss;
                          loadAndAppendCustomThemeCss({
                            colorMode: attrOfMissingCustomStyles.length === 2 ? "auto" : (
                              // only load the missing custom theme styles
                              attrOfMissingCustomStyles[0]
                            ),
                            UNSAFE_themeOptions
                          });
                        case 5:
                        case "end":
                          return _context2.stop();
                      }
                  }, _callee2);
                }))());
              }
            }
            _context3.next = 10;
            return Promise.all(loadingTasks);
          case 10:
            themeOverridePreferences = getThemeOverridePreferences(themeState);
            _iterator = _createForOfIteratorHelper(themeOverridePreferences);
            _context3.prev = 12;
            _iterator.s();
          case 14:
            if ((_step = _iterator.n()).done) {
              _context3.next = 20;
              break;
            }
            themeId = _step.value;
            _context3.next = 18;
            return loadingStrategy(themeId);
          case 18:
            _context3.next = 14;
            break;
          case 20:
            _context3.next = 25;
            break;
          case 22:
            _context3.prev = 22;
            _context3.t0 = _context3["catch"](12);
            _iterator.e(_context3.t0);
          case 25:
            _context3.prev = 25;
            _iterator.f();
            return _context3.finish(25);
          case 28:
            autoUnbind = configurePage(themeState);
            return _context3.abrupt("return", autoUnbind);
          case 30:
          case "end":
            return _context3.stop();
        }
    }, _callee3, null, [[12, 22, 25, 28]]);
  }));
  return function setGlobalTheme2() {
    return _ref.apply(this, arguments);
  };
}();
var set_global_theme_default = setGlobalTheme;

// node_modules/@atlaskit/tokens/dist/esm/enable-global-theme.js
var enableGlobalTheme = function enableGlobalTheme2() {
  var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$colorMode = _ref.colorMode, colorMode = _ref$colorMode === void 0 ? themeStateDefaults["colorMode"] : _ref$colorMode, _ref$contrastMode = _ref.contrastMode, contrastMode = _ref$contrastMode === void 0 ? themeStateDefaults["contrastMode"] : _ref$contrastMode, _ref$dark = _ref.dark, dark2 = _ref$dark === void 0 ? themeStateDefaults["dark"] : _ref$dark, _ref$light = _ref.light, light2 = _ref$light === void 0 ? themeStateDefaults["light"] : _ref$light, _ref$shape = _ref.shape, shape2 = _ref$shape === void 0 ? themeStateDefaults["shape"] : _ref$shape, _ref$spacing = _ref.spacing, spacing2 = _ref$spacing === void 0 ? themeStateDefaults["spacing"] : _ref$spacing, _ref$typography = _ref.typography, typography2 = _ref$typography === void 0 ? themeStateDefaults["typography"]() : _ref$typography, _ref$UNSAFE_themeOpti = _ref.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults["UNSAFE_themeOptions"] : _ref$UNSAFE_themeOpti;
  var themeLoader = arguments.length > 1 ? arguments[1] : void 0;
  var themeState = {
    colorMode,
    contrastMode,
    dark: dark2,
    light: light2,
    shape: shape2,
    spacing: spacing2,
    typography: typography2,
    UNSAFE_themeOptions: themeLoader ? void 0 : UNSAFE_themeOptions
  };
  var themePreferences = getThemePreferences(themeState);
  if (themeLoader) {
    themePreferences.map(function(themeId) {
      return themeLoader(themeId);
    });
  }
  var autoUnbind = configurePage(themeState);
  return autoUnbind;
};
var enable_global_theme_default = enableGlobalTheme;

// node_modules/@atlaskit/tokens/dist/esm/get-theme-styles.js
init_asyncToGenerator();
var import_regenerator3 = __toESM(require_regenerator());
init_esm();
var getThemeStyles = function() {
  var _ref = _asyncToGenerator(import_regenerator3.default.mark(function _callee3(preferences) {
    var themePreferences, themeOverridePreferences, themeState, results;
    return import_regenerator3.default.wrap(function _callee3$(_context3) {
      while (1)
        switch (_context3.prev = _context3.next) {
          case 0:
            themeOverridePreferences = [];
            if (preferences === "all") {
              themePreferences = themeIdsWithOverrides;
              if (!fg("platform_increased-contrast-themes")) {
                themePreferences = themePreferences.filter(function(n) {
                  return n !== "light-increased-contrast" && n !== "dark-increased-contrast";
                });
              }
              themePreferences = themePreferences.filter(function(n) {
                return n !== "light-brand-refresh" && n !== "dark-brand-refresh";
              });
            } else {
              themeState = {
                colorMode: (preferences === null || preferences === void 0 ? void 0 : preferences.colorMode) || themeStateDefaults["colorMode"],
                contrastMode: (preferences === null || preferences === void 0 ? void 0 : preferences.contrastMode) || themeStateDefaults["contrastMode"],
                dark: (preferences === null || preferences === void 0 ? void 0 : preferences.dark) || themeStateDefaults["dark"],
                light: (preferences === null || preferences === void 0 ? void 0 : preferences.light) || themeStateDefaults["light"],
                shape: (preferences === null || preferences === void 0 ? void 0 : preferences.shape) || themeStateDefaults["shape"],
                spacing: (preferences === null || preferences === void 0 ? void 0 : preferences.spacing) || themeStateDefaults["spacing"],
                typography: (preferences === null || preferences === void 0 ? void 0 : preferences.typography) || themeStateDefaults["typography"]()
              };
              themePreferences = getThemePreferences(themeState);
              themeOverridePreferences = getThemeOverridePreferences(themeState);
            }
            _context3.next = 4;
            return Promise.all([].concat(_toConsumableArray([].concat(_toConsumableArray(themePreferences), _toConsumableArray(themeOverridePreferences)).map(function() {
              var _ref2 = _asyncToGenerator(import_regenerator3.default.mark(function _callee(themeId) {
                var css;
                return import_regenerator3.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return loadThemeCss(themeId);
                      case 3:
                        css = _context.sent;
                        return _context.abrupt("return", {
                          id: themeId,
                          attrs: {
                            "data-theme": themeId
                          },
                          css
                        });
                      case 7:
                        _context.prev = 7;
                        _context.t0 = _context["catch"](0);
                        return _context.abrupt("return", void 0);
                      case 10:
                      case "end":
                        return _context.stop();
                    }
                }, _callee, null, [[0, 7]]);
              }));
              return function(_x2) {
                return _ref2.apply(this, arguments);
              };
            }())), [
              // Add custom themes if they're present
              _asyncToGenerator(import_regenerator3.default.mark(function _callee2() {
                var _preferences$UNSAFE_t;
                var _yield$import, getCustomThemeStyles, customThemeStyles;
                return import_regenerator3.default.wrap(function _callee2$(_context2) {
                  while (1)
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!(preferences !== "all" && preferences !== null && preferences !== void 0 && preferences.UNSAFE_themeOptions && isValidBrandHex(preferences === null || preferences === void 0 || (_preferences$UNSAFE_t = preferences.UNSAFE_themeOptions) === null || _preferences$UNSAFE_t === void 0 ? void 0 : _preferences$UNSAFE_t.brandColor))) {
                          _context2.next = 15;
                          break;
                        }
                        _context2.prev = 1;
                        _context2.next = 4;
                        return import(
                          /* webpackChunkName: "@atlaskit-internal_atlassian-custom-theme" */
                          "./custom-theme-VTQSUSCD.js"
                        );
                      case 4:
                        _yield$import = _context2.sent;
                        getCustomThemeStyles = _yield$import.getCustomThemeStyles;
                        _context2.next = 8;
                        return getCustomThemeStyles({
                          colorMode: (preferences === null || preferences === void 0 ? void 0 : preferences.colorMode) || themeStateDefaults["colorMode"],
                          UNSAFE_themeOptions: preferences === null || preferences === void 0 ? void 0 : preferences.UNSAFE_themeOptions
                        });
                      case 8:
                        customThemeStyles = _context2.sent;
                        return _context2.abrupt("return", customThemeStyles);
                      case 12:
                        _context2.prev = 12;
                        _context2.t0 = _context2["catch"](1);
                        return _context2.abrupt("return", void 0);
                      case 15:
                        return _context2.abrupt("return", void 0);
                      case 16:
                      case "end":
                        return _context2.stop();
                    }
                }, _callee2, null, [[1, 12]]);
              }))()
            ]));
          case 4:
            results = _context3.sent;
            return _context3.abrupt("return", results.flat().filter(function(theme) {
              return theme !== void 0;
            }));
          case 6:
          case "end":
            return _context3.stop();
        }
    }, _callee3);
  }));
  return function getThemeStyles2(_x) {
    return _ref.apply(this, arguments);
  };
}();
var get_theme_styles_default = getThemeStyles;

// node_modules/@atlaskit/tokens/dist/esm/get-ssr-auto-script.js
init_esm();
var getSSRAutoScript = function getSSRAutoScript2(colorMode, contrastMode) {
  if (colorMode !== "auto" && contrastMode !== "auto") {
    return void 0;
  }
  var setColorMode = colorMode === "auto" ? "\n  try {\n    const darkModeMql = window.matchMedia('".concat(darkModeMediaQuery, "');\n    const colorMode = darkModeMql.matches ? 'dark' : 'light';\n    document.documentElement.setAttribute('").concat(COLOR_MODE_ATTRIBUTE, "', colorMode);\n  } catch (e) {}") : "";
  var setContrastMode = contrastMode === "auto" && fg("platform_increased-contrast-themes") ? "\n  try {\n    const contrastModeMql = window.matchMedia('".concat(moreContrastMediaQuery, "');\n    const contrastMode = contrastModeMql.matches ? 'more' : 'no-preference';\n    document.documentElement.setAttribute('").concat(CONTRAST_MODE_ATTRIBUTE, "', contrastMode);\n  } catch (e) {}") : "";
  return "(() => {".concat(setColorMode).concat(setContrastMode, "})()");
};
var get_ssr_auto_script_default = getSSRAutoScript;

// node_modules/@atlaskit/tokens/dist/esm/use-theme-observer.js
init_slicedToArray();
var import_react = __toESM(require_react());

// node_modules/@atlaskit/tokens/dist/esm/get-global-theme.js
init_defineProperty();
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var isThemeColorMode = function isThemeColorMode2(colorMode) {
  return themeColorModes.find(function(mode) {
    return mode === colorMode;
  }) !== void 0;
};
var getGlobalTheme = function getGlobalTheme2() {
  if (typeof document === "undefined") {
    return {};
  }
  var element = document.documentElement;
  var colorMode = element.getAttribute(COLOR_MODE_ATTRIBUTE) || "";
  var theme = element.getAttribute(THEME_DATA_ATTRIBUTE) || "";
  return _objectSpread2(_objectSpread2({}, themeStringToObject(theme)), isThemeColorMode(colorMode) && {
    colorMode
  });
};
var get_global_theme_default = getGlobalTheme;

// node_modules/@atlaskit/tokens/dist/esm/theme-mutation-observer.js
init_classCallCheck();
init_createClass();
init_defineProperty();
var ThemeMutationObserver = function() {
  function ThemeMutationObserver2(callback) {
    _classCallCheck(this, ThemeMutationObserver2);
    _defineProperty(this, "legacyObserver", null);
    this.callback = callback;
    ThemeMutationObserver2.callbacks.add(callback);
  }
  return _createClass(ThemeMutationObserver2, [{
    key: "observe",
    value: function observe() {
      if (!ThemeMutationObserver2.observer) {
        ThemeMutationObserver2.observer = new MutationObserver(function() {
          var theme = get_global_theme_default();
          ThemeMutationObserver2.callbacks.forEach(function(callback) {
            return callback(theme);
          });
        });
        ThemeMutationObserver2.observer.observe(document.documentElement, {
          attributeFilter: [THEME_DATA_ATTRIBUTE, COLOR_MODE_ATTRIBUTE]
        });
      }
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      if (this.callback) {
        ThemeMutationObserver2.callbacks.delete(this.callback);
      }
      if (ThemeMutationObserver2.callbacks.size === 0 && ThemeMutationObserver2.observer) {
        ThemeMutationObserver2.observer.disconnect();
        ThemeMutationObserver2.observer = null;
      }
    }
  }]);
}();
_defineProperty(ThemeMutationObserver, "observer", null);
_defineProperty(ThemeMutationObserver, "callbacks", /* @__PURE__ */ new Set());

// node_modules/@atlaskit/tokens/dist/esm/use-theme-observer.js
var useThemeObserver = function useThemeObserver2() {
  var _useState = (0, import_react.useState)(get_global_theme_default()), _useState2 = _slicedToArray(_useState, 2), theme = _useState2[0], setTheme = _useState2[1];
  (0, import_react.useEffect)(function() {
    var observer = new ThemeMutationObserver(function(theme2) {
      return setTheme(theme2);
    });
    observer.observe();
    return function() {
      return observer.disconnect();
    };
  }, []);
  return theme;
};
var use_theme_observer_default = useThemeObserver;

export {
  get_token_default,
  get_token_value_default,
  themeStringToObject,
  themeObjectToString,
  get_theme_html_attrs_default,
  set_global_theme_default,
  enable_global_theme_default,
  get_theme_styles_default,
  get_ssr_auto_script_default,
  get_global_theme_default,
  ThemeMutationObserver,
  use_theme_observer_default
};
//# sourceMappingURL=chunk-I2GRIPGX.js.map
