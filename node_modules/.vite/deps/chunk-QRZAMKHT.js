import {
  noop
} from "./chunk-KXQMNIDH.js";
import {
  require_dist
} from "./chunk-CGH4DJNJ.js";
import {
  fg,
  init_esm
} from "./chunk-76ISXXP4.js";
import {
  _toConsumableArray
} from "./chunk-XKORHSNM.js";
import {
  _classCallCheck,
  _createClass,
  init_classCallCheck,
  init_createClass
} from "./chunk-KPKROJMQ.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/layering/dist/esm/hooks/index.js
var import_react3 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
init_esm();

// node_modules/@atlaskit/layering/dist/esm/components/layering-context.js
var import_react2 = __toESM(require_react());

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/component-with-condition/index.js
init_extends();
var import_react = __toESM(require_react());
function componentWithCondition(condition, ComponentTrue, ComponentFalse) {
  var ComponentWithCondition = (0, import_react.forwardRef)(function(props, ref) {
    return condition() ? import_react.default.createElement(ComponentTrue, _extends({}, props, {
      ref
    })) : import_react.default.createElement(ComponentFalse, _extends({}, props, {
      ref
    }));
  });
  if (ComponentTrue.name !== "") {
    ComponentWithCondition.displayName = "ComponentWithCondition[".concat(condition.name, "]");
  }
  return ComponentWithCondition;
}

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/component-with-fg/index.js
init_esm();
var componentWithFG = function componentWithFG2(featureFlagName, ComponentTrue, ComponentFalse) {
  return componentWithCondition(function() {
    return fg(featureFlagName);
  }, ComponentTrue, ComponentFalse);
};

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/function-with-fg/index.js
init_esm();

// node_modules/@atlaskit/platform-feature-flags-react/dist/esm/utils/conditional-hooks-factory/index.js
init_esm();
var CACHE_MAP_KEY = "__conditionalHooksFactory_conditionCacheMap_dont_modify_this_manually_unless_you_want_react_to_blow_up";
globalThis[CACHE_MAP_KEY] = globalThis[CACHE_MAP_KEY] || /* @__PURE__ */ new WeakMap();

// node_modules/@atlaskit/layering/dist/esm/classes/layer-node.js
init_classCallCheck();
init_createClass();
var LayerNode = function() {
  function LayerNode2(id, parent) {
    _classCallCheck(this, LayerNode2);
    this.id = id;
    this.childNodes = [];
    this.parent = parent;
  }
  return _createClass(LayerNode2, [{
    key: "addChild",
    value: function addChild(node) {
      this.childNodes.push(node);
    }
  }, {
    key: "removeChild",
    value: function removeChild(node) {
      this.childNodes = this.childNodes.filter(function(child) {
        return child.id !== node.id;
      });
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      if (!this.parent) {
        return 1;
      }
      return this.parent.getLevel() + 1;
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      if (this.childNodes.length === 0) {
        return 1;
      }
      return Math.max.apply(Math, _toConsumableArray(this.childNodes.map(function(child) {
        return child.getHeight();
      }))) + 1;
    }
  }]);
}();

// node_modules/@atlaskit/layering/dist/esm/components/layering-context.js
var LevelContext = (0, import_react2.createContext)(0);
var LevelNodeContext = (0, import_react2.createContext)({
  current: null
});
var RootNodeContext = (0, import_react2.createContext)({
  current: null
});
var TopLevelContext = (0, import_react2.createContext)({
  topLevelRef: {
    current: null
  },
  layerList: {
    current: null
  },
  setTopLevel: noop
});
var LevelProvider = function LevelProvider2(_ref) {
  var children = _ref.children, currentLevel = _ref.currentLevel, levelNode = _ref.node;
  (0, import_react2.useEffect)(function() {
    var levelNodeSafe = levelNode.current;
    var parentNode = levelNodeSafe.parent;
    parentNode === null || parentNode === void 0 || parentNode.addChild(levelNodeSafe);
    return function() {
      parentNode === null || parentNode === void 0 || parentNode.removeChild(levelNodeSafe);
    };
  }, [levelNode]);
  return import_react2.default.createElement(LevelContext.Provider, {
    value: currentLevel
  }, import_react2.default.createElement(LevelNodeContext.Provider, {
    value: levelNode
  }, children));
};
var LevelProviderOld = function LevelProviderOld2(_ref2) {
  var children = _ref2.children, currentLevel = _ref2.currentLevel;
  var _useContext = (0, import_react2.useContext)(TopLevelContext), layerList = _useContext.layerList;
  var id = (0, import_react2.useRef)(Math.random().toString(36));
  (0, import_react2.useEffect)(function() {
    var safeLayerList = layerList === null || layerList === void 0 ? void 0 : layerList.current;
    var safeId = id.current;
    if (!safeLayerList) {
      return;
    }
    safeLayerList.push(safeId);
    return function() {
      var index = safeLayerList.indexOf(safeId);
      if (index > -1) {
        safeLayerList.splice(index, 1);
      }
    };
  }, [layerList, id]);
  return import_react2.default.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};
var LayeringProvider = function LayeringProvider2(_ref3) {
  var children = _ref3.children;
  var topLevelRef = (0, import_react2.useRef)(0);
  var layerList = (0, import_react2.useRef)([]);
  var value = (0, import_react2.useMemo)(function() {
    return {
      topLevelRef,
      setTopLevel: function setTopLevel(level) {
        topLevelRef.current = level;
      },
      layerList
    };
  }, [topLevelRef, layerList]);
  return import_react2.default.createElement(TopLevelContext.Provider, {
    value
  }, children);
};
var LayeringOld = function LayeringOld2(_ref4) {
  var children = _ref4.children, _ref4$isDisabled = _ref4.isDisabled, isDisabled = _ref4$isDisabled === void 0 ? true : _ref4$isDisabled;
  var currentLevel = (0, import_react2.useContext)(LevelContext);
  if (isDisabled) {
    return import_react2.default.createElement(import_react2.default.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = import_react2.default.createElement(LevelProviderOld, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : import_react2.default.createElement(LayeringProvider, null, content);
};
var LayeringNew = function LayeringNew2(_ref5) {
  var children = _ref5.children, _ref5$isDisabled = _ref5.isDisabled, isDisabled = _ref5$isDisabled === void 0 ? true : _ref5$isDisabled;
  var currentLevel = (0, import_react2.useContext)(LevelContext);
  var parentNode = (0, import_react2.useContext)(LevelNodeContext);
  var newNode = (0, import_react2.useRef)(new LayerNode(Math.random().toString(36), parentNode.current));
  if (isDisabled) {
    return import_react2.default.createElement(import_react2.default.Fragment, null, children);
  }
  var isNested = currentLevel > 0;
  var content = import_react2.default.createElement(LevelProvider, {
    currentLevel: currentLevel + 1,
    node: newNode
  }, children);
  return isNested ? content : import_react2.default.createElement(RootNodeContext.Provider, {
    value: newNode
  }, content);
};
var Layering = componentWithFG("layering-tree-graph", LayeringNew, LayeringOld);

// node_modules/@atlaskit/layering/dist/esm/hooks/index.js
var ESCAPE = "Escape";
function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose, isDisabled = _ref.isDisabled;
  var escapePressed = (0, import_react3.useRef)(false);
  var _useLayering = useLayering(), isLayerDisabled = _useLayering.isLayerDisabled;
  var onKeyDown = (0, import_react3.useCallback)(function(e) {
    var isDisabledLayer = isLayerDisabled();
    if (isDisabled || escapePressed.current || e.key !== ESCAPE || isDisabledLayer) {
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled, isLayerDisabled]);
  var onKeyUp = (0, import_react3.useCallback)(function() {
    escapePressed.current = false;
  }, []);
  (0, import_react3.useEffect)(function() {
    return (0, import_bind_event_listener.bindAll)(window, [{
      type: "keydown",
      listener: onKeyDown
    }, {
      type: "keyup",
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp]);
}
function useLayering() {
  var currentLevel = (0, import_react3.useContext)(LevelContext);
  var _useContext = (0, import_react3.useContext)(TopLevelContext), topLevelRef = _useContext.topLevelRef, layerList = _useContext.layerList;
  var layerNode;
  var rootNode;
  if (fg("layering-tree-graph")) {
    layerNode = (0, import_react3.useContext)(LevelNodeContext);
    rootNode = (0, import_react3.useContext)(RootNodeContext);
  }
  var isLayerDisabled = (0, import_react3.useCallback)(function() {
    var _layerList$current$le, _layerList$current;
    if (fg("layering-tree-graph")) {
      var _layerNode, _rootNode;
      if (!((_layerNode = layerNode) !== null && _layerNode !== void 0 && _layerNode.current) || !((_rootNode = rootNode) !== null && _rootNode !== void 0 && _rootNode.current)) {
        return false;
      }
      return layerNode.current.getLevel() < rootNode.current.getHeight();
    }
    return ((_layerList$current$le = layerList === null || layerList === void 0 || (_layerList$current = layerList.current) === null || _layerList$current === void 0 ? void 0 : _layerList$current.length) !== null && _layerList$current$le !== void 0 ? _layerList$current$le : 0) !== currentLevel;
  }, [currentLevel, layerList, layerNode, rootNode]);
  var getTopLevel = (0, import_react3.useCallback)(function() {
    var _rootNode2;
    return (_rootNode2 = rootNode) !== null && _rootNode2 !== void 0 && _rootNode2.current ? rootNode.current.getHeight() : null;
  }, [rootNode]);
  return fg("layering-tree-graph") ? {
    currentLevel,
    isLayerDisabled,
    getTopLevel
  } : {
    currentLevel,
    topLevelRef,
    isLayerDisabled,
    layerList
  };
}

export {
  Layering,
  useCloseOnEscapePress,
  useLayering
};
//# sourceMappingURL=chunk-QRZAMKHT.js.map
