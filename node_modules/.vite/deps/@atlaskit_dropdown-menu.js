import {
  require_chevron_down,
  svg_default
} from "./chunk-VTM733VP.js";
import {
  Layering,
  useLayering
} from "./chunk-GX2XSFXH.js";
import {
  button_default,
  mergeRefs
} from "./chunk-K3PGWO6G.js";
import "./chunk-65UGL7YN.js";
import {
  useControlled
} from "./chunk-OTDKO2DE.js";
import {
  memoizeOne
} from "./chunk-6X5WLL3E.js";
import {
  KEY_DOWN,
  KEY_END,
  KEY_ENTER,
  KEY_HOME,
  KEY_SPACE,
  KEY_TAB,
  KEY_UP,
  Popper,
  Portal
} from "./chunk-WMGN2J2V.js";
import {
  Manager,
  Reference,
  useNotifyOpenLayerObserver
} from "./chunk-6XFQVCJ4.js";
import "./chunk-G52XTN3B.js";
import "./chunk-A6BIF3LE.js";
import {
  UNSAFE_useMediaQuery,
  box_default,
  inline_default,
  useId,
  use_router_link_default
} from "./chunk-3AN7UMVP.js";
import "./chunk-XUSVWCLU.js";
import "./chunk-ELUWO7X7.js";
import "./chunk-THB4Y6I7.js";
import {
  require_dist
} from "./chunk-CGH4DJNJ.js";
import "./chunk-6B65WPO5.js";
import "./chunk-ORKNSTQ6.js";
import {
  layers,
  spinner_default
} from "./chunk-PLHDLCB6.js";
import {
  B400,
  N10,
  N100,
  N300
} from "./chunk-XIW5VD7B.js";
import {
  esm_default,
  noop,
  visually_hidden_default
} from "./chunk-KXQMNIDH.js";
import "./chunk-ATF5PCW4.js";
import "./chunk-7SLACSS6.js";
import {
  fg,
  init_esm
} from "./chunk-D7HT2YMK.js";
import {
  _objectWithoutProperties,
  _slicedToArray,
  _toConsumableArray,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-OBM4VKST.js";
import "./chunk-SHSMMZOB.js";
import {
  ax,
  cssCustomPropertyValue,
  init_runtime
} from "./chunk-ZNWH4LFA.js";
import {
  _defineProperty,
  init_defineProperty
} from "./chunk-LBGAJG32.js";
import "./chunk-AAY5IJNO.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/tabbable/index.js
var require_tabbable = __commonJS({
  "node_modules/tabbable/index.js"(exports, module) {
    module.exports = function(el, options) {
      options = options || {};
      var elementDocument = el.ownerDocument || el;
      var basicTabbables = [];
      var orderedTabbables = [];
      var isUnavailable = createIsUnavailable(elementDocument);
      var candidateSelectors = [
        "input",
        "select",
        "a[href]",
        "textarea",
        "button",
        "[tabindex]"
      ];
      var candidates = el.querySelectorAll(candidateSelectors.join(","));
      if (options.includeContainer) {
        var matches = Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
        if (candidateSelectors.some(function(candidateSelector) {
          return matches.call(el, candidateSelector);
        })) {
          candidates = Array.prototype.slice.apply(candidates);
          candidates.unshift(el);
        }
      }
      var candidate, candidateIndexAttr, candidateIndex;
      for (var i = 0, l = candidates.length; i < l; i++) {
        candidate = candidates[i];
        candidateIndexAttr = parseInt(candidate.getAttribute("tabindex"), 10);
        candidateIndex = isNaN(candidateIndexAttr) ? candidate.tabIndex : candidateIndexAttr;
        if (candidateIndex < 0 || candidate.tagName === "INPUT" && candidate.type === "hidden" || candidate.disabled || isUnavailable(candidate, elementDocument)) {
          continue;
        }
        if (candidateIndex === 0) {
          basicTabbables.push(candidate);
        } else {
          orderedTabbables.push({
            index: i,
            tabIndex: candidateIndex,
            node: candidate
          });
        }
      }
      var tabbableNodes = orderedTabbables.sort(function(a, b) {
        return a.tabIndex === b.tabIndex ? a.index - b.index : a.tabIndex - b.tabIndex;
      }).map(function(a) {
        return a.node;
      });
      Array.prototype.push.apply(tabbableNodes, basicTabbables);
      return tabbableNodes;
    };
    function createIsUnavailable(elementDocument) {
      var isOffCache = [];
      function isOff(node, nodeComputedStyle) {
        if (node === elementDocument.documentElement)
          return false;
        for (var i = 0, length = isOffCache.length; i < length; i++) {
          if (isOffCache[i][0] === node)
            return isOffCache[i][1];
        }
        nodeComputedStyle = nodeComputedStyle || elementDocument.defaultView.getComputedStyle(node);
        var result = false;
        if (nodeComputedStyle.display === "none") {
          result = true;
        } else if (node.parentNode) {
          result = isOff(node.parentNode);
        }
        isOffCache.push([node, result]);
        return result;
      }
      return function isUnavailable(node) {
        if (node === elementDocument.documentElement)
          return false;
        var computedStyle = elementDocument.defaultView.getComputedStyle(node);
        if (isOff(node, computedStyle))
          return true;
        return computedStyle.visibility === "hidden";
      };
    }
  }
});

// node_modules/focus-trap/index.js
var require_focus_trap = __commonJS({
  "node_modules/focus-trap/index.js"(exports, module) {
    var tabbable = require_tabbable();
    var listeningFocusTrap = null;
    function focusTrap(element, userOptions) {
      var tabbableNodes = [];
      var firstTabbableNode = null;
      var lastTabbableNode = null;
      var nodeFocusedBeforeActivation = null;
      var active = false;
      var paused = false;
      var tabEvent = null;
      var container = typeof element === "string" ? document.querySelector(element) : element;
      var config = userOptions || {};
      config.returnFocusOnDeactivate = userOptions && userOptions.returnFocusOnDeactivate !== void 0 ? userOptions.returnFocusOnDeactivate : true;
      config.escapeDeactivates = userOptions && userOptions.escapeDeactivates !== void 0 ? userOptions.escapeDeactivates : true;
      var trap = {
        activate,
        deactivate,
        pause,
        unpause
      };
      return trap;
      function activate(activateOptions) {
        if (active)
          return;
        var defaultedActivateOptions = {
          onActivate: activateOptions && activateOptions.onActivate !== void 0 ? activateOptions.onActivate : config.onActivate
        };
        active = true;
        paused = false;
        nodeFocusedBeforeActivation = document.activeElement;
        if (defaultedActivateOptions.onActivate) {
          defaultedActivateOptions.onActivate();
        }
        addListeners();
        return trap;
      }
      function deactivate(deactivateOptions) {
        if (!active)
          return;
        var defaultedDeactivateOptions = {
          returnFocus: deactivateOptions && deactivateOptions.returnFocus !== void 0 ? deactivateOptions.returnFocus : config.returnFocusOnDeactivate,
          onDeactivate: deactivateOptions && deactivateOptions.onDeactivate !== void 0 ? deactivateOptions.onDeactivate : config.onDeactivate
        };
        removeListeners();
        if (defaultedDeactivateOptions.onDeactivate) {
          defaultedDeactivateOptions.onDeactivate();
        }
        if (defaultedDeactivateOptions.returnFocus) {
          setTimeout(function() {
            tryFocus(nodeFocusedBeforeActivation);
          }, 0);
        }
        active = false;
        paused = false;
        return this;
      }
      function pause() {
        if (paused || !active)
          return;
        paused = true;
        removeListeners();
      }
      function unpause() {
        if (!paused || !active)
          return;
        paused = false;
        addListeners();
      }
      function addListeners() {
        if (!active)
          return;
        if (listeningFocusTrap) {
          listeningFocusTrap.pause();
        }
        listeningFocusTrap = trap;
        updateTabbableNodes();
        setTimeout(function() {
          tryFocus(firstFocusNode());
        }, 0);
        document.addEventListener("focus", checkFocus, true);
        document.addEventListener("click", checkClick, true);
        document.addEventListener("mousedown", checkPointerDown, true);
        document.addEventListener("touchstart", checkPointerDown, true);
        document.addEventListener("keydown", checkKey, true);
        return trap;
      }
      function removeListeners() {
        if (!active || listeningFocusTrap !== trap)
          return;
        document.removeEventListener("focus", checkFocus, true);
        document.removeEventListener("click", checkClick, true);
        document.removeEventListener("mousedown", checkPointerDown, true);
        document.removeEventListener("touchstart", checkPointerDown, true);
        document.removeEventListener("keydown", checkKey, true);
        listeningFocusTrap = null;
        return trap;
      }
      function getNodeForOption(optionName) {
        var optionValue = config[optionName];
        var node = optionValue;
        if (!optionValue) {
          return null;
        }
        if (typeof optionValue === "string") {
          node = document.querySelector(optionValue);
          if (!node) {
            throw new Error("`" + optionName + "` refers to no known node");
          }
        }
        if (typeof optionValue === "function") {
          node = optionValue();
          if (!node) {
            throw new Error("`" + optionName + "` did not return a node");
          }
        }
        return node;
      }
      function firstFocusNode() {
        var node;
        if (getNodeForOption("initialFocus") !== null) {
          node = getNodeForOption("initialFocus");
        } else if (container.contains(document.activeElement)) {
          node = document.activeElement;
        } else {
          node = tabbableNodes[0] || getNodeForOption("fallbackFocus");
        }
        if (!node) {
          throw new Error("You can't have a focus-trap without at least one focusable element");
        }
        return node;
      }
      function checkPointerDown(e) {
        if (config.clickOutsideDeactivates && !container.contains(e.target)) {
          deactivate({ returnFocus: false });
        }
      }
      function checkClick(e) {
        if (config.clickOutsideDeactivates)
          return;
        if (container.contains(e.target))
          return;
        e.preventDefault();
        e.stopImmediatePropagation();
      }
      function checkFocus(e) {
        if (container.contains(e.target))
          return;
        e.preventDefault();
        e.stopImmediatePropagation();
        if (typeof e.target.blur === "function")
          e.target.blur();
        if (tabEvent) {
          readjustFocus(tabEvent);
        }
      }
      function checkKey(e) {
        if (e.key === "Tab" || e.keyCode === 9) {
          handleTab(e);
        }
        if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
          deactivate();
        }
      }
      function handleTab(e) {
        updateTabbableNodes();
        if (e.target.hasAttribute("tabindex") && Number(e.target.getAttribute("tabindex")) < 0) {
          return tabEvent = e;
        }
        e.preventDefault();
        var currentFocusIndex = tabbableNodes.indexOf(e.target);
        if (e.shiftKey) {
          if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {
            return tryFocus(lastTabbableNode);
          }
          return tryFocus(tabbableNodes[currentFocusIndex - 1]);
        }
        if (e.target === lastTabbableNode)
          return tryFocus(firstTabbableNode);
        tryFocus(tabbableNodes[currentFocusIndex + 1]);
      }
      function updateTabbableNodes() {
        tabbableNodes = tabbable(container);
        firstTabbableNode = tabbableNodes[0];
        lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
      }
      function readjustFocus(e) {
        if (e.shiftKey)
          return tryFocus(lastTabbableNode);
        tryFocus(firstTabbableNode);
      }
    }
    function isEscapeEvent(e) {
      return e.key === "Escape" || e.key === "Esc" || e.keyCode === 27;
    }
    function tryFocus(node) {
      if (!node || !node.focus)
        return;
      if (node === document.activeElement)
        return;
      node.focus();
      if (node.tagName.toLowerCase() === "input") {
        node.select();
      }
    }
    module.exports = focusTrap;
  }
});

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
init_slicedToArray();
var import_react16 = __toESM(require_react());
var import_bind_event_listener3 = __toESM(require_dist());

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-focus-event.js
init_slicedToArray();
var import_react = __toESM(require_react());
function useFocus() {
  var _useState = (0, import_react.useState)(false), _useState2 = _slicedToArray(_useState, 2), isFocused = _useState2[0], setIsFocused = _useState2[1];
  var bindFocus = (0, import_react.useRef)({
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    onBlur: function onBlur() {
      return setIsFocused(false);
    }
  });
  (0, import_react.useEffect)(function() {
    return function() {
      return setIsFocused(false);
    };
  }, []);
  return {
    isFocused,
    bindFocus: bindFocus.current
  };
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
var import_chevron_down = __toESM(require_chevron_down());
init_esm();

// node_modules/@atlaskit/popup/dist/esm/popup.js
init_slicedToArray();
var React3 = __toESM(require_react());
init_runtime();
var import_react10 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/popup/dist/esm/popup.compiled.css";
init_esm();

// node_modules/@atlaskit/popup/dist/esm/popper-wrapper.js
init_slicedToArray();
init_extends();
init_objectWithoutProperties();
var React2 = __toESM(require_react());
var import_react6 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/popup/dist/esm/popper-wrapper.compiled.css";
init_esm();

// node_modules/@atlaskit/popup/dist/esm/reposition-on-update.js
var import_react2 = __toESM(require_react());
var RepositionOnUpdate = function RepositionOnUpdate2(_ref) {
  var children = _ref.children, update = _ref.update;
  var isFirstRenderRef = (0, import_react2.useRef)(true);
  (0, import_react2.useLayoutEffect)(function() {
    if (isFirstRenderRef.current) {
      isFirstRenderRef.current = false;
      return;
    }
    update();
  }, [update]);
  return import_react2.default.createElement(import_react2.Fragment, null, children);
};

// node_modules/@atlaskit/popup/dist/esm/use-close-manager.js
var import_react4 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());
init_esm();

// node_modules/@atlaskit/popup/dist/esm/utils/is-element-interactive.js
var interactiveTags = ["button", "a", "input", "select", "textarea"];
var isInteractiveElement = function isInteractiveElement2(element) {
  if (interactiveTags.includes(element.tagName.toLowerCase())) {
    return true;
  }
  if (element.getAttribute("tabindex") !== null || element.hasAttribute("contenteditable")) {
    return true;
  }
  return false;
};

// node_modules/@atlaskit/popup/dist/esm/utils/use-animation-frame.js
var import_react3 = __toESM(require_react());
var useAnimationFrame = function useAnimationFrame2() {
  var animationsRef = (0, import_react3.useRef)([]);
  var requestFrame = (0, import_react3.useCallback)(function(callback) {
    var id = requestAnimationFrame(callback);
    animationsRef.current.push(id);
    return id;
  }, []);
  var cancelFrame = (0, import_react3.useCallback)(function(id) {
    cancelAnimationFrame(id);
    animationsRef.current = animationsRef.current.filter(function(frameId) {
      return frameId !== id;
    });
  }, []);
  var cancelAllFrames = (0, import_react3.useCallback)(function() {
    animationsRef.current.forEach(function(id) {
      return cancelAnimationFrame(id);
    });
    animationsRef.current = [];
  }, []);
  return {
    requestFrame,
    cancelFrame,
    cancelAllFrames
  };
};

// node_modules/@atlaskit/popup/dist/esm/use-close-manager.js
var useCloseManager = function useCloseManager2(_ref) {
  var isOpen = _ref.isOpen, onClose = _ref.onClose, popupRef = _ref.popupRef, triggerRef = _ref.triggerRef, autoFocus = _ref.autoFocus, shouldDisableFocusTrap = _ref.shouldDisableFocusTrap, capture = _ref.shouldUseCaptureOnOutsideClick, shouldCloseOnTab = _ref.shouldCloseOnTab, shouldRenderToParent = _ref.shouldRenderToParent;
  var _useLayering = useLayering(), isLayerDisabled = _useLayering.isLayerDisabled, currentLevel = _useLayering.currentLevel;
  var _useAnimationFrame = useAnimationFrame(), requestFrame = _useAnimationFrame.requestFrame, cancelAllFrames = _useAnimationFrame.cancelAllFrames;
  (0, import_react4.useEffect)(function() {
    if (!isOpen || !popupRef) {
      return noop;
    }
    var inIframe = window && window.self !== window.top && fg("fix-dropdown-close-outside-iframe");
    var closePopup = function closePopup2(event) {
      if (onClose) {
        var _currentLevel = null;
        if (event.target instanceof HTMLElement) {
          var _event$target$closest;
          _currentLevel = (_event$target$closest = event.target.closest("[data-ds--level]")) === null || _event$target$closest === void 0 ? void 0 : _event$target$closest.getAttribute("data-ds--level");
        }
        _currentLevel ? onClose(event, Number(_currentLevel)) : onClose(event);
      }
      if (shouldDisableFocusTrap && fg("platform_dst_popup-disable-focuslock")) {
        requestFrame(function() {
          triggerRef === null || triggerRef === void 0 || triggerRef.setAttribute("tabindex", "0");
          if (popupRef && autoFocus) {
            popupRef.setAttribute("tabindex", "0");
          }
        });
      }
    };
    var onClick = function onClick2(event) {
      var target = event.target;
      var doesDomNodeExist = document.body.contains(target);
      if (!doesDomNodeExist && !inIframe) {
        return;
      }
      if (isLayerDisabled()) {
        if (target instanceof HTMLElement) {
          var _target$closest;
          var layeredElement = (_target$closest = target.closest) === null || _target$closest === void 0 ? void 0 : _target$closest.call(target, "[data-ds--level]");
          if (layeredElement) {
            var closeType = layeredElement.getAttribute("[data-ds--close--type]");
            if (closeType === "single") {
              return;
            }
            var levelOfClickedLayer = layeredElement.getAttribute("data-ds--level");
            if (levelOfClickedLayer && Number(levelOfClickedLayer) > currentLevel) {
              return;
            }
          }
        }
      }
      var isClickOnPopup = popupRef && popupRef.contains(target);
      var isClickOnTrigger = triggerRef && triggerRef.contains(target);
      if (!isClickOnPopup && !isClickOnTrigger) {
        closePopup(event);
        if (document.activeElement && !isInteractiveElement(document.activeElement) && fg("platform_dst_popup-disable-focuslock")) {
          triggerRef === null || triggerRef === void 0 || triggerRef.focus();
        }
      }
    };
    var onKeyDown = function onKeyDown2(event) {
      if (fg("platform_dst_popup-disable-focuslock")) {
        var key = event.key, shiftKey = event.shiftKey;
        if (shiftKey && key === "Tab" && !shouldRenderToParent) {
          if (isLayerDisabled()) {
            return;
          }
          requestFrame(function() {
            var isPopupFocusOut = popupRef && !popupRef.contains(document.activeElement);
            if (isPopupFocusOut) {
              closePopup(event);
              if (currentLevel === 1) {
                triggerRef === null || triggerRef === void 0 || triggerRef.focus();
              }
            }
          });
          return;
        }
        if (key === "Tab") {
          var _document$activeEleme;
          if (shouldCloseOnTab) {
            if (isLayerDisabled()) {
              return;
            }
            closePopup(event);
            return;
          }
          if (isLayerDisabled() && (_document$activeEleme = document.activeElement) !== null && _document$activeEleme !== void 0 && _document$activeEleme.closest("[aria-modal]")) {
            return;
          }
          if (shouldDisableFocusTrap) {
            if (shouldRenderToParent) {
              requestFrame(function() {
                var isPopupFocusOut = popupRef && !popupRef.contains(document.activeElement);
                if (isPopupFocusOut) {
                  closePopup(event);
                }
              });
            } else {
              requestFrame(function() {
                if (!document.hasFocus()) {
                  closePopup(event);
                }
              });
            }
            return;
          }
        }
        if (isLayerDisabled()) {
          return;
        }
        if (key === "Escape" || key === "Esc") {
          if (triggerRef && autoFocus) {
            triggerRef.focus();
          }
          closePopup(event);
        }
      } else {
        if (isLayerDisabled()) {
          return;
        }
        var _key = event.key;
        if (_key === "Escape" || _key === "Esc" || shouldCloseOnTab && _key === "Tab") {
          closePopup(event);
        }
      }
    };
    var parentUnbind;
    if (inIframe && isOpen) {
      parentUnbind = (0, import_bind_event_listener.bind)(window.parent.window, {
        type: "click",
        listener: onClick,
        options: {
          capture
        }
      });
    }
    var unbind = noop;
    if (fg("popup-onclose-fix")) {
      setTimeout(function() {
        unbind = (0, import_bind_event_listener.bindAll)(window, [{
          type: "click",
          listener: onClick,
          options: {
            capture
          }
        }, {
          type: "keydown",
          listener: onKeyDown
        }]);
      }, 0);
    } else {
      unbind = (0, import_bind_event_listener.bindAll)(window, [{
        type: "click",
        listener: onClick,
        options: {
          capture
        }
      }, {
        type: "keydown",
        listener: onKeyDown
      }]);
    }
    var unbindBlur = noop;
    unbindBlur = (0, import_bind_event_listener.bind)(window, {
      type: "blur",
      listener: function onBlur(e) {
        if (isLayerDisabled() || !(document.activeElement instanceof HTMLIFrameElement)) {
          return;
        }
        closePopup(e);
      }
    });
    return function() {
      var _parentUnbind;
      if (fg("popup-onclose-fix")) {
        setTimeout(function() {
          unbind();
        }, 0);
      } else {
        unbind();
      }
      cancelAllFrames();
      (_parentUnbind = parentUnbind) === null || _parentUnbind === void 0 || _parentUnbind();
      unbindBlur();
    };
  }, [isOpen, onClose, popupRef, triggerRef, autoFocus, shouldDisableFocusTrap, capture, isLayerDisabled, shouldCloseOnTab, currentLevel, shouldRenderToParent, requestFrame, cancelAllFrames]);
};

// node_modules/@atlaskit/popup/dist/esm/use-focus-manager.js
var import_react5 = __toESM(require_react());
var import_focus_trap = __toESM(require_focus_trap());
init_esm();
var useFocusManager = function useFocusManager2(_ref) {
  var initialFocusRef = _ref.initialFocusRef, popupRef = _ref.popupRef, triggerRef = _ref.triggerRef, autoFocus = _ref.autoFocus, shouldCloseOnTab = _ref.shouldCloseOnTab, shouldDisableFocusTrap = _ref.shouldDisableFocusTrap, shouldReturnFocus = _ref.shouldReturnFocus, shouldRenderToParent = _ref.shouldRenderToParent;
  var _useAnimationFrame = useAnimationFrame(), requestFrame = _useAnimationFrame.requestFrame, cancelAllFrames = _useAnimationFrame.cancelAllFrames;
  var _useLayering = useLayering(), currentLevel = _useLayering.currentLevel;
  (0, import_react5.useEffect)(function() {
    if (!popupRef || shouldCloseOnTab) {
      return noop;
    }
    if (shouldDisableFocusTrap && fg("platform_dst_popup-disable-focuslock")) {
      var isDropdown = popupRef.matches("[id^=ds--dropdown--]");
      var popups = document.querySelectorAll('[data-ds--level="'.concat(currentLevel - 1, '"]'));
      if (!(popups[popups.length - 1] && !shouldRenderToParent && isDropdown)) {
        requestFrame(function() {
          triggerRef === null || triggerRef === void 0 || triggerRef.setAttribute("tabindex", "-1");
          if (popupRef && autoFocus) {
            popupRef.setAttribute("tabindex", "-1");
          }
          (initialFocusRef || popupRef).focus();
        });
        return noop;
      }
    }
    var trapConfig = {
      clickOutsideDeactivates: true,
      escapeDeactivates: true,
      initialFocus: initialFocusRef || popupRef,
      fallbackFocus: popupRef,
      returnFocusOnDeactivate: shouldReturnFocus
    };
    var focusTrap = (0, import_focus_trap.default)(popupRef, trapConfig);
    requestFrame(function() {
      focusTrap.activate();
    });
    return function() {
      cancelAllFrames();
      focusTrap.deactivate();
    };
  }, [popupRef, triggerRef, autoFocus, initialFocusRef, shouldCloseOnTab, shouldDisableFocusTrap, requestFrame, cancelAllFrames, shouldReturnFocus, shouldRenderToParent, currentLevel]);
};

// node_modules/@atlaskit/popup/dist/esm/popper-wrapper.js
var _excluded = ["shouldRenderToParent", "shouldFitContainer", "children", "appearance", "className", "isReferenceHidden"];
var wrapperStyles = {
  root: "_2rko12b0 _1e0c1ule _vchhusvi _1pby1nn1 _bfhk1bhr _16qs1cd0 _syaz1fxt _1q1l1bhr _nt751r31 _49pcglyw _1hvw1o36"
};
var focusRingStyles = {
  root: "_mizu194a _1ah3dkaa _ra3xnqa1 _128mdkaa _1cvmnqa1 _4davt94y"
};
var DefaultPopupComponent = (0, import_react6.forwardRef)(function(props, ref) {
  var shouldRenderToParent = props.shouldRenderToParent, shouldFitContainer = props.shouldFitContainer, children = props.children, appearance = props.appearance, className = props.className, isReferenceHidden = props.isReferenceHidden, htmlAttributes = _objectWithoutProperties(props, _excluded);
  return React2.createElement("div", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax([wrapperStyles.root, appearance === "UNSAFE_modal-below-sm" && "_dk5d1b66 _c71ldtre _kqsw1n9t _152t1b66", !shouldRenderToParent && "_1reo1wug _18m91wug", shouldFitContainer && "_1bsb1osq", className])
  }, htmlAttributes, {
    ref
  }), children);
});
function PopperWrapper(_ref) {
  var xcss = _ref.xcss, isOpen = _ref.isOpen, id = _ref.id, offset = _ref.offset, testId = _ref.testId, content = _ref.content, fallbackPlacements = _ref.fallbackPlacements, onClose = _ref.onClose, boundary = _ref.boundary, rootBoundary = _ref.rootBoundary, shouldFlip = _ref.shouldFlip, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "auto" : _ref$placement, _ref$popupComponent = _ref.popupComponent, PopupContainer = _ref$popupComponent === void 0 ? DefaultPopupComponent : _ref$popupComponent, _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus, triggerRef = _ref.triggerRef, shouldUseCaptureOnOutsideClick = _ref.shouldUseCaptureOnOutsideClick, shouldRenderToParent = _ref.shouldRenderToParent, shouldFitContainer = _ref.shouldFitContainer, shouldDisableFocusLock = _ref.shouldDisableFocusLock, _ref$shouldReturnFocu = _ref.shouldReturnFocus, shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu, strategy = _ref.strategy, role = _ref.role, label = _ref.label, titleId = _ref.titleId, modifiers = _ref.modifiers, shouldFitViewport = _ref.shouldFitViewport, _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance;
  var _useState = (0, import_react6.useState)(null), _useState2 = _slicedToArray(_useState, 2), popupRef = _useState2[0], setPopupRef = _useState2[1];
  var _useState3 = (0, import_react6.useState)(null), _useState4 = _slicedToArray(_useState3, 2), initialFocusRef = _useState4[0], setInitialFocusRef = _useState4[1];
  var shouldCloseOnTab = shouldRenderToParent && shouldDisableFocusLock;
  var shouldDisableFocusTrap = role !== "dialog";
  useFocusManager({
    initialFocusRef,
    popupRef,
    shouldCloseOnTab,
    triggerRef,
    autoFocus,
    shouldDisableFocusTrap,
    shouldReturnFocus
  });
  useCloseManager({
    isOpen,
    onClose,
    popupRef,
    triggerRef,
    shouldUseCaptureOnOutsideClick,
    shouldCloseOnTab,
    autoFocus,
    shouldDisableFocusTrap,
    shouldRenderToParent
  });
  var _useLayering = useLayering(), currentLevel = _useLayering.currentLevel;
  var mergedModifiers = (0, import_react6.useMemo)(function() {
    return [{
      name: "flip",
      enabled: shouldFlip,
      options: {
        rootBoundary,
        boundary,
        fallbackPlacements
      }
    }].concat(_toConsumableArray(modifiers || []));
  }, [shouldFlip, rootBoundary, boundary, fallbackPlacements, modifiers]);
  return React2.createElement(Popper, {
    placement,
    offset,
    modifiers: mergedModifiers,
    strategy,
    shouldFitViewport
  }, function(_ref2) {
    var _ref3 = _ref2.ref, style = _ref2.style, placement2 = _ref2.placement, update = _ref2.update, isReferenceHidden = _ref2.isReferenceHidden;
    var popupContainer = React2.createElement(
      PopupContainer,
      {
        className: ax([
          xcss,
          // @ts-expect-error: `ax` is not typed correctly
          !initialFocusRef && // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
          fg("platform-design-system-apply-popup-wrapper-focus") && focusRingStyles.root
        ]),
        appearance,
        id,
        "data-ds--level": currentLevel,
        "data-placement": placement2,
        "data-testid": testId,
        role,
        "aria-label": label,
        "aria-labelledby": titleId,
        ref: function ref(node) {
          if (node) {
            if (typeof _ref3 === "function") {
              _ref3(node);
            } else {
              _ref3.current = node;
            }
            setPopupRef(node);
          }
        },
        style: appearance === "UNSAFE_modal-below-sm" ? {} : style,
        tabIndex: autoFocus ? 0 : void 0,
        shouldRenderToParent,
        shouldFitContainer,
        isReferenceHidden
      },
      React2.createElement(RepositionOnUpdate, {
        update
      }, content({
        update,
        isOpen,
        onClose,
        setInitialFocusRef
      }))
    );
    return React2.createElement(import_react6.Fragment, null, popupContainer, appearance === "UNSAFE_modal-below-sm" && React2.createElement("div", {
      className: ax(["_1r04idpf _kqsw1n9t _bfhk10xm"])
    }));
  });
}
var popper_wrapper_default = PopperWrapper;

// node_modules/@atlaskit/popup/dist/esm/use-appearance.js
init_slicedToArray();
var import_react7 = __toESM(require_react());
function usePopupAppearance(_ref) {
  var _appearance = _ref.appearance, _shouldRenderToParent = _ref.shouldRenderToParent;
  var mq = UNSAFE_useMediaQuery("below.sm", function(e) {
    setIsSmallViewport(!!e.matches);
  });
  var _useState = (0, import_react7.useState)(!!(mq !== null && mq !== void 0 && mq.matches)), _useState2 = _slicedToArray(_useState, 2), isSmallViewport = _useState2[0], setIsSmallViewport = _useState2[1];
  var appearance = _appearance === "UNSAFE_modal-below-sm" && isSmallViewport ? "UNSAFE_modal-below-sm" : "default";
  var shouldRenderToParent = _shouldRenderToParent && appearance === "default";
  return {
    appearance,
    shouldRenderToParent
  };
}

// node_modules/@atlaskit/popup/dist/esm/use-get-memoized-merged-trigger-ref.js
init_slicedToArray();
var import_react8 = __toESM(require_react());
var useGetMemoizedMergedTriggerRef = function useGetMemoizedMergedTriggerRef2() {
  var _useState = (0, import_react8.useState)(function() {
    return memoizeOne(function(ref, setTriggerRef, isOpen) {
      return function(node) {
        if (node && isOpen) {
          if (typeof ref === "function") {
            ref(node);
          } else if (ref) {
            ref.current = node;
          }
          setTriggerRef(node);
        }
      };
    });
  }), _useState2 = _slicedToArray(_useState, 1), getMemoizedMergedTriggerRef = _useState2[0];
  return getMemoizedMergedTriggerRef;
};

// node_modules/@atlaskit/popup/dist/esm/use-get-memoized-merged-trigger-ref-new.js
init_slicedToArray();
var import_react9 = __toESM(require_react());
var useGetMemoizedMergedTriggerRefNew = function useGetMemoizedMergedTriggerRefNew2() {
  var _useState = (0, import_react9.useState)(function() {
    return memoizeOne(function(ref, setTriggerRef) {
      return function(node) {
        if (node) {
          if (typeof ref === "function") {
            ref(node);
          } else if (ref) {
            ref.current = node;
          }
          setTriggerRef(node);
        }
      };
    });
  }), _useState2 = _slicedToArray(_useState, 1), getMemoizedMergedTriggerRefNew = _useState2[0];
  return getMemoizedMergedTriggerRefNew;
};

// node_modules/@atlaskit/popup/dist/esm/popup.js
var defaultLayer = 400;
var wrapperStyles2 = {
  root: "_kqswh2mm"
};
var Popup = (0, import_react10.memo)(function(_ref) {
  var xcss = _ref.xcss, _ref$appearance = _ref.appearance, inAppearance = _ref$appearance === void 0 ? "default" : _ref$appearance, isOpen = _ref.isOpen, providedId = _ref.id, offset = _ref.offset, testId = _ref.testId, trigger = _ref.trigger, content = _ref.content, onClose = _ref.onClose, boundary = _ref.boundary, _ref$rootBoundary = _ref.rootBoundary, rootBoundary = _ref$rootBoundary === void 0 ? "viewport" : _ref$rootBoundary, _ref$shouldFlip = _ref.shouldFlip, shouldFlip = _ref$shouldFlip === void 0 ? true : _ref$shouldFlip, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "auto" : _ref$placement, fallbackPlacements = _ref.fallbackPlacements, PopupContainer = _ref.popupComponent, _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus, _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? defaultLayer : _ref$zIndex, _ref$shouldUseCapture = _ref.shouldUseCaptureOnOutsideClick, shouldUseCaptureOnOutsideClick = _ref$shouldUseCapture === void 0 ? false : _ref$shouldUseCapture, _ref$shouldRenderToPa = _ref.shouldRenderToParent, inShouldRenderToParent = _ref$shouldRenderToPa === void 0 ? false : _ref$shouldRenderToPa, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$shouldDisableFoc = _ref.shouldDisableFocusLock, shouldDisableFocusLock = _ref$shouldDisableFoc === void 0 ? false : _ref$shouldDisableFoc, _ref$shouldReturnFocu = _ref.shouldReturnFocus, shouldReturnFocus = _ref$shouldReturnFocu === void 0 ? true : _ref$shouldReturnFocu, strategy = _ref.strategy, role = _ref.role, label = _ref.label, titleId = _ref.titleId, modifiers = _ref.modifiers, shouldFitViewport = _ref.shouldFitViewport;
  var _useState = (0, import_react10.useState)(null), _useState2 = _slicedToArray(_useState, 2), triggerRef = _useState2[0], setTriggerRef = _useState2[1];
  var getMergedTriggerRef = useGetMemoizedMergedTriggerRef();
  var getMergedTriggerRefNew = useGetMemoizedMergedTriggerRefNew();
  var generatedId = useId();
  var _usePopupAppearance = usePopupAppearance({
    appearance: inAppearance,
    shouldRenderToParent: inShouldRenderToParent
  }), appearance = _usePopupAppearance.appearance, shouldRenderToParent = _usePopupAppearance.shouldRenderToParent;
  var id = providedId || generatedId;
  var handleOpenLayerObserverCloseSignal = (0, import_react10.useCallback)(function() {
    onClose === null || onClose === void 0 || onClose(null);
  }, [onClose]);
  useNotifyOpenLayerObserver({
    isOpen,
    onClose: handleOpenLayerObserverCloseSignal
  });
  var renderPopperWrapper = React3.createElement(Layering, {
    isDisabled: false
  }, React3.createElement(popper_wrapper_default, {
    xcss,
    appearance,
    content,
    isOpen,
    placement,
    fallbackPlacements,
    boundary,
    rootBoundary,
    shouldFlip,
    offset,
    popupComponent: PopupContainer,
    id,
    testId,
    onClose,
    autoFocus,
    shouldUseCaptureOnOutsideClick,
    shouldRenderToParent: shouldRenderToParent || shouldFitContainer,
    shouldFitContainer,
    shouldDisableFocusLock,
    shouldReturnFocus,
    triggerRef,
    strategy: shouldFitContainer ? "absolute" : strategy,
    role,
    label,
    titleId,
    modifiers,
    shouldFitViewport
  }));
  var popupContent = React3.createElement(Manager, null, React3.createElement(Reference, null, function(_ref2) {
    var ref = _ref2.ref;
    return trigger({
      ref: !fg("platform-design-system-popup-ref") ? getMergedTriggerRef(ref, setTriggerRef, isOpen) : getMergedTriggerRefNew(ref, setTriggerRef),
      "aria-controls": isOpen ? id : void 0,
      "aria-expanded": isOpen,
      "aria-haspopup": role === "dialog" && fg("platform_dst_popup-disable-focuslock") ? "dialog" : true
    });
  }), isOpen && (shouldRenderToParent || shouldFitContainer ? renderPopperWrapper : React3.createElement(Portal, {
    zIndex
  }, renderPopperWrapper)));
  if (shouldFitContainer) {
    return React3.createElement(box_default, {
      xcss: wrapperStyles2.root
    }, popupContent);
  }
  return popupContent;
});

// node_modules/@atlaskit/popup/dist/esm/index.js
var esm_default2 = Popup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/focus-manager.js
init_slicedToArray();
var import_react11 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/handle-focus.js
init_defineProperty();
init_esm();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/use-generated-id.js
var PREFIX = "ds--dropdown--";
function useGeneratedId() {
  var id = useId();
  return "".concat(PREFIX).concat(id);
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/handle-focus.js
var actionMap = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, KEY_DOWN, "next"), KEY_UP, "prev"), KEY_HOME, "first"), KEY_END, "last");
var getNextFocusableElement = function getNextFocusableElement2(refs, currentFocusedIdx) {
  for (var i = 0; i < refs.length - 1; i++) {
    if (currentFocusedIdx + 1 === refs.length) {
      currentFocusedIdx = 0;
    } else {
      currentFocusedIdx++;
    }
    var element = refs[currentFocusedIdx].current;
    var isValid = !!element && !element.hasAttribute("disabled");
    if (isValid) {
      return element;
    }
  }
};
var getPrevFocusableElement = function getPrevFocusableElement2(refs, currentFocusedIdx) {
  for (var i = 0; i < refs.length - 1; i++) {
    if (currentFocusedIdx === 0) {
      currentFocusedIdx = refs.length - 1;
    } else {
      currentFocusedIdx--;
    }
    var element = refs[currentFocusedIdx].current;
    var isValid = !!element && !element.hasAttribute("disabled");
    if (isValid) {
      return element;
    }
  }
};
function handleFocus(refs, isLayerDisabled, onClose) {
  return function(e) {
    var _refs$current;
    var currentRefs = (_refs$current = refs.current) !== null && _refs$current !== void 0 ? _refs$current : [];
    var currentFocusedIdx = currentRefs.findIndex(function(_ref) {
      var _document$activeEleme;
      var el = _ref.current;
      return el && ((_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.isSameNode(el));
    });
    if (fg("platform_dst_popup-disable-focuslock")) {
      var _document$activeEleme2;
      var isNestedDropdown = !!((_document$activeEleme2 = document.activeElement) !== null && _document$activeEleme2 !== void 0 && _document$activeEleme2.closest("[id^=".concat(PREFIX, "]")));
      if (isLayerDisabled() && isNestedDropdown) {
        if (e.key === KEY_TAB && !e.shiftKey) {
          onClose(e);
        }
        return;
      }
    } else {
      if (isLayerDisabled()) {
        if (e.key === KEY_TAB && !e.shiftKey) {
          onClose(e);
        }
        return;
      }
    }
    var action = actionMap[e.key];
    switch (action) {
      case "next":
        e.preventDefault();
        var nextFocusableElement = getNextFocusableElement(currentRefs, currentFocusedIdx);
        nextFocusableElement === null || nextFocusableElement === void 0 || nextFocusableElement.focus();
        break;
      case "prev":
        e.preventDefault();
        var prevFocusableElement = getPrevFocusableElement(currentRefs, currentFocusedIdx);
        prevFocusableElement === null || prevFocusableElement === void 0 || prevFocusableElement.focus();
        break;
      case "first":
        e.preventDefault();
        var firstFocusableElement = getNextFocusableElement(currentRefs, -1);
        firstFocusableElement === null || firstFocusableElement === void 0 || firstFocusableElement.focus();
        break;
      case "last":
        e.preventDefault();
        var lastFocusableElement = getPrevFocusableElement(currentRefs, currentRefs.length);
        lastFocusableElement === null || lastFocusableElement === void 0 || lastFocusableElement.focus();
        break;
      default:
        return;
    }
  };
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/focus-manager.js
var FocusManagerContext = (0, import_react11.createContext)({
  menuItemRefs: [],
  registerRef: noop
});
var FocusManager = function FocusManager2(_ref) {
  var children = _ref.children, onClose = _ref.onClose;
  var menuItemRefs = (0, import_react11.useRef)([]);
  var _useState = (0, import_react11.useState)(0), _useState2 = _slicedToArray(_useState, 2), refresh = _useState2[0], setRefresh = _useState2[1];
  var registerMode = (0, import_react11.useRef)("ordered");
  registerMode.current = "ordered";
  var registerRef = (0, import_react11.useCallback)(
    function(ref) {
      if (menuItemRefs.current.includes(ref)) {
        return;
      }
      switch (registerMode.current) {
        case "ordered":
          menuItemRefs.current.push(ref);
          break;
        case "unordered":
          registerMode.current = "regenerate";
          menuItemRefs.current = [];
          setRefresh(refresh + 1);
          break;
        case "regenerate":
          break;
        default:
          throw new Error("Unexpected case of ".concat(registerMode.current));
      }
    },
    // Updating register ref on force reload will cause `useRegisterItemWithFocusManager` to re-register
    [refresh]
  );
  var _useLayering = useLayering(), isLayerDisabled = _useLayering.isLayerDisabled;
  (0, import_react11.useEffect)(function() {
    if (registerMode.current === "ordered") {
      registerMode.current = "unordered";
    }
  });
  (0, import_react11.useEffect)(function() {
    return (0, import_bind_event_listener2.bind)(window, {
      type: "keydown",
      listener: handleFocus(menuItemRefs, isLayerDisabled, onClose)
    });
  }, [isLayerDisabled, onClose]);
  var contextValue = {
    menuItemRefs: menuItemRefs.current,
    registerRef
  };
  return import_react11.default.createElement(FocusManagerContext.Provider, {
    value: contextValue
  }, children);
};
var focus_manager_default = FocusManager;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.js
var React6 = __toESM(require_react());
init_runtime();
var import_react13 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.compiled.css";

// node_modules/@atlaskit/menu/dist/esm/menu-section/menu-group.js
init_extends();
init_objectWithoutProperties();
var React5 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/menu/dist/esm/menu-section/menu-group.compiled.css";

// node_modules/@atlaskit/menu/dist/esm/internal/components/menu-context.js
var import_react12 = __toESM(require_react());
var SpacingContext = (0, import_react12.createContext)("cozy");
var SELECTION_STYLE_CONTEXT_DO_NOT_USE = (0, import_react12.createContext)("border");

// node_modules/@atlaskit/menu/dist/esm/menu-section/menu-group.js
var _excluded2 = ["isLoading", "maxWidth", "minWidth", "minHeight", "maxHeight", "testId", "role", "spacing", "menuLabel", "className"];
var MenuGroup = function MenuGroup2(_ref) {
  var isLoading = _ref.isLoading, maxWidth = _ref.maxWidth, minWidth = _ref.minWidth, minHeight = _ref.minHeight, maxHeight = _ref.maxHeight, testId = _ref.testId, role = _ref.role, _ref$spacing = _ref.spacing, spacing = _ref$spacing === void 0 ? "cozy" : _ref$spacing, menuLabel = _ref.menuLabel, UNSAFE_className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded2);
  return React5.createElement(SpacingContext.Provider, {
    value: spacing
  }, React5.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "border"
  }, React5.createElement("div", _extends({
    "aria-busy": isLoading,
    style: {
      minWidth,
      maxWidth,
      minHeight,
      maxHeight
    },
    "data-testid": testId,
    role,
    className: ax(["_1reo1wug _18m91wug _1e0c1txw _kqswpfqs _2lx21bp4", UNSAFE_className]),
    "aria-label": menuLabel
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest))));
};
var menu_group_default = MenuGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-checkbox-item.js
function isCheckboxItem(element) {
  var role = element.getAttribute("role");
  return role === "checkbox" || role === "menuitemcheckbox";
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/is-radio-item.js
function isCheckboxItem2(element) {
  var role = element.getAttribute("role");
  return role === "radio" || role === "menuitemradio";
}

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/menu-wrapper.js
var styles = {
  spinnerContainer: "_1e0c1txw _1ul91lit _1bah1h6o _ca0qv47k _u5f3v47k _n3tdv47k _19bvv47k"
};
var LoadingIndicator = function LoadingIndicator2(_ref) {
  var _ref$statusLabel = _ref.statusLabel, statusLabel = _ref$statusLabel === void 0 ? "Loading" : _ref$statusLabel, testId = _ref.testId;
  return React6.createElement(box_default, {
    xcss: styles.spinnerContainer,
    role: "menuitem"
  }, React6.createElement(spinner_default, {
    size: "small",
    label: statusLabel,
    testId
  }));
};
var MenuWrapper = function MenuWrapper2(_ref2) {
  var children = _ref2.children, isLoading = _ref2.isLoading, maxHeight = _ref2.maxHeight, maxWidth = _ref2.maxWidth, onClose = _ref2.onClose, onUpdate = _ref2.onUpdate, statusLabel = _ref2.statusLabel, setInitialFocusRef = _ref2.setInitialFocusRef, shouldRenderToParent = _ref2.shouldRenderToParent, spacing = _ref2.spacing, testId = _ref2.testId, isTriggeredUsingKeyboard = _ref2.isTriggeredUsingKeyboard, autoFocus = _ref2.autoFocus, menuLabel = _ref2.menuLabel;
  var _useContext = (0, import_react13.useContext)(FocusManagerContext), menuItemRefs = _useContext.menuItemRefs;
  var closeOnMenuItemClick = function closeOnMenuItemClick2(e) {
    var isTargetMenuItemOrDescendant = menuItemRefs.some(function(menuItemRef) {
      var menuItem = menuItemRef.current;
      if (!menuItem) {
        return false;
      }
      var isCheckboxOrRadio = isCheckboxItem(menuItem) || isCheckboxItem2(menuItem);
      return menuItem.contains(e.target) && !isCheckboxOrRadio;
    });
    if (isTargetMenuItemOrDescendant && onClose) {
      onClose(e);
    }
  };
  (0, import_react13.useLayoutEffect)(function() {
    onUpdate();
  }, [isLoading, onUpdate]);
  (0, import_react13.useEffect)(function() {
    var _menuItemRefs$map$fin;
    var firstFocusableRef = (_menuItemRefs$map$fin = menuItemRefs.map(function(_ref3) {
      var current = _ref3.current;
      return current;
    }).find(function(el) {
      return !!el && !el.hasAttribute("disabled");
    })) !== null && _menuItemRefs$map$fin !== void 0 ? _menuItemRefs$map$fin : null;
    if (shouldRenderToParent && (isTriggeredUsingKeyboard || autoFocus)) {
      firstFocusableRef === null || firstFocusableRef === void 0 || firstFocusableRef.focus();
    }
    setInitialFocusRef === null || setInitialFocusRef === void 0 || setInitialFocusRef(firstFocusableRef);
  }, [menuItemRefs, setInitialFocusRef, autoFocus, shouldRenderToParent, isTriggeredUsingKeyboard]);
  return React6.createElement(menu_group_default, {
    isLoading,
    maxHeight,
    maxWidth,
    onClick: closeOnMenuItemClick,
    role: "menu",
    spacing,
    testId: testId && "".concat(testId, "--menu-group"),
    menuLabel
  }, isLoading ? React6.createElement(LoadingIndicator, {
    statusLabel,
    testId: testId && "".concat(testId, "--loading-indicator")
  }) : children);
};
var menu_wrapper_default = MenuWrapper;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/context/selection-store.js
var import_react14 = __toESM(require_react());
var SelectionStoreContext = (0, import_react14.createContext)({
  setItemState: noop,
  getItemState: function getItemState() {
    return void 0;
  },
  setGroupState: noop,
  getGroupState: function getGroupState() {
    return {};
  }
});
var SelectionStore = function SelectionStore2(props) {
  var children = props.children;
  var store = (0, import_react14.useRef)({});
  var context = (0, import_react14.useMemo)(function() {
    return {
      setItemState: function setItemState(group, id, value) {
        if (!store.current[group]) {
          store.current[group] = {};
        }
        store.current[group][id] = value;
      },
      getItemState: function getItemState2(group, id) {
        if (!store.current[group]) {
          return void 0;
        }
        return store.current[group][id];
      },
      setGroupState: function setGroupState(group, value) {
        store.current[group] = value;
      },
      getGroupState: function getGroupState2(group) {
        return store.current[group] || {};
      }
    };
  }, []);
  return import_react14.default.createElement(SelectionStoreContext.Provider, {
    value: context
  }, children);
};
var selection_store_default = SelectionStore;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-register-item-with-focus-manager.js
var import_react15 = __toESM(require_react());
init_esm();
function useRegisterItemWithFocusManager() {
  var hasPopup = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
  var _useContext = (0, import_react15.useContext)(FocusManagerContext), registerRef = _useContext.registerRef;
  var itemRef = (0, import_react15.useRef)(null);
  (0, import_react15.useEffect)(function() {
    if (hasPopup && fg("select-avoid-duplicated-registered-ref")) {
      return;
    }
    registerRef(itemRef);
  }, [registerRef, hasPopup]);
  return itemRef;
}
var use_register_item_with_focus_manager_default = useRegisterItemWithFocusManager;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu.js
var _excluded3 = ["ref", "aria-controls", "aria-expanded", "aria-haspopup"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var MAX_HEIGHT = "calc(100vh - 16px)";
var opposites = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left",
  start: "end",
  auto: "auto",
  end: "start"
};
var getFallbackPlacements = function getFallbackPlacements2(placement) {
  var placementPieces = placement.split("-");
  var mainAxis = placementPieces[0];
  if (!["top", "bottom"].includes(mainAxis)) {
    return void 0;
  } else if (placementPieces.length === 2 && ["start", "end"].includes(placementPieces[1])) {
    var crossAxis = placementPieces[1];
    return ["".concat(mainAxis), "".concat(mainAxis, "-").concat(opposites[crossAxis]), "".concat(opposites[mainAxis], "-").concat(crossAxis), "".concat(opposites[mainAxis]), "".concat(opposites[mainAxis], "-").concat(opposites[crossAxis]), "auto"];
  } else {
    return ["".concat(mainAxis, "-start"), "".concat(mainAxis, "-end"), "".concat(opposites[mainAxis]), "".concat(opposites[mainAxis], "-start"), "".concat(opposites[mainAxis], "-end"), "auto"];
  }
};
function isKeyboardEvent(event) {
  return event !== null && (event instanceof KeyboardEvent || "nativeEvent" in event && event.nativeEvent instanceof KeyboardEvent);
}
var DropdownMenu = function DropdownMenu2(_ref) {
  var _ref$autoFocus = _ref.autoFocus, autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus, children = _ref.children, _ref$defaultOpen = _ref.defaultOpen, defaultOpen = _ref$defaultOpen === void 0 ? false : _ref$defaultOpen, _ref$isLoading = _ref.isLoading, isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading, isOpen = _ref.isOpen, _ref$onOpenChange = _ref.onOpenChange, onOpenChange = _ref$onOpenChange === void 0 ? noop : _ref$onOpenChange, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom-start" : _ref$placement, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$shouldFlip = _ref.shouldFlip, shouldFlip = _ref$shouldFlip === void 0 ? true : _ref$shouldFlip, _ref$shouldRenderToPa = _ref.shouldRenderToParent, shouldRenderToParent = _ref$shouldRenderToPa === void 0 ? false : _ref$shouldRenderToPa, returnFocusRef = _ref.returnFocusRef, spacing = _ref.spacing, statusLabel = _ref.statusLabel, testId = _ref.testId, _trigger = _ref.trigger, _ref$zIndex = _ref.zIndex, zIndex = _ref$zIndex === void 0 ? layers.modal() : _ref$zIndex, label = _ref.label, interactionName = _ref.interactionName, strategy = _ref.strategy, menuLabel = _ref.menuLabel;
  var _useControlledState = useControlled(isOpen, function() {
    return defaultOpen;
  }), _useControlledState2 = _slicedToArray(_useControlledState, 2), isLocalOpen = _useControlledState2[0], setLocalIsOpen = _useControlledState2[1];
  var triggerRef = (0, import_react16.useRef)(null);
  var _useState = (0, import_react16.useState)(false), _useState2 = _slicedToArray(_useState, 2), isTriggeredUsingKeyboard = _useState2[0], setTriggeredUsingKeyboard = _useState2[1];
  var id = useGeneratedId();
  var itemRef = use_register_item_with_focus_manager_default();
  var _useLayering = useLayering(), currentLevel = _useLayering.currentLevel;
  var fallbackPlacements = (0, import_react16.useMemo)(function() {
    return getFallbackPlacements(placement);
  }, [placement]);
  var handleTriggerClicked = (0, import_react16.useCallback)(
    // TODO: event is an `any` and is being cast incorrectly
    // This means that the public type for `onOpenChange` is incorrect
    // current: (event: React.MouseEvent | React.KeyboardEvent) => void;
    // correct: (event: React.MouseEvent | KeyboardEvent) => void;
    // https://product-fabric.atlassian.net/browse/DSP-4692
    function(event) {
      var newValue = !isLocalOpen;
      var clientX = event.clientX, clientY = event.clientY, type = event.type, detail = event.detail;
      if (type === "keydown") {
        setTriggeredUsingKeyboard(true);
      } else if (clientX === 0 || clientY === 0) {
        setTriggeredUsingKeyboard(true);
      } else if (detail === 0) {
        setTriggeredUsingKeyboard(true);
      } else {
        var _itemRef$current;
        itemRef === null || itemRef === void 0 || (_itemRef$current = itemRef.current) === null || _itemRef$current === void 0 || _itemRef$current.focus();
        setTriggeredUsingKeyboard(false);
      }
      setLocalIsOpen(newValue);
      onOpenChange({
        isOpen: newValue,
        event
      });
    },
    [isLocalOpen, setLocalIsOpen, onOpenChange, itemRef]
  );
  var handleOnClose = (0, import_react16.useCallback)(function(event, currentLevel2) {
    var _event$target$closest, _event$target;
    var isTabOrEscapeKey = isKeyboardEvent(event) && (event.key === "Tab" || event.key === "Escape");
    if (event !== null && !isTabOrEscapeKey && event.target instanceof HTMLElement && (_event$target$closest = (_event$target = event.target).closest) !== null && _event$target$closest !== void 0 && _event$target$closest.call(_event$target, "[id^=".concat(PREFIX, "] [aria-haspopup]"))) {
      var _itemRef$current2;
      if (!currentLevel2) {
        return;
      }
      var toCloseLevel = (_itemRef$current2 = itemRef.current) === null || _itemRef$current2 === void 0 ? void 0 : _itemRef$current2.dataset["ds-Level"];
      if (toCloseLevel && Number(toCloseLevel) < currentLevel2) {
        return;
      }
    }
    if (returnFocusRef) {
      requestAnimationFrame(function() {
        var _returnFocusRef$curre;
        (_returnFocusRef$curre = returnFocusRef.current) === null || _returnFocusRef$curre === void 0 || _returnFocusRef$curre.focus();
      });
    } else if (isKeyboardEvent(event) && (event.key === "Tab" && event.shiftKey || event.key === "Escape")) {
      requestAnimationFrame(function() {
        var _itemRef$current3;
        (_itemRef$current3 = itemRef.current) === null || _itemRef$current3 === void 0 || _itemRef$current3.focus();
      });
    } else if (triggerRef.current) {
      var _event$target$closest2, _event$target2;
      var isClickOutsideMenu = (event === null || event === void 0 ? void 0 : event.target) instanceof HTMLElement && ((_event$target$closest2 = (_event$target2 = event.target).closest) === null || _event$target$closest2 === void 0 ? void 0 : _event$target$closest2.call(_event$target2, '[role="menu"]')) === null;
      var shouldPreventFocus = isClickOutsideMenu && document.activeElement !== document.body;
      if (!shouldPreventFocus) {
        requestAnimationFrame(function() {
          var _triggerRef$current;
          (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 || _triggerRef$current.focus();
        });
      }
    }
    var newValue = false;
    setLocalIsOpen(newValue);
    onOpenChange({
      isOpen: newValue,
      event
    });
  }, [itemRef, onOpenChange, returnFocusRef, setLocalIsOpen]);
  var _useFocus = useFocus(), isFocused = _useFocus.isFocused, bindFocus = _useFocus.bindFocus;
  (0, import_react16.useEffect)(function() {
    if (!isFocused) {
      return noop;
    }
    if (isLocalOpen) {
      return noop;
    }
    return (0, import_bind_event_listener3.bind)(window, {
      type: "keydown",
      listener: function openOnKeyDown(e) {
        var isNestedTriggerButton;
        if (e.target instanceof HTMLElement) {
          isNestedTriggerButton = e.target.closest("[id^=".concat(PREFIX, "] [aria-haspopup]"));
        }
        if (e.key === KEY_DOWN && !isNestedTriggerButton) {
          e.preventDefault();
          handleTriggerClicked(e);
        } else if ((e.code === KEY_SPACE || e.key === KEY_ENTER) && e.detail === 0) {
          setTriggeredUsingKeyboard(true);
        } else if (e.key === KEY_TAB && isNestedTriggerButton) {
          handleOnClose(e);
        }
      }
    });
  }, [isFocused, isLocalOpen, handleTriggerClicked, handleOnClose]);
  var conditionalProps = shouldFitContainer ? {
    shouldFitContainer,
    // When shouldFitContainer is true, `fixed` positions are not allowed
    strategy: strategy !== "fixed" ? strategy : void 0
  } : {
    shouldRenderToParent,
    strategy
  };
  return import_react16.default.createElement(selection_store_default, null, import_react16.default.createElement(esm_default2, _extends({
    id: isLocalOpen ? id : void 0,
    shouldFlip,
    isOpen: isLocalOpen,
    shouldReturnFocus: (
      // If returnFocusRef is provided, we **don't** want to return focus to the trigger.
      // Otherwise, Popup will focus on the dropdown trigger after the `returnFocusRef` element is focused.
      returnFocusRef === void 0
    ),
    onClose: handleOnClose,
    zIndex,
    placement,
    role: shouldRenderToParent && currentLevel > 0 && fg("platform-dst-nested-dropdown-menu-role") ? "group" : void 0,
    fallbackPlacements,
    testId: testId && "".concat(testId, "--content"),
    shouldUseCaptureOnOutsideClick: true
  }, conditionalProps, {
    shouldDisableFocusLock: true,
    trigger: function trigger(_ref2) {
      var ref = _ref2.ref, ariaControls = _ref2["aria-controls"], ariaExpanded = _ref2["aria-expanded"], ariaHasPopup = _ref2["aria-haspopup"], rest = _objectWithoutProperties(_ref2, _excluded3);
      if (typeof _trigger === "function") {
        return _trigger(_objectSpread(_objectSpread(_objectSpread({
          "aria-controls": ariaControls,
          "aria-expanded": ariaExpanded,
          "aria-haspopup": ariaHasPopup
        }, rest), bindFocus), {}, {
          triggerRef: mergeRefs([ref, triggerRef, itemRef]),
          isSelected: isLocalOpen,
          onClick: handleTriggerClicked,
          testId: testId && "".concat(testId, "--trigger")
        }));
      }
      return import_react16.default.createElement(button_default, _extends({}, bindFocus, {
        ref: mergeRefs([ref, triggerRef, itemRef]),
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-haspopup": ariaHasPopup,
        isSelected: isLocalOpen,
        iconAfter: function iconAfter(iconProps) {
          return import_react16.default.createElement(import_chevron_down.default, _extends({}, iconProps, {
            size: "small"
          }));
        },
        onClick: handleTriggerClicked,
        testId: testId && "".concat(testId, "--trigger"),
        "aria-label": label,
        interactionName
      }), _trigger);
    },
    content: function content(_ref3) {
      var setInitialFocusRef = _ref3.setInitialFocusRef, update = _ref3.update;
      return import_react16.default.createElement(focus_manager_default, {
        onClose: handleOnClose
      }, import_react16.default.createElement(menu_wrapper_default, {
        spacing,
        maxHeight: MAX_HEIGHT,
        maxWidth: shouldFitContainer ? void 0 : 800,
        onClose: handleOnClose,
        onUpdate: update,
        isLoading,
        statusLabel,
        setInitialFocusRef: isTriggeredUsingKeyboard || autoFocus ? setInitialFocusRef : void 0,
        shouldRenderToParent: shouldRenderToParent || shouldFitContainer,
        isTriggeredUsingKeyboard,
        autoFocus,
        testId: testId && "".concat(testId, "--menu-wrapper"),
        menuLabel
      }, children));
    }
  })));
};
var dropdown_menu_default = DropdownMenu;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item-group.js
init_extends();
init_objectWithoutProperties();
var import_react24 = __toESM(require_react());

// node_modules/@atlaskit/menu/dist/esm/menu-item/button-item.js
init_extends();
init_objectWithoutProperties();
var React10 = __toESM(require_react());
init_runtime();
var import_react18 = __toESM(require_react());

// node_modules/@atlaskit/menu/dist/esm/internal/components/menu-item-primitive.js
var React9 = __toESM(require_react());
var import_react17 = __toESM(require_react());
init_runtime();
init_esm();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/menu/dist/esm/internal/components/menu-item-primitive.compiled.css";
var renderTitle = function renderTitle2(Component, props) {
  return (
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
    React9.createElement(Component, props)
  );
};
var styles2 = {
  root: "_19itidpf _12ji1r31 _1qu2glyw _12y3idpf _4bfu1r31 _1hmsglyw _ajmmnqa1 _kqswh2mm _1e0c1txw _vchhusvi _1bsb1osq _1tke1ylp _1pfhze3t _12l2ze3t _6rthze3t _ahbqze3t _4cvr1h6o _uiztglyw _80omtlke _ymio1r31 _ypr0glyw _zcxs1o36 _nt75194a _mizu194a _1bg41gjf _1ah31gjf _49pcnqa1 _ra3xnqa1 _1hvwdkaa _128mdkaa _9oik1r31 _1bnxglyw _jf4cnqa1 _1cvmnqa1 _4davt94y",
  beforeAfterElement: "_1e0c1txw _1ul91tcg _1tke1tcg _4cvr1h6o _1bah1h6o _1o9zidpf",
  content: "_12ji1r31 _1qu2glyw _12y31o36 _1reo15vq _18m915vq _1e0c1txw _2lx21bp4 _1bah1h6o _16jlkb7n _y3gn1e5h",
  truncate: "_1reo15vq _18m915vq _1e0c1ule _1bto1l2s _o5721q9c",
  title: "_11c82smr",
  wordBreak: "_1nmz1hna",
  description: "_11c8dcr7 _syaz1wmz",
  disabledDescription: "_syaz2oi6",
  unselected: "_bfhkqtfy _syaz1r31 _10531r31 _irr31dko _30l31r31 _1di61dko _9h8h1r31",
  disabled: "_80om13gf _bfhkqtfy _syaz2oi6 _irr3qtfy _30l32oi6 _1di6qtfy _9h8h2oi6",
  selectedBorder: "_1mp4yh40 _1cs8stnw _1rus67is _1kt9b3bt _1fkrze3t _iajmze3t _z5wtze3t",
  selectedNotch: "_rfx3bx74 _1mp41y44 _1cs8stnw _1rus67is _1kt9b3bt _1fkrutpp _iajmutpp _z5wtze3t",
  selected: "_bfhk1q4k _syazhu5v _1053hu5v _irr32seo _30l316ov _1di6guph _9h8hhu5v",
  selectedOld: "_30l3hu5v"
};
var spacingMapStyles = {
  cozy: "_1rjcu2gc _18zrpxbi",
  compact: "_1rjc1b66 _18zrutpp _1tkezwfg"
};
var gapMap = {
  compact: "space.100",
  cozy: "space.150"
};
var MenuItemPrimitive = function MenuItemPrimitive2(_ref) {
  var children = _ref.children, title = _ref.title, description = _ref.description, iconAfter = _ref.iconAfter, iconBefore = _ref.iconBefore, UNSAFE_externalClassName = _ref.className, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? false : _ref$shouldTitleWrap, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? false : _ref$shouldDescriptio, _ref$isDisabled = _ref.isDisabled, isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, _ref$isTitleHeading = _ref.isTitleHeading, isTitleHeading = _ref$isTitleHeading === void 0 ? false : _ref$isTitleHeading, testId = _ref.testId;
  var spacing = (0, import_react17.useContext)(SpacingContext);
  var selectionStyle = (0, import_react17.useContext)(SELECTION_STYLE_CONTEXT_DO_NOT_USE);
  var UNSAFE_className = UNSAFE_externalClassName;
  return function() {
    return children({
      className: ax([ax([styles2.root, spacingMapStyles[spacing], !isDisabled && !isSelected && styles2.unselected, !isDisabled && isSelected && styles2.selected, !fg("platform_fix_a11y_selected_and_hovered_state_color") && !isDisabled && isSelected && styles2.selectedOld, !isDisabled && isSelected && selectionStyle === "border" && styles2.selectedBorder, !isDisabled && isSelected && selectionStyle === "notch" && styles2.selectedNotch, isDisabled && styles2.disabled]), UNSAFE_className]),
      children: React9.createElement(inline_default, {
        as: "span",
        spread: "space-between",
        alignBlock: "center",
        space: gapMap[spacing],
        grow: "fill",
        testId: testId && "".concat(testId, "--container")
      }, iconBefore && React9.createElement("span", {
        "data-item-elem-before": true,
        "data-testid": testId && "".concat(testId, "--icon-before"),
        className: ax([styles2.beforeAfterElement])
      }, iconBefore), title && React9.createElement("div", {
        className: ax([styles2.content])
      }, renderTitle(isTitleHeading ? "h2" : "span", {
        children: title,
        className: ax([styles2.title, shouldTitleWrap ? styles2.wordBreak : styles2.truncate]),
        "data-item-title": true
      }), description && React9.createElement("span", {
        "data-item-description": true,
        className: ax([styles2.description, isDisabled && styles2.disabledDescription, shouldDescriptionWrap && styles2.wordBreak, !shouldDescriptionWrap && styles2.truncate])
      }, description)), iconAfter && React9.createElement("span", {
        "data-item-elem-after": true,
        "data-testid": testId && "".concat(testId, "--icon-after"),
        className: ax([styles2.beforeAfterElement])
      }, iconAfter))
    });
  }();
};
var menu_item_primitive_default = MenuItemPrimitive;

// node_modules/@atlaskit/menu/dist/esm/menu-item/button-item.js
var _excluded4 = ["children", "description", "iconAfter", "iconBefore", "isDisabled", "isSelected", "onClick", "testId", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "interactionName"];
var ButtonItem = (0, import_react18.memo)((0, import_react18.forwardRef)(function(props, ref) {
  var children = props.children, description = props.description, iconAfter = props.iconAfter, iconBefore = props.iconBefore, _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, _props$isSelected = props.isSelected, isSelected = _props$isSelected === void 0 ? false : _props$isSelected, onClick = props.onClick, testId = props.testId, onMouseDown = props.onMouseDown, shouldTitleWrap = props.shouldTitleWrap, shouldDescriptionWrap = props.shouldDescriptionWrap, UNSAFE_className = props.className, interactionName = props.interactionName, rest = _objectWithoutProperties(props, _excluded4);
  var onMouseDownHandler = onMouseDown;
  var interactionContext = (0, import_react18.useContext)(esm_default);
  var handleClick = (0, import_react18.useCallback)(function(e) {
    interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
    onClick === null || onClick === void 0 || onClick(e);
  }, [onClick, interactionContext, interactionName]);
  if (!children) {
    return null;
  }
  return React10.createElement(
    menu_item_primitive_default,
    _extends({
      className: UNSAFE_className
    }, rest, {
      iconBefore,
      iconAfter,
      isDisabled,
      isSelected,
      isTitleHeading: false,
      description,
      title: children,
      shouldTitleWrap,
      shouldDescriptionWrap,
      testId: testId && "".concat(testId, "--primitive")
    }),
    function(_ref) {
      var children2 = _ref.children, className = _ref.className;
      return React10.createElement("button", _extends({
        "data-testid": testId,
        "aria-current": isSelected ? "true" : void 0
      }, rest, {
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        className,
        ref,
        disabled: isDisabled,
        onClick: handleClick,
        onMouseDown: onMouseDownHandler,
        type: "button"
      }), children2);
    }
  );
}));
var button_item_default = ButtonItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/link-item.js
init_extends();
init_objectWithoutProperties();
var React11 = __toESM(require_react());
init_runtime();
var import_react19 = __toESM(require_react());
var _excluded5 = ["children", "href", "description", "iconAfter", "iconBefore", "isDisabled", "isSelected", "onClick", "testId", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "UNSAFE_shouldDisableRouterLink", "UNSAFE_isDraggable", "interactionName"];
var IS_EXTERNAL_LINK_REGEX = /^(?:(http|https):\/\/)/;
var IS_NON_HTTP_BASED = /^(((mailto|tel|sms):)|(#))/;
var preventEvent = function preventEvent2(e) {
  e.preventDefault();
};
var LinkItem = (0, import_react19.memo)((0, import_react19.forwardRef)(function(props, ref) {
  var children = props.children, href = props.href, description = props.description, iconAfter = props.iconAfter, iconBefore = props.iconBefore, _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, _props$isSelected = props.isSelected, isSelected = _props$isSelected === void 0 ? false : _props$isSelected, onClick = props.onClick, testId = props.testId, onMouseDown = props.onMouseDown, shouldTitleWrap = props.shouldTitleWrap, shouldDescriptionWrap = props.shouldDescriptionWrap, UNSAFE_className = props.className, UNSAFE_shouldDisableRouterLink = props.UNSAFE_shouldDisableRouterLink, UNSAFE_isDraggable = props.UNSAFE_isDraggable, interactionName = props.interactionName, rest = _objectWithoutProperties(props, _excluded5);
  var onMouseDownHandler = onMouseDown;
  var RouterLink = use_router_link_default();
  var interactionContext = (0, import_react19.useContext)(esm_default);
  var handleClick = (0, import_react19.useCallback)(function(e) {
    interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
    onClick === null || onClick === void 0 || onClick(e);
  }, [onClick, interactionContext, interactionName]);
  if (!children) {
    return null;
  }
  var isExternal = typeof href === "string" && IS_EXTERNAL_LINK_REGEX.test(href);
  var isNonHttpBased = typeof href === "string" && IS_NON_HTTP_BASED.test(href);
  var isEmptyHref = href == null || href === "";
  var isRouterLink = !UNSAFE_shouldDisableRouterLink && RouterLink && !isExternal && !isNonHttpBased && !isEmptyHref;
  var Component = isRouterLink ? RouterLink : "a";
  return React11.createElement(menu_item_primitive_default, _extends({}, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: UNSAFE_className,
    iconBefore,
    iconAfter,
    isSelected,
    isDisabled,
    isTitleHeading: false,
    description,
    shouldTitleWrap,
    shouldDescriptionWrap,
    title: children,
    testId: testId && "".concat(testId, "--primitive")
  }), function(_ref) {
    var children2 = _ref.children, className = _ref.className;
    return React11.createElement(Component, _extends({
      "data-testid": testId,
      "data-is-router-link": testId ? isRouterLink ? "true" : "false" : void 0,
      "data-vc": "link-item"
    }, rest, {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
      className,
      href: isDisabled ? void 0 : href
    }, UNSAFE_isDraggable ? {} : {
      draggable: false,
      onDragStart: preventEvent
    }, {
      onMouseDown: isDisabled ? preventEvent : onMouseDownHandler,
      onClick: isDisabled ? preventEvent : handleClick,
      "aria-current": isSelected ? "page" : void 0,
      "aria-disabled": isDisabled,
      ref
    }), children2);
  });
}));
var link_item_default = LinkItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/custom-item.js
init_extends();
init_objectWithoutProperties();
var React12 = __toESM(require_react());
init_runtime();
var import_react20 = __toESM(require_react());
var _excluded6 = ["component", "isDisabled", "isSelected", "isTitleHeading", "onClick", "testId", "children", "description", "iconAfter", "iconBefore", "onMouseDown", "shouldTitleWrap", "shouldDescriptionWrap", "className", "UNSAFE_isDraggable", "interactionName"];
var preventEvent3 = function preventEvent4(e) {
  e.preventDefault();
};
var CustomItem = (0, import_react20.memo)(
  (0, import_react20.forwardRef)(function(_ref, ref) {
    var Component = _ref.component, _ref$isDisabled = _ref.isDisabled, isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, _ref$isTitleHeading = _ref.isTitleHeading, isTitleHeading = _ref$isTitleHeading === void 0 ? false : _ref$isTitleHeading, onClick = _ref.onClick, testId = _ref.testId, children = _ref.children, description = _ref.description, iconAfter = _ref.iconAfter, iconBefore = _ref.iconBefore, onMouseDown = _ref.onMouseDown, shouldTitleWrap = _ref.shouldTitleWrap, shouldDescriptionWrap = _ref.shouldDescriptionWrap, UNSAFE_className = _ref.className, UNSAFE_isDraggable = _ref.UNSAFE_isDraggable, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded6);
    var onMouseDownHandler = onMouseDown;
    var interactionContext = (0, import_react20.useContext)(esm_default);
    var handleClick = (0, import_react20.useCallback)(function(e) {
      interactionContext === null || interactionContext === void 0 || interactionContext.tracePress(interactionName, e.timeStamp);
      onClick === null || onClick === void 0 || onClick(e);
    }, [onClick, interactionContext, interactionName]);
    if (!Component) {
      return null;
    }
    return React12.createElement(
      menu_item_primitive_default,
      _extends({
        className: UNSAFE_className
      }, rest, {
        description,
        iconAfter,
        title: children,
        iconBefore,
        isSelected,
        isDisabled,
        isTitleHeading,
        shouldTitleWrap,
        shouldDescriptionWrap,
        testId: testId && "".concat(testId, "--primitive")
      }),
      function(_ref2) {
        var children2 = _ref2.children, className = _ref2.className;
        return React12.createElement(Component, _extends({
          "data-testid": testId
        }, rest, {
          // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
          className,
          ref
        }, UNSAFE_isDraggable ? {} : {
          draggable: false,
          onDragStart: preventEvent3
        }, {
          onMouseDown: isDisabled ? preventEvent3 : onMouseDownHandler,
          onClick: isDisabled ? preventEvent3 : handleClick,
          tabIndex: isDisabled ? -1 : void 0,
          "aria-disabled": isDisabled
        }), children2);
      }
    );
  })
  // Dirty hack to get generics working with forward ref [2/2]
);
var custom_item_default = CustomItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-item.js
init_defineProperty();
var React13 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-item.compiled.css";

// node_modules/@atlaskit/menu/dist/esm/menu-item/heading-item.js
init_extends();
init_objectWithoutProperties();
var React14 = __toESM(require_react());
init_runtime();
var import_react21 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/menu/dist/esm/menu-item/heading-item.compiled.css";
var _excluded7 = ["children", "testId", "headingLevel", "id", "className"];
var HeadingItem = (0, import_react21.memo)(function(_ref) {
  var children = _ref.children, testId = _ref.testId, _ref$headingLevel = _ref.headingLevel, headingLevel = _ref$headingLevel === void 0 ? 2 : _ref$headingLevel, id = _ref.id, UNSAFE_className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded7);
  return React14.createElement("div", _extends({
    role: "heading",
    "aria-level": headingLevel,
    "data-testid": testId,
    "data-ds--menu--heading-item": true,
    id,
    className: ax(["_11c81vhk _1rjcze3t _18zrpxbi _syaz1vvm", UNSAFE_className])
  }, rest, {
    style: {
      "--_bbz764": cssCustomPropertyValue("var(--ds-text-subtle, ".concat(N300, ")"))
    }
  }), children);
});
var heading_item_default = HeadingItem;

// node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-heading-item.js
init_defineProperty();
var React15 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/menu/dist/esm/menu-item/skeleton-heading-item.compiled.css";

// node_modules/@atlaskit/menu/dist/esm/menu-section/section.js
init_extends();
init_objectWithoutProperties();
var React16 = __toESM(require_react());
init_runtime();
var import_react22 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/menu/dist/esm/menu-section/section.compiled.css";
var _excluded8 = ["children", "title", "titleId", "testId", "isScrollable", "hasSeparator", "id", "isList", "isSideNavSection", "className"];
var itemHeadingTopMargin = 20;
var itemHeadingContentHeight = 16;
var skeletonHeadingHeight = 8;
var skeletonHeadingMarginOffset = 3;
var skeletonHeadingTopMargin = itemHeadingTopMargin + (itemHeadingContentHeight - skeletonHeadingHeight) - skeletonHeadingMarginOffset;
var styles3 = {
  root: "_1ywu1ule _cfu11ule _1qdgi2wt _kfgti2wt _aetrb3bt _1kt9b3bt _1p3hi2wt _1l6bgktf _osbldlk8 _auo4rdoj _hp2110yn _1mfv8jkm _1bg41n1a",
  scrollable: "_1reo1wug _18m91wug _1o9zkb7n",
  unscrollable: "_1o9zidpf",
  thinSeparator: "_mqm21imm",
  noSeparator: "_n7cnyjp0",
  sideNavSectionHeading: "_18zru2gc"
};
var Section = (0, import_react22.forwardRef)(function(_ref, ref) {
  var children = _ref.children, title = _ref.title, titleId = _ref.titleId, testId = _ref.testId, isScrollable = _ref.isScrollable, hasSeparator = _ref.hasSeparator, id = _ref.id, _ref$isList = _ref.isList, isList = _ref$isList === void 0 ? false : _ref$isList, _ref$isSideNavSection = _ref.isSideNavSection, isSideNavSection = _ref$isSideNavSection === void 0 ? false : _ref$isSideNavSection, UNSAFE_className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded8);
  var content = isList ? React16.createElement("ul", {
    style: {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      margin: 0,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      padding: 0
    }
  }, import_react22.Children.map(import_react22.Children.toArray(children), function(child, index) {
    return React16.createElement("li", {
      // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop -- Ignored via go/DSP-18766
      style: {
        listStyleType: "none",
        margin: 0,
        padding: 0
      },
      key: index
    }, child);
  })) : children;
  var childrenMarkup = title !== void 0 ? React16.createElement(import_react22.Fragment, null, React16.createElement(heading_item_default, {
    testId: testId && "".concat(testId, "--heading"),
    "aria-hidden": true,
    className: ax([isSideNavSection && styles3.sideNavSectionHeading])
  }, title), content) : React16.createElement(import_react22.Fragment, null, content);
  return React16.createElement("div", _extends({}, rest, {
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax([styles3.root, isScrollable ? styles3.scrollable : styles3.unscrollable, hasSeparator ? styles3.thinSeparator : styles3.noSeparator, UNSAFE_className]),
    id,
    "aria-label": title,
    "aria-labelledby": titleId,
    "data-testid": testId,
    role: "group",
    "data-section": true,
    ref
  }), childrenMarkup);
});
var section_default = Section;

// node_modules/@atlaskit/menu/dist/esm/menu-section/popup-menu-group.js
init_extends();
init_objectWithoutProperties();
var React17 = __toESM(require_react());
init_runtime();

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/group-title.js
init_runtime();
var import_react23 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/group-title.compiled.css";
var styles4 = {
  heading: "_11c81vhk _1rjcze3t _18zrpxbi _syaz1gjq"
};
var GroupTitle = function GroupTitle2(_ref) {
  var id = _ref.id, title = _ref.title;
  return import_react23.default.createElement(box_default, {
    "data-ds--menu--heading-item": true,
    role: "menuitem",
    id,
    "aria-hidden": "true",
    xcss: styles4.heading
  }, title);
};
var group_title_default = GroupTitle;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item-group.js
var _excluded9 = ["children", "id", "isList", "isScrollable", "title", "testId", "hasSeparator"];
var DropdownMenuItemGroup = (0, import_react24.forwardRef)(function(_ref, ref) {
  var children = _ref.children, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, title = _ref.title, testId = _ref.testId, hasSeparator = _ref.hasSeparator, rest = _objectWithoutProperties(_ref, _excluded9);
  var uid = useId();
  var titleId = "dropdown-menu-item-group-title-".concat(uid);
  return import_react24.default.createElement(section_default, _extends({
    id,
    ref,
    isList,
    isScrollable,
    hasSeparator,
    testId,
    titleId: title ? titleId : void 0
  }, rest), title && import_react24.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children);
});
var dropdown_menu_item_group_default = DropdownMenuItemGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/dropdown-menu-item.js
init_extends();
init_objectWithoutProperties();
var import_react25 = __toESM(require_react());
var _excluded10 = ["children", "component", "description", "elemAfter", "elemBefore", "href", "isDisabled", "isSelected", "onClick", "rel", "shouldDescriptionWrap", "shouldTitleWrap", "target", "testId", "UNSAFE_shouldDisableRouterLink", "returnFocusRef", "interactionName", "role"];
var DropdownMenuItem = (0, import_react25.forwardRef)(function(_ref, ref) {
  var children = _ref.children, component = _ref.component, description = _ref.description, elemAfter = _ref.elemAfter, elemBefore = _ref.elemBefore, href = _ref.href, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, onClick = _ref.onClick, rel = _ref.rel, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, target = _ref.target, testId = _ref.testId, UNSAFE_shouldDisableRouterLink = _ref.UNSAFE_shouldDisableRouterLink, returnFocusRef = _ref.returnFocusRef, interactionName = _ref.interactionName, role = _ref.role, rest = _objectWithoutProperties(_ref, _excluded10);
  var itemRef = use_register_item_with_focus_manager_default(!!rest["aria-haspopup"]);
  var handleItemClick = (0, import_react25.useCallback)(function(event) {
    if (returnFocusRef !== null && returnFocusRef !== void 0 && returnFocusRef.current) {
      returnFocusRef.current.focus();
    }
    if (onClick) {
      onClick(event);
    }
  }, [onClick, returnFocusRef]);
  if (component) {
    return import_react25.default.createElement(custom_item_default, _extends({
      component,
      description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      shouldDescriptionWrap,
      shouldTitleWrap,
      testId,
      href,
      target,
      rel,
      interactionName
      // DSP-13312 TODO: remove spread props in future major release
    }, rest), children);
  } else if (href) {
    return import_react25.default.createElement(link_item_default, _extends({
      description,
      href,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      rel,
      role: "menuitem",
      shouldDescriptionWrap,
      shouldTitleWrap,
      target,
      testId,
      UNSAFE_shouldDisableRouterLink,
      interactionName
      // DSP-13312 TODO: remove spread props in future major release
    }, rest), children);
  } else {
    return import_react25.default.createElement(button_item_default, _extends({
      description,
      iconAfter: elemAfter,
      iconBefore: elemBefore,
      isDisabled,
      isSelected,
      onClick: handleItemClick,
      ref: mergeRefs([ref, itemRef]),
      role: role || "menuitem",
      shouldDescriptionWrap,
      shouldTitleWrap,
      testId,
      target,
      rel,
      interactionName
      // DSP-13312 TODO: remove spread props in future major release
    }, rest), children);
  }
});
var dropdown_menu_item_default = DropdownMenuItem;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react29 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/checkbox-icon.js
var import_react26 = __toESM(require_react());
init_esm();
var CheckboxIcon = function CheckboxIcon2(_ref) {
  var checked = _ref.checked;
  return import_react26.default.createElement(svg_default, {
    label: "",
    size: "medium",
    primaryColor: checked ? "var(--ds-background-selected-bold, ".concat(B400, ")") : "var(--ds-background-input, ".concat(N10, ")"),
    secondaryColor: checked ? "var(--ds-icon-inverse, ".concat(N10, ")") : "transparent"
  }, import_react26.default.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? import_react26.default.createElement(import_react26.default.Fragment, null, import_react26.default.createElement("rect", {
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      x: "5.5",
      y: "5.5",
      width: "13",
      height: "13",
      rx: "1.5",
      fill: "currentColor"
    }), import_react26.default.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M16.3262 9.48011L15.1738 8.51984L10.75 13.8284L8.82616 11.5198L7.67383 12.4801L10.1738 15.4801C10.3163 15.6511 10.5274 15.75 10.75 15.75C10.9726 15.75 11.1837 15.6511 11.3262 15.4801L16.3262 9.48011Z",
      fill: "inherit"
    })) : import_react26.default.createElement(import_react26.default.Fragment, null, import_react26.default.createElement("rect", {
      fill: "currentColor",
      x: "6",
      y: "6",
      width: "12",
      height: "12",
      rx: "2",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: 1
    }), import_react26.default.createElement("path", {
      d: "M9.707 11.293a1 1 0 10-1.414 1.414l2 2a1 1 0 001.414 0l4-4a1 1 0 10-1.414-1.414L11 12.586l-1.293-1.293z",
      fill: "inherit"
    }))
  ));
};
var checkbox_icon_default = CheckboxIcon;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js
init_slicedToArray();
var import_react28 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/context/checkbox-group-context.js
var import_react27 = __toESM(require_react());
var CheckboxGroupContext = (0, import_react27.createContext)("");

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-checkbox-state.js
var useCheckboxState = function useCheckboxState2(_ref) {
  var isSelected = _ref.isSelected, id = _ref.id, defaultSelected = _ref.defaultSelected;
  var _useContext = (0, import_react28.useContext)(SelectionStoreContext), setItemState = _useContext.setItemState, getItemState2 = _useContext.getItemState;
  var groupId = (0, import_react28.useContext)(CheckboxGroupContext);
  var persistedIsSelected = getItemState2(groupId, id);
  var _useState = (0, import_react28.useState)(
    // Initial state is set depending on value being defined or not.
    // This state is only utilised if the checkbox is uncontrolled.
    function() {
      return persistedIsSelected !== void 0 ? persistedIsSelected : defaultSelected || false;
    }
  ), _useState2 = _slicedToArray(_useState, 2), localIsSelected = _useState2[0], setLocalIsSelected = _useState2[1];
  var setLocalState = (0, import_react28.useCallback)(function(newValue) {
    var nextValue = newValue(persistedIsSelected);
    setLocalIsSelected(nextValue);
    setItemState(groupId, id, nextValue);
  }, [setItemState, persistedIsSelected, groupId, id]);
  if (typeof isSelected === "boolean") {
    return [isSelected, function() {
      return false;
    }];
  }
  if (persistedIsSelected === void 0) {
    setItemState(groupId, id, defaultSelected || false);
  }
  return [localIsSelected, setLocalState];
};
var use_checkbox_state_default = useCheckboxState;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox.js
var _excluded11 = ["children", "defaultSelected", "description", "id", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "testId", "interactionName"];
var DropdownItemCheckbox = function DropdownItemCheckbox2(_ref) {
  var children = _ref.children, defaultSelected = _ref.defaultSelected, description = _ref.description, id = _ref.id, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$onClick = _ref.onClick, providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, testId = _ref.testId, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded11);
  if (typeof process !== "undefined" && true && typeof isSelected !== "undefined" && typeof defaultSelected !== "undefined") {
    console.warn("[DropdownItemCheckbox] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useCheckboxState = use_checkbox_state_default({
    id,
    isSelected,
    defaultSelected
  }), _useCheckboxState2 = _slicedToArray(_useCheckboxState, 2), selected = _useCheckboxState2[0], setSelected = _useCheckboxState2[1];
  var onClickHandler = (0, import_react29.useCallback)(function(event) {
    setSelected(function(selected2) {
      return !selected2;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = use_register_item_with_focus_manager_default();
  return import_react29.default.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, import_react29.default.createElement(button_item_default, _extends({
    "aria-checked": selected,
    description,
    iconBefore: import_react29.default.createElement(checkbox_icon_default, {
      checked: selected
    }),
    id,
    isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: "menuitemcheckbox",
    shouldDescriptionWrap,
    shouldTitleWrap,
    testId,
    interactionName
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), children));
};
var dropdown_item_checkbox_default = DropdownItemCheckbox;

// node_modules/@atlaskit/dropdown-menu/dist/esm/checkbox/dropdown-item-checkbox-group.js
init_extends();
init_objectWithoutProperties();
var import_react30 = __toESM(require_react());
var _excluded12 = ["children", "hasSeparator", "id", "isList", "isScrollable", "testId", "title"];
var DropdownItemCheckboxGroup = function DropdownItemCheckboxGroup2(_ref) {
  var children = _ref.children, hasSeparator = _ref.hasSeparator, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, testId = _ref.testId, title = _ref.title, rest = _objectWithoutProperties(_ref, _excluded12);
  var uid = useId();
  var titleId = "dropdown-menu-item-checkbox-group-title-".concat(uid);
  return import_react30.default.createElement(CheckboxGroupContext.Provider, {
    value: id
  }, import_react30.default.createElement(section_default, _extends({
    hasSeparator,
    id,
    isList,
    isScrollable,
    testId,
    titleId: title ? titleId : void 0
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), title && import_react30.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children));
};
var dropdown_item_checkbox_group_default = DropdownItemCheckboxGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react34 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/components/radio-icon.js
var import_react31 = __toESM(require_react());
init_esm();
var RadioIcon = function RadioIcon2(_ref) {
  var checked = _ref.checked;
  return import_react31.default.createElement(svg_default, {
    label: "",
    size: "medium",
    primaryColor: checked ? "var(--ds-background-selected-bold, ".concat(B400, ")") : "var(--ds-background-input, ".concat(N10, ")"),
    secondaryColor: checked ? "var(--ds-icon-inverse, ".concat(N10, ")") : "transparent"
  }, import_react31.default.createElement(
    "g",
    {
      fillRule: "evenodd"
    },
    // eslint-disable-next-line @atlaskit/platform/ensure-feature-flag-prefix
    fg("platform-visual-refresh-icons") ? import_react31.default.createElement(import_react31.default.Fragment, null, import_react31.default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "7.5",
      fill: "currentColor",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: "1"
    }), import_react31.default.createElement("circle", {
      cx: "12",
      cy: "12",
      r: "3",
      fill: "inherit"
    })) : import_react31.default.createElement(import_react31.default.Fragment, null, import_react31.default.createElement("circle", {
      fill: "currentColor",
      cx: "12",
      cy: "12",
      r: "6",
      stroke: checked ? "var(--ds-border-selected, ".concat(B400, ")") : "var(--ds-border-input, ".concat(N100, ")"),
      strokeWidth: 1
    }), import_react31.default.createElement("circle", {
      fill: "inherit",
      cx: "12",
      cy: "12",
      r: "2"
    }))
  ));
};
var radio_icon_default = RadioIcon;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-radio-state.js
init_defineProperty();
init_slicedToArray();
var import_react33 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio-group.js
init_extends();
init_defineProperty();
init_slicedToArray();
init_objectWithoutProperties();
var import_react32 = __toESM(require_react());

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/utils/reset-options-in-group.js
init_defineProperty();
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var resetOptionsInGroup = function resetOptionsInGroup2(group) {
  return Object.keys(group || {}).reduce(function(accumulator, current) {
    return _objectSpread2(_objectSpread2({}, accumulator), {}, _defineProperty({}, current, typeof group[current] === "undefined" ? void 0 : false));
  }, {});
};
var reset_options_in_group_default = resetOptionsInGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio-group.js
var _excluded13 = ["children", "hasSeparator", "id", "isList", "isScrollable", "testId", "title"];
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var RadioGroupContext = (0, import_react32.createContext)({
  id: "",
  radioGroupState: {},
  selectRadioItem: noop
});
var DropdownItemRadioGroup = function DropdownItemRadioGroup2(_ref) {
  var children = _ref.children, hasSeparator = _ref.hasSeparator, id = _ref.id, isList = _ref.isList, isScrollable = _ref.isScrollable, testId = _ref.testId, title = _ref.title, rest = _objectWithoutProperties(_ref, _excluded13);
  var _useContext = (0, import_react32.useContext)(SelectionStoreContext), setGroupState = _useContext.setGroupState, getGroupState2 = _useContext.getGroupState;
  var uid = useId();
  var titleId = "dropdown-menu-item-radio-group-title-".concat(uid);
  var _useState = (0, import_react32.useState)(function() {
    return getGroupState2(id);
  }), _useState2 = _slicedToArray(_useState, 2), radioGroupState = _useState2[0], setRadioGroupState = _useState2[1];
  var selectRadioItem = function selectRadioItem2(childId, value) {
    var newValue = _objectSpread3(_objectSpread3({}, reset_options_in_group_default(getGroupState2(id))), {}, _defineProperty({}, childId, value));
    setRadioGroupState(newValue);
    setGroupState(id, newValue);
  };
  return import_react32.default.createElement(RadioGroupContext.Provider, {
    value: {
      id,
      radioGroupState,
      selectRadioItem
    }
  }, import_react32.default.createElement(section_default, _extends({
    hasSeparator,
    id,
    isList,
    isScrollable,
    testId,
    titleId: title ? titleId : void 0
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), title && import_react32.default.createElement(group_title_default, {
    id: titleId,
    title
  }), children));
};
var dropdown_item_radio_group_default = DropdownItemRadioGroup;

// node_modules/@atlaskit/dropdown-menu/dist/esm/internal/hooks/use-radio-state.js
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function useRadioState(_ref) {
  var id = _ref.id, isSelected = _ref.isSelected, defaultSelected = _ref.defaultSelected;
  var _useContext = (0, import_react33.useContext)(SelectionStoreContext), setGroupState = _useContext.setGroupState, getGroupState2 = _useContext.getGroupState;
  var _useContext2 = (0, import_react33.useContext)(RadioGroupContext), group = _useContext2.id, radioGroupState = _useContext2.radioGroupState, selectRadioItem = _useContext2.selectRadioItem;
  var persistedIsSelected = radioGroupState[id];
  var _useState = (0, import_react33.useState)(function() {
    return persistedIsSelected !== void 0 ? persistedIsSelected : defaultSelected || false;
  }), _useState2 = _slicedToArray(_useState, 2), localIsSelected = _useState2[0], setLocalIsSelected = _useState2[1];
  var setLocalState = (0, import_react33.useCallback)(function(newValue) {
    if (!persistedIsSelected) {
      var nextValue = newValue(persistedIsSelected);
      selectRadioItem(id, nextValue);
      setLocalIsSelected(nextValue);
    }
  }, [persistedIsSelected, id, selectRadioItem]);
  (0, import_react33.useEffect)(function() {
    setLocalIsSelected(function() {
      var existing2 = radioGroupState[id];
      return existing2 !== void 0 ? existing2 : defaultSelected || false;
    });
  }, [radioGroupState, group, id, defaultSelected]);
  if (typeof isSelected === "boolean") {
    return [isSelected, function() {
      return false;
    }];
  }
  if (persistedIsSelected === void 0) {
    var existing = getGroupState2(group);
    var newGroupState = _objectSpread4(_objectSpread4({}, existing), {}, _defineProperty({}, id, defaultSelected || false));
    setGroupState(group, newGroupState);
  }
  return [localIsSelected, setLocalState];
}
var use_radio_state_default = useRadioState;

// node_modules/@atlaskit/dropdown-menu/dist/esm/radio/dropdown-item-radio.js
var _excluded14 = ["children", "defaultSelected", "testId", "id", "title", "description", "isDisabled", "isSelected", "onClick", "shouldDescriptionWrap", "shouldTitleWrap", "interactionName"];
var DropdownItemRadio = function DropdownItemRadio2(_ref) {
  var children = _ref.children, defaultSelected = _ref.defaultSelected, testId = _ref.testId, id = _ref.id, title = _ref.title, description = _ref.description, isDisabled = _ref.isDisabled, isSelected = _ref.isSelected, _ref$onClick = _ref.onClick, providedOnClick = _ref$onClick === void 0 ? noop : _ref$onClick, _ref$shouldDescriptio = _ref.shouldDescriptionWrap, shouldDescriptionWrap = _ref$shouldDescriptio === void 0 ? true : _ref$shouldDescriptio, _ref$shouldTitleWrap = _ref.shouldTitleWrap, shouldTitleWrap = _ref$shouldTitleWrap === void 0 ? true : _ref$shouldTitleWrap, interactionName = _ref.interactionName, rest = _objectWithoutProperties(_ref, _excluded14);
  if (typeof process !== "undefined" && true && typeof isSelected !== "undefined" && typeof defaultSelected !== "undefined") {
    console.warn("[DropdownItemRadio] You've used both `defaultSelected` and `isSelected` props. This is dangerous and can lead to unexpected results. Use one or the other depending if you want to control the components state yourself.");
  }
  var _useRadioState = use_radio_state_default({
    id,
    isSelected,
    defaultSelected
  }), _useRadioState2 = _slicedToArray(_useRadioState, 2), selected = _useRadioState2[0], setSelected = _useRadioState2[1];
  var onClickHandler = (0, import_react34.useCallback)(function(event) {
    setSelected(function(selected2) {
      return !selected2;
    });
    providedOnClick(event);
  }, [providedOnClick, setSelected]);
  var itemRef = use_register_item_with_focus_manager_default();
  return import_react34.default.createElement(SELECTION_STYLE_CONTEXT_DO_NOT_USE.Provider, {
    value: "none"
  }, import_react34.default.createElement(button_item_default, _extends({
    "aria-checked": selected,
    "aria-describedby": "".concat(id, "-radio"),
    description,
    iconBefore: import_react34.default.createElement(radio_icon_default, {
      checked: selected
    }),
    id,
    isDisabled,
    isSelected: selected,
    onClick: onClickHandler,
    ref: itemRef,
    role: "menuitemradio",
    shouldDescriptionWrap,
    shouldTitleWrap,
    testId,
    title,
    interactionName
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, rest), children), import_react34.default.createElement(visually_hidden_default, {
    id: "".concat(id, "-radio")
  }, "radio button ", selected));
};
var dropdown_item_radio_default = DropdownItemRadio;
export {
  dropdown_menu_item_default as DropdownItem,
  dropdown_item_checkbox_default as DropdownItemCheckbox,
  dropdown_item_checkbox_group_default as DropdownItemCheckboxGroup,
  dropdown_menu_item_group_default as DropdownItemGroup,
  dropdown_item_radio_default as DropdownItemRadio,
  dropdown_item_radio_group_default as DropdownItemRadioGroup,
  dropdown_menu_default as default
};
//# sourceMappingURL=@atlaskit_dropdown-menu.js.map
