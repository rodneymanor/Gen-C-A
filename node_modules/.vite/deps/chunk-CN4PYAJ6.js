import {
  _objectWithoutProperties,
  _slicedToArray,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-DEYTXOWA.js";
import {
  _classCallCheck,
  _createClass,
  _getPrototypeOf,
  _inherits,
  _possibleConstructorReturn,
  init_classCallCheck,
  init_createClass,
  init_getPrototypeOf,
  init_inherits,
  init_possibleConstructorReturn
} from "./chunk-NS4BQYS2.js";
import {
  ax,
  cssCustomPropertyValue,
  init_runtime
} from "./chunk-6RMDKNC5.js";
import {
  _defineProperty,
  _typeof,
  init_defineProperty,
  init_typeof
} from "./chunk-LBGAJG32.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/dynamic-table/dist/esm/hoc/with-sorted-page-rows.js
init_extends();
init_objectWithoutProperties();
init_classCallCheck();
init_createClass();
init_possibleConstructorReturn();
init_getPrototypeOf();
init_inherits();
init_defineProperty();
init_typeof();
var import_react = __toESM(require_react());

// node_modules/@atlaskit/dynamic-table/dist/esm/internal/constants.js
var ASC = "ASC";
var DESC = "DESC";
var SMALL = "small";
var LARGE = "large";
var LOADING_CONTENTS_OPACITY = 0.22;

// node_modules/@atlaskit/dynamic-table/dist/esm/internal/helpers.js
init_slicedToArray();
var getPageRows = function getPageRows2(allRows, pageNumber, rowsPerPage) {
  if (!pageNumber || !rowsPerPage || !allRows.length) {
    return [];
  }
  return allRows.slice((pageNumber - 1) * rowsPerPage, pageNumber * rowsPerPage);
};
var assertIsSortable = function assertIsSortable2(head) {
  if (!head || !head.cells) {
    return;
  }
  head.cells.forEach(function(cell) {
    if (cell.isSortable && !cell.key) {
      try {
        throw Error("isSortable can't be set to true, if the 'key' prop is missing.");
      } catch (e) {
        console.error(e);
      }
    }
  });
};
var validateSortKey = function validateSortKey2(sortKey, head) {
  if (!sortKey) {
    return;
  }
  var headHasKey = head && head.cells.map(function(cell) {
    return cell.key;
  }).includes(sortKey);
  if (!headHasKey) {
    try {
      throw Error("Cell with ".concat(sortKey, " key not found in head."));
    } catch (e) {
      console.error(e);
    }
  }
};
var inlineStylesIfRanking = function inlineStylesIfRanking2(isRanking, width, height) {
  if (!isRanking) {
    return {};
  }
  if (height) {
    return {
      width,
      height
    };
  }
  return {
    width
  };
};
var computeIndex = function computeIndex2(index, page, rowsPerPage) {
  var itemOnPreviousPages = rowsPerPage && isFinite(rowsPerPage) ? (page - 1) * rowsPerPage : 0;
  return index + itemOnPreviousPages;
};
var reorderRows = function reorderRows2(rankEnd, rows) {
  var page = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  var rowsPerPage = arguments.length > 3 ? arguments[3] : void 0;
  var destination = rankEnd.destination, sourceIndex = rankEnd.sourceIndex;
  if (!destination) {
    return rows;
  }
  var fromIndex = computeIndex(sourceIndex, page, rowsPerPage);
  var toIndex = computeIndex(destination.index, page, rowsPerPage);
  var reordered = rows.slice();
  var _reordered$splice = reordered.splice(fromIndex, 1), _reordered$splice2 = _slicedToArray(_reordered$splice, 1), removed = _reordered$splice2[0];
  reordered.splice(toIndex, 0, removed);
  return reordered;
};

// node_modules/@atlaskit/dynamic-table/dist/esm/hoc/with-sorted-page-rows.js
var _excluded = ["rows", "head", "sortKey", "sortOrder", "rowsPerPage", "page", "forwardedRef"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct3() {
    return !!t;
  })();
}
var getSortingCellValue = function getSortingCellValue2(cells, head, sortKey) {
  for (var i = 0; i < cells.length; i++) {
    var _head$cells$i;
    if (head.cells[i] && ((_head$cells$i = head.cells[i]) === null || _head$cells$i === void 0 ? void 0 : _head$cells$i.key) === sortKey) {
      var _cells$i;
      return (_cells$i = cells[i]) === null || _cells$i === void 0 ? void 0 : _cells$i.key;
    }
  }
  return void 0;
};
var getSortedRows = function getSortedRows2(head, rows, sortKey, sortOrder) {
  if (!sortKey || !head) {
    return rows;
  }
  if (!rows) {
    return [];
  }
  var modifier = sortOrder === ASC ? 1 : -1;
  var collator = new Intl.Collator(void 0, {
    numeric: true,
    sensitivity: "accent"
  });
  var sortableRows = Array.from(rows);
  return sortableRows.sort(function(a, b) {
    var valA = getSortingCellValue(a.cells, head, sortKey);
    var valB = getSortingCellValue(b.cells, head, sortKey);
    if (valA === void 0 || valB === void 0) {
      return modifier;
    }
    if (_typeof(valA) !== _typeof(valB)) {
      if (typeof valA === "number") {
        return -1;
      }
      if (typeof valB === "number") {
        return 1;
      }
      if (typeof valA === "string") {
        return -1;
      }
      if (typeof valB === "string") {
        return 1;
      }
    }
    if (typeof valA === "string" && typeof valB === "string") {
      return modifier * collator.compare(valA, valB);
    }
    if (!valA && valA !== 0 || valA < valB) {
      return -modifier;
    }
    if (!valB && valB !== 0 || valA > valB) {
      return modifier;
    }
    if (valA === valB) {
      return 0;
    }
    return 1;
  });
};
function withSortedPageRows(WrappedComponent) {
  var WithSortedPageRows = function(_React$Component) {
    function WithSortedPageRows2() {
      var _this;
      _classCallCheck(this, WithSortedPageRows2);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, WithSortedPageRows2, [].concat(args));
      _defineProperty(_this, "state", {
        pageRows: []
      });
      return _this;
    }
    _inherits(WithSortedPageRows2, _React$Component);
    return _createClass(WithSortedPageRows2, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.props.onPageRowsUpdate && this.props.onPageRowsUpdate(this.state.pageRows);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(_prevProps, prevState) {
        if (this.props.onPageRowsUpdate && this.state.pageRows !== prevState.pageRows) {
          this.props.onPageRowsUpdate(this.state.pageRows);
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props, rows = _this$props.rows, head = _this$props.head, sortKey = _this$props.sortKey, sortOrder = _this$props.sortOrder, rowsPerPage = _this$props.rowsPerPage, page = _this$props.page, forwardedRef = _this$props.forwardedRef, restProps = _objectWithoutProperties(_this$props, _excluded);
        return import_react.default.createElement(
          WrappedComponent,
          _extends({
            pageRows: this.state.pageRows,
            head
          }, restProps, {
            ref: forwardedRef
          })
        );
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(props, state) {
        var rows = props.rows, head = props.head, sortKey = props.sortKey, sortOrder = props.sortOrder, page = props.page, rowsPerPage = props.rowsPerPage, isTotalPagesControlledExternally = props.isTotalPagesControlledExternally;
        validateSortKey(sortKey, head);
        var sortedRows;
        var pageRows;
        if (isTotalPagesControlledExternally) {
          sortedRows = rows;
          pageRows = rows;
        } else {
          sortedRows = getSortedRows(head, rows, sortKey, sortOrder) || [];
          pageRows = getPageRows(sortedRows, page, rowsPerPage);
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          pageRows
        });
      }
    }]);
  }(import_react.default.Component);
  return import_react.default.forwardRef(function(props, ref) {
    return import_react.default.createElement(WithSortedPageRows, _extends({}, props, {
      forwardedRef: ref
    }));
  });
}

// node_modules/@atlaskit/dynamic-table/dist/esm/hoc/with-dimensions.js
init_extends();
init_classCallCheck();
init_createClass();
init_possibleConstructorReturn();
init_getPrototypeOf();
init_inherits();
init_defineProperty();
var import_react2 = __toESM(require_react());
function _callSuper2(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct2() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _isNativeReflectConstruct2() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct2 = function _isNativeReflectConstruct3() {
    return !!t;
  })();
}
function withDimensions(WrappedComponent) {
  return function(_React$Component) {
    function WithDimensions() {
      var _this;
      _classCallCheck(this, WithDimensions);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper2(this, WithDimensions, [].concat(args));
      _defineProperty(_this, "state", {
        refWidth: 0,
        refHeight: 0
      });
      _defineProperty(_this, "innerRef", function(ref) {
        if (ref && !_this.props.isRanking) {
          _this.ref = ref;
        }
      });
      _defineProperty(_this, "updateDimensions", function() {
        if (!_this.ref) {
          return;
        }
        var clientRect = _this.ref.getBoundingClientRect();
        var width = clientRect.width;
        var height = clientRect.height;
        if (width !== _this.state.refWidth || height !== _this.state.refHeight) {
          _this.setState({
            refWidth: width,
            refHeight: height
          });
        }
      });
      return _this;
    }
    _inherits(WithDimensions, _React$Component);
    return _createClass(WithDimensions, [{
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(nextProps) {
        var wasRanking = this.props.isRanking;
        var willRanking = nextProps.isRanking;
        if (willRanking && !wasRanking) {
          this.updateDimensions();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$state = this.state, refWidth = _this$state.refWidth, refHeight = _this$state.refHeight;
        return import_react2.default.createElement(
          WrappedComponent,
          _extends({
            refWidth,
            refHeight,
            innerRef: this.innerRef
          }, this.props)
        );
      }
    }]);
  }(import_react2.default.Component);
}

// node_modules/@atlaskit/dynamic-table/dist/esm/styled/table-row.js
init_extends();
init_defineProperty();
init_objectWithoutProperties();
var React3 = __toESM(require_react());
init_runtime();
var import_react3 = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/dynamic-table/dist/esm/styled/table-row.compiled.css";
var _excluded2 = ["isHighlighted", "children", "style", "testId", "className"];
function ownKeys2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var TableBodyRow = (0, import_react3.forwardRef)(function(_ref, ref) {
  var isHighlighted = _ref.isHighlighted, children = _ref.children, style = _ref.style, testId = _ref.testId, className = _ref.className, rest = _objectWithoutProperties(_ref, _excluded2);
  return React3.createElement("tr", _extends({
    /**
     * We rely on this `className` for the `RankableTableBodyRow` to apply extra styles.
     * With Compiled it needs to be statically analyzable. It does not get applied via spread props.
     */
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop
    className: ax(["_bfhkqtfy _1ygb1852 _1ah312gs", isHighlighted ? "_bfhktkjs _irr31ae3" : "_irr3s8ts", className])
  }, rest, {
    ref,
    "data-testid": testId,
    style: _objectSpread2(_objectSpread2({}, style), {}, {
      "--_akp1ox": cssCustomPropertyValue("2px solid ".concat("var(--ds-border-focused, var(--local-dynamic-table-hover-bg))"))
    })
  }), children);
});

// node_modules/@atlaskit/dynamic-table/dist/esm/styled/constants.js
init_defineProperty();
var CSS_VAR_WIDTH = "--local-dynamic-table-width";
var getTruncationStyleVars = function getTruncationStyleVars2(_ref) {
  var width = _ref.width;
  return typeof width !== "undefined" ? _defineProperty({}, CSS_VAR_WIDTH, "".concat(width, "%")) : void 0;
};

// node_modules/@atlaskit/dynamic-table/dist/esm/styled/table-cell.js
init_extends();
init_objectWithoutProperties();
var React4 = __toESM(require_react());
init_runtime();
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/dynamic-table/dist/esm/styled/table-cell.compiled.css";
var _excluded3 = ["width", "isFixedSize", "shouldTruncate", "innerRef"];
var TableBodyCell = function TableBodyCell2(_ref) {
  var width = _ref.width, isFixedSize = _ref.isFixedSize, shouldTruncate = _ref.shouldTruncate, innerRef = _ref.innerRef, props = _objectWithoutProperties(_ref, _excluded3);
  return React4.createElement("td", _extends({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/enforce-style-prop, @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
    style: getTruncationStyleVars({
      width
    }),
    // HOC withDimensions complains about the types but it is working fine
    // @ts-ignore
    ref: innerRef,
    className: ax(["_1bsb8a2a", isFixedSize && shouldTruncate && "_1bto1l2s _o5721q9c", isFixedSize && "_1reo15vq _18m915vq", "_19itglyw _85i51b66 _1q511b66 _y4tiu2gc _bozgu2gc _y3gn1e5h _1s37ze3t _uupyze3t", props.className])
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, props));
};

export {
  getPageRows,
  assertIsSortable,
  validateSortKey,
  inlineStylesIfRanking,
  reorderRows,
  ASC,
  DESC,
  SMALL,
  LARGE,
  LOADING_CONTENTS_OPACITY,
  withSortedPageRows,
  getTruncationStyleVars,
  TableBodyCell,
  TableBodyRow,
  withDimensions
};
//# sourceMappingURL=chunk-CN4PYAJ6.js.map
