import {
  usePlatformLeafEventHandler
} from "./chunk-63XL5HNI.js";
import "./chunk-3GZOTWFT.js";
import {
  fg,
  init_esm
} from "./chunk-TU6YP6NE.js";
import {
  _objectWithoutProperties,
  init_objectWithoutProperties
} from "./chunk-DVL37L2H.js";
import "./chunk-SHSMMZOB.js";
import {
  ax,
  cssCustomPropertyValue,
  init_runtime
} from "./chunk-ZNWH4LFA.js";
import {
  _defineProperty,
  _typeof,
  init_defineProperty,
  init_typeof
} from "./chunk-LBGAJG32.js";
import "./chunk-AAY5IJNO.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/textfield/dist/esm/text-field.js
init_extends();
init_typeof();
init_defineProperty();
init_objectWithoutProperties();
init_runtime();
var import_react = __toESM(require_react());
import "/Users/rmanor/Documents/Development-Local/Gen C A/node_modules/@atlaskit/textfield/dist/esm/text-field.compiled.css";
init_esm();
var _excluded = ["appearance", "className", "elemAfterInput", "elemBeforeInput", "isCompact", "isDisabled", "isInvalid", "isMonospaced", "isReadOnly", "isRequired", "name", "onBlur", "onChange", "onFocus", "onMouseDown", "placeholder", "testId", "width"];
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var containerMedia = {
  invalid: "_msj6gir2",
  disabled: "_6up518qt"
};
var analyticsParams = {
  componentName: "textField",
  packageName: "@atlaskit/textfield",
  packageVersion: "0.0.0-development"
};
var disabledStyle = {
  standard: "_1h6dsyzs _bfhksyzs _syaz1lh4 _80om13gf",
  subtle: "_1h6d1j28 _bfhk1j28 _syaz1lh4 _80om13gf",
  none: "_1h6d1j28 _bfhk1j28 _syaz1lh4 _80om13gf"
};
var focusWithinStyle = {
  standard: "_1p9x1p6i _qao9r01l _q433q049",
  subtle: "_1p9x1p6i _qao9r01l _q433q049",
  none: "_1p9x1j28 _qao91j28 _q4333sij"
};
var hoverStyle = {
  standard: "_4cvx1elr _irr31d5g",
  subtle: "_4cvx1elr _irr31d5g",
  none: "_4cvx1j28 _irr31j28"
};
var getContainerTextBgAndBorderColor = {
  standard: "_1h6d1elr _1dqonqa1 _syaz1fxt _80om1kdv _bfhk1j9a _msj6gir2",
  subtle: "_1h6d1j28 _1dqonqa1 _syaz1fxt _80om1kdv _16hg1j28 _msj6gir2",
  none: "_1h6d1j28 _1dqoglyw _syaz1fxt _80om1kdv _16hg1j28 _msj6gir2"
};
var widthMap = {
  xsmall: 80,
  small: 160,
  medium: 240,
  large: 320,
  xlarge: 480
};
var getMaxWidth = function getMaxWidth2(width) {
  return !width ? "100%" : width in widthMap ? "".concat(widthMap[width], "px") : "".concat(+width, "px");
};
var containerStyleAppearance = {
  standard: "_1dqonqa1 _1q51e4h9 _85i5e4h9 _bozgidpf _y4tiidpf",
  subtle: "_1dqonqa1 _1q51e4h9 _85i5e4h9 _bozgidpf _y4tiidpf",
  none: "_1dqoglyw"
};
var Textfield = (0, import_react.forwardRef)(function(props, ref) {
  var _props$appearance = props.appearance, appearance = _props$appearance === void 0 ? "standard" : _props$appearance, className = props.className, elemAfterInput = props.elemAfterInput, elemBeforeInput = props.elemBeforeInput, _props$isCompact = props.isCompact, isCompact = _props$isCompact === void 0 ? false : _props$isCompact, _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, _props$isInvalid = props.isInvalid, isInvalid = _props$isInvalid === void 0 ? false : _props$isInvalid, _props$isMonospaced = props.isMonospaced, isMonospaced = _props$isMonospaced === void 0 ? false : _props$isMonospaced, _props$isReadOnly = props.isReadOnly, isReadOnly = _props$isReadOnly === void 0 ? false : _props$isReadOnly, _props$isRequired = props.isRequired, isRequired = _props$isRequired === void 0 ? false : _props$isRequired, name = props.name, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, onMouseDown = props.onMouseDown, placeholder = props.placeholder, testId = props.testId, width = props.width, spreadProps = _objectWithoutProperties(props, _excluded);
  var inputRef = (0, import_react.useRef)(null);
  var handleOnFocus = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event) {
      onFocus && onFocus(event);
    },
    action: "focused"
  }, analyticsParams));
  var handleOnBlur = usePlatformLeafEventHandler(_objectSpread({
    fn: function fn(event) {
      onBlur && onBlur(event);
    },
    action: "blurred"
  }, analyticsParams));
  var handleOnMouseDown = (0, import_react.useCallback)(function(event) {
    var target = event.target;
    if (target.tagName !== "INPUT") {
      event.preventDefault();
    }
    if (inputRef && inputRef.current && !isDisabled && document.activeElement !== inputRef.current) {
      inputRef.current.focus();
    }
    onMouseDown && onMouseDown(event);
  }, [onMouseDown, isDisabled]);
  var setInputRef = (0, import_react.useCallback)(function(inputElement) {
    inputRef.current = inputElement;
    if (!ref) {
      return;
    }
    if (_typeof(ref) === "object") {
      ref.current = inputElement;
    }
    if (typeof ref === "function") {
      ref(inputElement);
    }
  }, [ref]);
  return import_react.default.createElement("div", {
    role: "presentation",
    "data-disabled": isDisabled ? isDisabled : void 0,
    "data-invalid": isInvalid ? isInvalid : void 0,
    "data-ds--text-field--container": true,
    "data-testid": testId && "".concat(testId, "-container"),
    onMouseDown: handleOnMouseDown,
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
    className: ax(["_16jlkb7n _1o9zkb7n _i0dl1osq _11c82smr _1reo15vq _18m915vq _v564r5cv _189ee4h9 _1e0c1txw _vchhusvi _4cvr1h6o _1bah1yb4 _lcxv1wug _s7n4jp4b _slp31hna _1tnq1l7b", getContainerTextBgAndBorderColor[appearance], containerStyleAppearance[appearance], !isDisabled && focusWithinStyle[appearance], !isDisabled && hoverStyle[appearance], isDisabled && containerMedia.disabled, isDisabled && disabledStyle[appearance], isInvalid && containerMedia.invalid, isInvalid && "_1h6d1bqt _4cvx1bqt _16qs13x5 _1dbz13x5 _uk1sr01l", className]),
    style: {
      maxWidth: "".concat(getMaxWidth(width)),
      "--_x5k4n9": cssCustomPropertyValue("inset 0 0 0 ".concat("var(--ds-border-width, 1px)", " ", "var(--ds-border-danger, #E2483D)"))
    }
  }, elemBeforeInput, import_react.default.createElement("input", _extends({}, spreadProps, {
    "aria-invalid": isInvalid ? isInvalid : void 0,
    "data-compact": isCompact ? isCompact : void 0,
    "data-ds--text-field--input": true,
    "data-monospaced": isMonospaced ? isMonospaced : void 0,
    "data-testid": testId,
    disabled: isDisabled,
    name,
    onBlur: handleOnBlur,
    onChange,
    onFocus: handleOnFocus,
    placeholder,
    readOnly: isReadOnly,
    ref: setInputRef,
    required: isRequired,
    className: ax(["_19itidpf _11c82smr _12ji1r31 _1qu2glyw _12y31o36 _vchhusvi _1bsb1osq _1ul9idpf _bfhk1j28 _syaz1kw7 _80om1kw7 _14jiu2gc _olc6u2gc _1kod12x7 _7ba012x7 _1goxglyw _13xeglyw _1n7e1l2s _1idr131l", isMonospaced && "_ect41odn", isCompact && "_85i51b66 _1q511b66 _y4ti12x7 _bozg12x7", isDisabled && "_syaz1lh4 _1idr1lh4", isDisabled && "_1fnx18qt", !isCompact && fg("platform_design_system_team_safari_input_fix") && "_14ji12x7 _olc612x7 _1kod12x7 _7ba012x7 _l9oiu2gc _549yu2gc _1h5w12x7 _124212x7", fg("platform_design_system_team_safari_input_fix") && "_11c81ixg _1tn22smr", isCompact && fg("platform_design_system_team_safari_input_fix") && "_11zpv77o _1l02v77o _daj712x7 _141f12x7 _1srd1b66 _oi9h1b66 _1e3012x7 _1txv12x7", isMonospaced && fg("platform_design_system_team_safari_input_fix") && "_ect41odn _14md1odn"])
  })), elemAfterInput);
});
var text_field_default = Textfield;
export {
  text_field_default as default
};
//# sourceMappingURL=@atlaskit_textfield.js.map
