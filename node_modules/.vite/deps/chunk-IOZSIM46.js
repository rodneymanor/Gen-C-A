import {
  useAutoFocus
} from "./chunk-ORKNSTQ6.js";
import {
  B100,
  B200,
  B300,
  B400,
  B50,
  B500,
  B75,
  DN0,
  DN100,
  DN30,
  DN300,
  DN400,
  DN60,
  DN70,
  N0,
  N20,
  N200,
  N20A,
  N30A,
  N400,
  N500,
  N70,
  N700,
  N800,
  N90,
  R300,
  R400,
  R500,
  Y200,
  Y300,
  Y400
} from "./chunk-XIW5VD7B.js";
import {
  ClassNames,
  css,
  jsx
} from "./chunk-LES4B5AP.js";
import {
  esm_default,
  noop,
  visually_hidden_default
} from "./chunk-KXQMNIDH.js";
import {
  usePlatformLeafEventHandler
} from "./chunk-7SLACSS6.js";
import {
  fg,
  init_esm
} from "./chunk-D7HT2YMK.js";
import {
  _objectWithoutProperties,
  _slicedToArray,
  init_objectWithoutProperties,
  init_slicedToArray
} from "./chunk-OBM4VKST.js";
import {
  _defineProperty,
  init_defineProperty
} from "./chunk-LBGAJG32.js";
import {
  _extends,
  init_extends
} from "./chunk-64QIVKMX.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@atlaskit/button/dist/esm/old-button/button.js
init_extends();
init_slicedToArray();
init_objectWithoutProperties();
var import_react9 = __toESM(require_react());

// node_modules/@atlaskit/theme/dist/esm/utils/create-theme.js
init_objectWithoutProperties();
var import_react = __toESM(require_react());
var _excluded = ["children"];
function createTheme(defaultGetTokens) {
  var emptyThemeFn = function emptyThemeFn2(getTokens, props) {
    return getTokens(props);
  };
  var ThemeContext = (0, import_react.createContext)(defaultGetTokens);
  function useTheme2(themeProps) {
    var theme = (0, import_react.useContext)(ThemeContext);
    var themeFn = theme || emptyThemeFn;
    var tokens = themeFn(themeProps);
    return tokens;
  }
  function Consumer2(props) {
    var children = props.children, themeProps = _objectWithoutProperties(props, _excluded);
    var tokens = useTheme2(themeProps);
    return import_react.default.createElement(import_react.default.Fragment, null, children(tokens));
  }
  function Provider2(props) {
    var themeFn = (0, import_react.useContext)(ThemeContext);
    var valueFn = props.value || emptyThemeFn;
    var mixedFn = (0, import_react.useCallback)(function(themeProps) {
      return valueFn(themeFn, themeProps);
    }, [themeFn, valueFn]);
    return import_react.default.createElement(ThemeContext.Provider, {
      value: mixedFn
    }, props.children);
  }
  return {
    Consumer: Consumer2,
    Provider: Provider2,
    useTheme: useTheme2
  };
}

// node_modules/@atlaskit/theme/dist/esm/components/theme.js
var _createTheme = createTheme(function() {
  return {
    mode: "light"
  };
});
var Provider = _createTheme.Provider;
var Consumer = _createTheme.Consumer;
var useTheme = _createTheme.useTheme;
var Theme = {
  Provider,
  Consumer
};
var theme_default = Theme;

// node_modules/@atlaskit/button/dist/esm/old-button/shared/button-base.js
init_extends();
init_objectWithoutProperties();
var import_react7 = __toESM(require_react());

// node_modules/@atlaskit/focus-ring/dist/esm/focus-ring.js
var import_react2 = __toESM(require_react());
var BORDER_WIDTH = 2;
var baseFocusOutsideStyles = css({
  outline: "".concat(BORDER_WIDTH, "px solid ", "var(--ds-border-focused, #2684FF)"),
  outlineOffset: BORDER_WIDTH
});
var baseInsetStyles = css({
  outlineColor: "var(--ds-border-focused, #2684FF)",
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
  outlineOffset: -BORDER_WIDTH,
  outlineStyle: "solid",
  outlineWidth: "var(--ds-border-width-focused, 2px)"
});
var focusRingStyles = css({
  // Focus styles used when :focus-visible isn't supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  "&:focus": baseFocusOutsideStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  "&:focus-visible": baseFocusOutsideStyles,
  // Remove default focus styles for mouse interactions if :focus-visible is supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
  "&:focus:not(:focus-visible)": {
    outline: "none"
  },
  "@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)": {
    "&:focus-visible": {
      outline: "1px solid"
    }
  }
});
var insetFocusRingStyles = css({
  // Focus styles used when :focus-visible isn't supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  "&:focus": baseInsetStyles,
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values
  "&:focus-visible": baseInsetStyles,
  // Remove default focus styles for mouse interactions if :focus-visible is supported
  // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-selectors
  "&:focus:not(:focus-visible)": {
    outline: "none"
  },
  "@media screen and (forced-colors: active), screen and (-ms-high-contrast: active)": {
    "&:focus-visible": {
      outline: "1px solid",
      // eslint-disable-next-line @atlaskit/design-system/use-tokens-space
      outlineOffset: "-1px"
    }
  }
});
var FocusRing = (0, import_react2.memo)(function(_ref) {
  var children = _ref.children, isInset = _ref.isInset, focus = _ref.focus;
  var controlledStyles = isInset ? baseInsetStyles : baseFocusOutsideStyles;
  var uncontrolledStyles = isInset ? insetFocusRingStyles : focusRingStyles;
  var focusCls = typeof focus === "undefined" ? uncontrolledStyles : focus === "on" && controlledStyles;
  return jsx(ClassNames, null, function(_ref2) {
    var css2 = _ref2.css, cx = _ref2.cx;
    return import_react2.Children.only(
      // This may look unwieldy but means we skip applying styles / cloning if no className is applicable
      focusCls ? (
        // eslint-disable-next-line @repo/internal/react/no-clone-element
        (0, import_react2.cloneElement)(children, {
          className: cx([css2(focusCls), children.props.className])
        })
      ) : children
    );
  });
});
FocusRing.displayName = "FocusRing";
var focus_ring_default = FocusRing;

// node_modules/@atlaskit/focus-ring/dist/esm/use-focus-ring.js
init_slicedToArray();
var import_react4 = __toESM(require_react());

// node_modules/@atlaskit/button/dist/esm/old-button/shared/block-events.js
function abort(event) {
  event.preventDefault();
  event.stopPropagation();
}
var tabKeyCode = 9;
function onKey(event) {
  if (event.keyCode === tabKeyCode) {
    return;
  }
  abort(event);
}
var block = {
  onMouseDownCapture: abort,
  onMouseUpCapture: abort,
  // because we have tabIndex = -1 when disabled,
  // keyboard events can only occur when there is an overlay
  onKeyDownCapture: onKey,
  onKeyUpCapture: onKey,
  onTouchStartCapture: abort,
  onTouchEndCapture: abort,
  onPointerDownCapture: abort,
  onPointerUpCapture: abort,
  onClickCapture: abort,
  // Just smashing the existing onClick for good measure
  onClick: abort
};
var doNotBlock = {};
function blockEvents(_ref) {
  var isInteractive = _ref.isInteractive;
  return isInteractive ? doNotBlock : block;
}

// node_modules/@atlaskit/button/dist/esm/old-button/shared/css.js
init_defineProperty();
init_esm();

// node_modules/@atlaskit/button/dist/esm/old-button/shared/colors.js
var fadedB75 = "rgba(179, 212, 255, 0.6)";
var values = {
  // Default appearance
  background: {
    default: {
      default: {
        light: "var(--ds-background-neutral, ".concat(N20A, ")"),
        dark: "var(--ds-background-neutral, ".concat(DN70, ")")
      },
      hover: {
        light: "var(--ds-background-neutral-hovered, ".concat(N30A, ")"),
        dark: "var(--ds-background-neutral-hovered, ".concat(DN60, ")")
      },
      active: {
        light: "var(--ds-background-neutral-pressed, ".concat(fadedB75, ")"),
        dark: "var(--ds-background-neutral-pressed, ".concat(B75, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      }
    },
    primary: {
      default: {
        light: "var(--ds-background-brand-bold, ".concat(B400, ")"),
        dark: "var(--ds-background-brand-bold, ".concat(B100, ")")
      },
      hover: {
        light: "var(--ds-background-brand-bold-hovered, ".concat(B300, ")"),
        dark: "var(--ds-background-brand-bold-hovered, ".concat(B75, ")")
      },
      active: {
        light: "var(--ds-background-brand-bold-pressed, ".concat(B500, ")"),
        dark: "var(--ds-background-brand-bold-pressed, ".concat(B200, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      }
    },
    warning: {
      default: {
        light: "var(--ds-background-warning-bold, ".concat(Y300, ")"),
        dark: "var(--ds-background-warning-bold, ".concat(Y300, ")")
      },
      hover: {
        light: "var(--ds-background-warning-bold-hovered, ".concat(Y200, ")"),
        dark: "var(--ds-background-warning-bold-hovered, ".concat(Y200, ")")
      },
      active: {
        light: "var(--ds-background-warning-bold-pressed, ".concat(Y400, ")"),
        dark: "var(--ds-background-warning-bold-pressed, ".concat(Y400, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(Y400, ")"),
        dark: "var(--ds-background-selected, ".concat(Y400, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(Y400, ")"),
        dark: "var(--ds-background-selected, ".concat(Y400, ")")
      }
    },
    danger: {
      default: {
        light: "var(--ds-background-danger-bold, ".concat(R400, ")"),
        dark: "var(--ds-background-danger-bold, ".concat(R400, ")")
      },
      hover: {
        light: "var(--ds-background-danger-bold-hovered, ".concat(R300, ")"),
        dark: "var(--ds-background-danger-bold-hovered, ".concat(R300, ")")
      },
      active: {
        light: "var(--ds-background-danger-bold-pressed, ".concat(R500, ")"),
        dark: "var(--ds-background-danger-bold-pressed, ".concat(R500, ")")
      },
      disabled: {
        light: "var(--ds-background-disabled, ".concat(N20A, ")"),
        dark: "var(--ds-background-disabled, ".concat(DN70, ")")
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(R500, ")"),
        dark: "var(--ds-background-selected, ".concat(R500, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(R500, ")"),
        dark: "var(--ds-background-selected, ".concat(R500, ")")
      }
    },
    link: {
      default: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      }
    },
    subtle: {
      default: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      hover: {
        light: "var(--ds-background-neutral-subtle-hovered, ".concat(N30A, ")"),
        dark: "var(--ds-background-neutral-subtle-hovered, ".concat(DN60, ")")
      },
      active: {
        light: "var(--ds-background-neutral-subtle-pressed, ".concat(fadedB75, ")"),
        dark: "var(--ds-background-neutral-subtle-pressed, ".concat(B75, ")")
      },
      disabled: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(DN0, ")")
      }
    },
    "subtle-link": {
      default: {
        light: "var(--ds-background-neutral-subtle, none)",
        dark: "var(--ds-background-neutral-subtle, none)"
      },
      selected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      },
      focusSelected: {
        light: "var(--ds-background-selected, ".concat(N700, ")"),
        dark: "var(--ds-background-selected, ".concat(N20, ")")
      }
    }
  },
  color: {
    default: {
      default: {
        light: "var(--ds-text, ".concat(N500, ")"),
        dark: "var(--ds-text, ".concat(DN400, ")")
      },
      active: {
        light: "var(--ds-text, ".concat(B400, ")"),
        dark: "var(--ds-text, ".concat(B400, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    },
    primary: {
      default: {
        light: "var(--ds-text-inverse, ".concat(N0, ")"),
        dark: "var(--ds-text-inverse, ".concat(DN30, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    },
    warning: {
      default: {
        light: "var(--ds-text-warning-inverse, ".concat(N800, ")"),
        dark: "var(--ds-text-warning-inverse, ".concat(N800, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N800, ")"),
        dark: "var(--ds-text-selected, ".concat(N800, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N800, ")"),
        dark: "var(--ds-text-selected, ".concat(N800, ")")
      }
    },
    danger: {
      default: {
        light: "var(--ds-text-inverse, ".concat(N0, ")"),
        dark: "var(--ds-text-inverse, ".concat(N0, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN30, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N0, ")"),
        dark: "var(--ds-text-selected, ".concat(N0, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N0, ")"),
        dark: "var(--ds-text-selected, ".concat(N0, ")")
      }
    },
    link: {
      default: {
        light: "var(--ds-link, ".concat(B400, ")"),
        dark: "var(--ds-link, ".concat(B100, ")")
      },
      hover: {
        light: "var(--ds-link, ".concat(B300, ")"),
        dark: "var(--ds-link, ".concat(B75, ")")
      },
      active: {
        light: "var(--ds-link-pressed, ".concat(B500, ")"),
        dark: "var(--ds-link-pressed, ".concat(B200, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN100, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(N700, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(N700, ")")
      }
    },
    subtle: {
      default: {
        light: "var(--ds-text, ".concat(N500, ")"),
        dark: "var(--ds-text, ".concat(DN400, ")")
      },
      active: {
        light: "var(--ds-text, ".concat(B400, ")"),
        dark: "var(--ds-text, ".concat(B400, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN100, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    },
    "subtle-link": {
      default: {
        light: "var(--ds-text-subtle, ".concat(N200, ")"),
        dark: "var(--ds-text-subtle, ".concat(DN400, ")")
      },
      hover: {
        light: "var(--ds-text-subtle, ".concat(N90, ")"),
        dark: "var(--ds-text-subtle, ".concat(B50, ")")
      },
      active: {
        light: "var(--ds-text, ".concat(N400, ")"),
        dark: "var(--ds-text, ".concat(DN300, ")")
      },
      disabled: {
        light: "var(--ds-text-disabled, ".concat(N70, ")"),
        dark: "var(--ds-text-disabled, ".concat(DN100, ")")
      },
      selected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      },
      focusSelected: {
        light: "var(--ds-text-selected, ".concat(N20, ")"),
        dark: "var(--ds-text-selected, ".concat(DN400, ")")
      }
    }
  }
};
var colors_default = values;

// node_modules/@atlaskit/button/dist/esm/old-button/shared/css.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var gridSize = 8;
var HAS_DISABLED_BACKGROUND = ["default", "primary", "danger", "warning"];
var heights = {
  default: "".concat(32 / 14, "em"),
  // 32px
  compact: "".concat(24 / 14, "em"),
  none: "auto"
};
var lineHeights = {
  default: heights.default,
  compact: heights.compact,
  none: "inherit"
};
var padding = {
  // 10px gutter
  default: "0 ".concat(gridSize + gridSize / 4, "px"),
  compact: "0 ".concat(gridSize + gridSize / 4, "px"),
  none: "0"
};
var singleIconPadding = {
  // 2px gutter
  compact: "0 ".concat(gridSize / 4, "px"),
  default: "0 ".concat(gridSize / 4, "px"),
  none: "0"
};
var verticalAlign = {
  default: "middle",
  compact: "middle",
  none: "baseline"
};
var innerMargin = {
  content: "0 ".concat(gridSize / 4, "px"),
  icon: "0 ".concat(gridSize / 4, "px")
};
var defaultAfterStyles = {
  borderRadius: "inherit",
  inset: "var(--ds-space-0, 0px)",
  borderStyle: "solid",
  borderWidth: "var(--ds-border-width, 1px)",
  pointerEvents: "none",
  position: "absolute"
};
var defaultStyles = {
  background: "var(--ds-background-neutral-subtle, #00000000)",
  color: "var(--ds-text, #172B4D)",
  "&::after": _objectSpread(_objectSpread({}, defaultAfterStyles), {}, {
    content: '""',
    borderColor: "var(--ds-border, #091E4224)"
  }),
  "&:hover": {
    background: "var(--ds-background-neutral-hovered, #091E4224)"
  },
  "&:active": {
    background: "var(--ds-background-neutral-pressed, #091E424F)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  "&:disabled[disabled]": {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  "&:disabled[disabled]:hover": {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  "&:disabled[disabled]:active": {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  }
};
var primaryStyles = {
  background: "var(--ds-background-brand-bold, #0C66E4)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  "&:hover": {
    background: "var(--ds-background-brand-bold-hovered, #0055CC)"
  },
  "&:active": {
    background: "var(--ds-background-brand-bold-pressed, #09326C)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-brand-bold, #0C66E4)"
  }
};
var linkStyles = {
  background: "transparent",
  color: "var(--ds-link, #0C66E4)",
  "&:hover": {
    color: "var(--ds-link, #0C66E4)",
    textDecoration: "underline"
  },
  "&:active": {
    color: "var(--ds-link-pressed, #0055CC)",
    textDecoration: "underline"
  }
};
var subtleStyles = {
  background: "transparent",
  color: "var(--ds-text-subtle, #44546F)",
  "&:hover": {
    background: "var(--ds-background-neutral-subtle-hovered, #091E420F)"
  },
  "&:active": {
    background: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "transparent"
  }
};
var subtleLinkStyles = {
  background: "transparent",
  color: "var(--ds-text-subtle, #44546F)",
  "&:hover": {
    background: "transparent",
    color: "var(--ds-text-subtle, #44546F)",
    textDecoration: "underline"
  },
  "&:active": {
    background: "transparent",
    color: "var(--ds-text, #172B4D)",
    textDecoration: "underline"
  }
};
var warningStyles = {
  background: "var(--ds-background-warning-bold, #F5CD47)",
  color: "var(--ds-text-warning-inverse, #172B4D)",
  "&:hover": {
    background: "var(--ds-background-warning-bold-hovered, #E2B203)"
  },
  "&:active": {
    background: "var(--ds-background-warning-bold-pressed, #CF9F02)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-warning-bold, #F5CD47)"
  }
};
var dangerStyles = {
  background: "var(--ds-background-danger-bold, #C9372C)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  "&:hover": {
    background: "var(--ds-background-danger-bold-hovered, #AE2E24)"
  },
  "&:active": {
    background: "var(--ds-background-danger-bold-pressed, #5D1F1A)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-danger-bold, #C9372C)"
  }
};
var selectedStyles = {
  background: "var(--ds-background-selected, #E9F2FF)",
  color: "var(--ds-text-selected, #0C66E4)",
  "&:not([disabled])::after": _objectSpread(_objectSpread({}, defaultAfterStyles), {}, {
    content: '""',
    borderColor: "var(--ds-border-selected, #0C66E4)"
  })
};
var hasOverlayStyles = {
  '&[data-has-overlay="true"]': {
    cursor: "default",
    textDecoration: "none"
  }
};
function getColor(_ref) {
  var group = _ref.group, key = _ref.key, mode = _ref.mode;
  var rule = group[key] || group.default;
  return rule[mode];
}
function getColors(_ref2) {
  var appearance = _ref2.appearance, key = _ref2.key, mode = _ref2.mode;
  return {
    background: getColor({
      group: colors_default.background[appearance],
      key,
      mode
    }),
    // Needing to add !important to overcome specificity issue caused by deprecated AtlaskitThemeProvider
    color: "".concat(getColor({
      group: colors_default.color[appearance],
      key,
      mode
    }), " !important")
  };
}
function getCss(_ref3) {
  var appearance = _ref3.appearance, spacing = _ref3.spacing, mode = _ref3.mode, isSelected = _ref3.isSelected, shouldFitContainer = _ref3.shouldFitContainer, isOnlySingleIcon = _ref3.isOnlySingleIcon;
  var baseColors = getColors({
    appearance,
    key: isSelected ? "selected" : "default",
    mode
  });
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({
    // 0px margin added to css-reset
    alignItems: "baseline",
    borderWidth: 0,
    borderRadius: "var(--ds-radius-small, 3px)",
    boxSizing: "border-box",
    display: "inline-flex",
    fontSize: "inherit",
    fontStyle: "normal",
    // Chrome recently changed button so that they use 'arial' as the font family
    fontFamily: "inherit",
    fontWeight: "var(--ds-font-weight-medium, 500)",
    // margin for button has been applied to css reset
    maxWidth: "100%",
    // Needed to position overlay
    position: "relative",
    textAlign: "center",
    textDecoration: "none",
    transition: "background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)",
    whiteSpace: "nowrap"
  }, !fg("platform-component-visual-refresh") && baseColors), {}, {
    cursor: "pointer",
    height: heights[spacing],
    lineHeight: lineHeights[spacing],
    padding: isOnlySingleIcon ? singleIconPadding[spacing] : padding[spacing],
    verticalAlign: verticalAlign[spacing],
    width: shouldFitContainer ? "100%" : "auto",
    // justifyContent required for shouldFitContainer buttons with an icon inside
    justifyContent: "center"
  }, !fg("platform-component-visual-refresh") && _objectSpread(_objectSpread({
    // Disabling visited styles (just using the base colors)
    "&:visited": _objectSpread({}, baseColors),
    "&:hover": _objectSpread(_objectSpread({}, getColors({
      appearance,
      key: isSelected ? "selected" : "hover",
      mode
    })), {}, {
      textDecoration: !isSelected && (appearance === "link" || appearance === "subtle-link") ? "underline" : "inherit",
      // background, box-shadow
      transitionDuration: "0s, 0.15s"
    }),
    // giving active styles preference by listing them after focus
    "&:active": _objectSpread(_objectSpread({}, getColors({
      appearance,
      key: isSelected ? "selected" : "active",
      mode
    })), {}, {
      // background, box-shadow
      transitionDuration: "0s, 0s"
    }),
    // preventDefault prevents regular active styles from applying in Firefox
    '&[data-firefox-is-active="true"]': _objectSpread(_objectSpread({}, getColors({
      appearance,
      key: isSelected ? "selected" : "active",
      mode
    })), {}, {
      // background, box-shadow
      transitionDuration: "0s, 0s"
    }),
    // Giving disabled styles preference over active by listing them after.
    // Not using '&:disabled' because :disabled is not a valid state for all element types
    // so we are targeting the attribute
    // Attributes have the same specificity a pseudo classes so we are overriding :disabled here
    "&[disabled]": _objectSpread(_objectSpread({}, getColors({
      appearance,
      key: "disabled",
      mode
    })), {}, {
      cursor: "not-allowed",
      textDecoration: "none"
    })
  }, hasOverlayStyles), {}, {
    // disabling hover and active color changes when there is an overlay, but the button is not disabled
    '&[data-has-overlay="true"]:not([disabled]):hover, &[data-has-overlay="true"]:not([disabled]):active': _objectSpread({}, getColors({
      appearance,
      key: isSelected ? "selected" : "default",
      mode
    }))
  })), fg("platform-component-visual-refresh") && (isSelected ? selectedStyles : _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, appearance === "default" && defaultStyles), appearance === "primary" && primaryStyles), appearance === "link" && linkStyles), appearance === "subtle" && subtleStyles), appearance === "subtle-link" && subtleLinkStyles), appearance === "warning" && warningStyles), appearance === "danger" && dangerStyles), {}, {
    "&[disabled]": {
      color: "var(--ds-text-disabled, #091E424F)",
      backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : "transparent",
      cursor: "not-allowed",
      textDecoration: "none",
      "&:hovered": {
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : "transparent"
      },
      "&:active": {
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : "transparent"
      }
    }
  }, hasOverlayStyles))), {}, {
    "&::-moz-focus-inner": {
      border: 0,
      margin: 0,
      padding: 0
    }
  });
}
function getIconStyle(_ref4) {
  var spacing = _ref4.spacing;
  return css({
    display: "flex",
    // icon size cannot grow and shrink
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === "none" ? 0 : innerMargin.icon,
    flexGrow: 0,
    flexShrink: 0,
    alignSelf: "center",
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    fontSize: 0,
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: 0,
    userSelect: "none"
  });
}
function getContentStyle(_ref5) {
  var spacing = _ref5.spacing;
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === "none" ? 0 : innerMargin.content,
    // content can grow and shrink
    flexGrow: 1,
    flexShrink: 1,
    // ellipsis for overflow text
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  });
}
function getFadingCss(_ref6) {
  var hasOverlay = _ref6.hasOverlay;
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    opacity: hasOverlay ? 0 : 1,
    transition: "opacity 0.3s"
  });
}
var overlayCss = {
  // stretching to full width / height of button
  // this is important as we need it to still block
  // event if clicking in the button's own padding
  position: "absolute",
  left: 0,
  top: 0,
  right: 0,
  bottom: 0,
  // Putting all children in the center
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
};

// node_modules/@atlaskit/button/dist/esm/old-button/shared/get-if-visually-hidden-children.js
var import_react6 = __toESM(require_react());
var getIfVisuallyHiddenChildren = function getIfVisuallyHiddenChildren2(children) {
  return children && (0, import_react6.isValidElement)(children) && children.type === visually_hidden_default;
};

// node_modules/@atlaskit/button/dist/esm/old-button/shared/button-base.js
var _excluded2 = ["analyticsContext", "appearance", "autoFocus", "buttonCss", "children", "className", "href", "component", "iconAfter", "iconBefore", "interactionName", "isDisabled", "isSelected", "onBlur", "onClick", "onFocus", "onMouseDown", "overlay", "shouldFitContainer", "spacing", "tabIndex", "type", "testId"];
var noPointerEventsOnChildrenCss = {
  "> *": {
    pointerEvents: "none"
  }
};
var iconBeforeSpacingFixStyle = css({
  "--ds--button--new-icon-padding-end": "var(--ds-space-025, 2px)",
  "--ds--button--new-icon-padding-start": "var(--ds-space-050, 4px)",
  marginInlineStart: "var(--ds-space-negative-025, -2px)"
});
var iconAfterSpacingFixStyle = css({
  "--ds--button--new-icon-padding-end": "var(--ds-space-050, 4px)",
  "--ds--button--new-icon-padding-start": "var(--ds-space-025, 2px)",
  marginInlineEnd: "var(--ds-space-negative-025, -2px)"
});
var getSpacingFix = function getSpacingFix2(children, spacingStyles) {
  if (!children || getIfVisuallyHiddenChildren(children)) {
    return null;
  }
  return spacingStyles;
};
var getChildren = function getChildren2(children, childrenStyles) {
  if (getIfVisuallyHiddenChildren(children)) {
    return children;
  }
  return children ? jsx("span", {
    css: childrenStyles
  }, children) : null;
};
var ButtonBase = import_react7.default.forwardRef(function ButtonBase2(props, ref) {
  var analyticsContext = props.analyticsContext, _props$appearance = props.appearance, appearance = _props$appearance === void 0 ? "default" : _props$appearance, _props$autoFocus = props.autoFocus, autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus, buttonCss = props.buttonCss, children = props.children, className = props.className, href = props.href, _props$component = props.component, Component = _props$component === void 0 ? href ? "a" : "button" : _props$component, iconAfter = props.iconAfter, iconBefore = props.iconBefore, interactionName = props.interactionName, _props$isDisabled = props.isDisabled, isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled, _props$isSelected = props.isSelected, isSelected = _props$isSelected === void 0 ? false : _props$isSelected, onBlur = props.onBlur, _props$onClick = props.onClick, providedOnClick = _props$onClick === void 0 ? noop : _props$onClick, onFocus = props.onFocus, _props$onMouseDown = props.onMouseDown, providedOnMouseDown = _props$onMouseDown === void 0 ? noop : _props$onMouseDown, overlay = props.overlay, shouldFitContainer = props.shouldFitContainer, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "default" : _props$spacing, _props$tabIndex = props.tabIndex, tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex, _props$type = props.type, type = _props$type === void 0 ? !href ? "button" : void 0 : _props$type, testId = props.testId, rest = _objectWithoutProperties(props, _excluded2);
  var ourRef = (0, import_react7.useRef)();
  var setRef = (0, import_react7.useCallback)(function(node) {
    ourRef.current = node;
    if (ref == null) {
      return;
    }
    if (typeof ref === "function") {
      ref(node);
      return;
    }
    ref.current = node;
  }, [ourRef, ref]);
  useAutoFocus(ourRef, autoFocus);
  var interactionContext = (0, import_react7.useContext)(esm_default);
  var handleClick = (0, import_react7.useCallback)(function(e, analyticsEvent) {
    interactionContext && interactionContext.tracePress(interactionName, e.timeStamp);
    providedOnClick(e, analyticsEvent);
  }, [providedOnClick, interactionContext, interactionName]);
  var onClick = usePlatformLeafEventHandler({
    fn: handleClick,
    action: "clicked",
    componentName: "button",
    packageName: "@atlaskit/button",
    packageVersion: "0.0.0-development",
    analyticsData: analyticsContext
  });
  var onMouseDown = (0, import_react7.useCallback)(function(event) {
    event.preventDefault();
    providedOnMouseDown(event);
  }, [providedOnMouseDown]);
  (0, import_react7.useEffect)(function() {
    var el = ourRef.current;
    if (isDisabled && el && el === document.activeElement) {
      el.blur();
    }
  }, [isDisabled]);
  var hasOverlay = Boolean(overlay);
  var fadeStyles = css(getFadingCss({
    hasOverlay
  }));
  var isInteractive = !isDisabled && !hasOverlay;
  var spinnerHackCss = {};
  if (isSelected || isDisabled || appearance === "warning") {
    spinnerHackCss = {
      "[data-theme] & circle": {
        stroke: "".concat(isSelected || isDisabled ? "var(--ds-icon-subtle, ".concat(N500, ")") : "var(--ds-icon-warning-inverse, ".concat(N500, ")"), " !important")
      }
    };
  }
  return jsx(focus_ring_default, null, jsx(Component, _extends({}, rest, {
    ref: setRef,
    className,
    css: [buttonCss, isInteractive ? null : noPointerEventsOnChildrenCss],
    "data-has-overlay": hasOverlay ? true : void 0,
    "data-testid": testId,
    disabled: isDisabled,
    href: isInteractive ? href : void 0,
    onBlur,
    onClick,
    onFocus,
    onMouseDown,
    tabIndex: isDisabled ? -1 : tabIndex,
    type
  }, blockEvents({
    isInteractive
  })), iconBefore ? jsx("span", {
    css: [
      fadeStyles,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      getIconStyle({
        spacing
      }),
      getSpacingFix(children, iconBeforeSpacingFixStyle)
    ]
  }, iconBefore) : null, getChildren(children, [fadeStyles, getContentStyle({
    spacing
  })]), iconAfter ? jsx("span", {
    css: [
      fadeStyles,
      // eslint-disable-next-line @atlaskit/ui-styling-standard/no-imported-style-values -- Ignored via go/DSP-18766
      getIconStyle({
        spacing
      }),
      getSpacingFix(children, iconAfterSpacingFixStyle)
    ]
  }, iconAfter) : null, overlay ? jsx("span", {
    css: [overlayCss, spinnerHackCss]
  }, overlay) : null));
});
var button_base_default = ButtonBase;

// node_modules/@atlaskit/button/dist/esm/old-button/shared/get-is-only-single-icon.js
function getIsOnlySingleIcon(_ref) {
  var children = _ref.children, iconBefore = _ref.iconBefore, iconAfter = _ref.iconAfter;
  if (getIfVisuallyHiddenChildren(children)) {
    return true;
  }
  if (children) {
    return false;
  }
  if (iconBefore && !iconAfter) {
    return true;
  }
  if (!iconBefore && iconAfter) {
    return true;
  }
  return false;
}

// node_modules/@atlaskit/button/dist/esm/old-button/button.js
var _excluded3 = ["appearance", "children", "iconBefore", "iconAfter", "isSelected", "onMouseDown", "onMouseUp", "shouldFitContainer", "spacing"];
var isFirefox = typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
var Button = import_react9.default.memo(import_react9.default.forwardRef(function Button2(_ref, ref) {
  var _ref$appearance = _ref.appearance, appearance = _ref$appearance === void 0 ? "default" : _ref$appearance, children = _ref.children, iconBefore = _ref.iconBefore, iconAfter = _ref.iconAfter, _ref$isSelected = _ref.isSelected, isSelected = _ref$isSelected === void 0 ? false : _ref$isSelected, _ref$onMouseDown = _ref.onMouseDown, providedOnMouseDown = _ref$onMouseDown === void 0 ? noop : _ref$onMouseDown, _ref$onMouseUp = _ref.onMouseUp, providedOnMouseUp = _ref$onMouseUp === void 0 ? noop : _ref$onMouseUp, _ref$shouldFitContain = _ref.shouldFitContainer, shouldFitContainer = _ref$shouldFitContain === void 0 ? false : _ref$shouldFitContain, _ref$spacing = _ref.spacing, spacing = _ref$spacing === void 0 ? "default" : _ref$spacing, rest = _objectWithoutProperties(_ref, _excluded3);
  var _useGlobalTheme = useTheme(), mode = _useGlobalTheme.mode;
  var isOnlySingleIcon = getIsOnlySingleIcon({
    children,
    iconBefore,
    iconAfter
  });
  var _useState = (0, import_react9.useState)(false), _useState2 = _slicedToArray(_useState, 2), isActive = _useState2[0], setIsActive = _useState2[1];
  var onMouseDown = (0, import_react9.useCallback)(function(event) {
    providedOnMouseDown(event);
    if (isFirefox) {
      setIsActive(true);
    }
  }, [providedOnMouseDown, setIsActive]);
  var onMouseUp = (0, import_react9.useCallback)(function(event) {
    providedOnMouseUp(event);
    if (isFirefox) {
      setIsActive(false);
    }
  }, [providedOnMouseUp, setIsActive]);
  var buttonCss = (0, import_react9.useMemo)(function() {
    return getCss({
      appearance,
      spacing,
      mode,
      isSelected,
      shouldFitContainer,
      isOnlySingleIcon
    });
  }, [appearance, spacing, mode, isSelected, shouldFitContainer, isOnlySingleIcon]);
  return import_react9.default.createElement(button_base_default, _extends({}, rest, {
    ref,
    appearance,
    buttonCss,
    children,
    "data-firefox-is-active": isActive ? true : void 0,
    iconAfter,
    iconBefore,
    isSelected,
    onMouseDown,
    onMouseUp,
    spacing
  }));
}));
Button.displayName = "Button";
var button_default = Button;

export {
  createTheme,
  theme_default,
  getCss,
  button_base_default,
  getIsOnlySingleIcon,
  button_default
};
//# sourceMappingURL=chunk-IOZSIM46.js.map
