{
  "version": 3,
  "sources": ["../../@atlaskit/ds-lib/dist/esm/hooks/use-controlled.js"],
  "sourcesContent": ["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\n/**\n * Handle controlled & uncontrolled component state\n *\n * ```js\n *  const [uncontrolledState, setUncontrolledState] = useControlled(\n *    controlledValue,\n *    () => defaultValue,\n *  );\n * ```\n *\n * @param propValue\n * @param getDefaultPropValue\n */\nexport default function useControlled(propValue) {\n  var getDefaultPropValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n    return propValue;\n  };\n  var isControlled = propValue !== undefined;\n  var _useState = useState(getDefaultPropValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    valueState = _useState2[0],\n    setValue = _useState2[1];\n  var isControlledRef = useRef(isControlled);\n  useEffect(function () {\n    isControlledRef.current = isControlled;\n  }, [isControlled]);\n  var value = isControlled ? propValue : valueState;\n  var setValueIfUncontrolled = useCallback(function (newValue) {\n    if (!isControlledRef.current) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}"],
  "mappings": ";;;;;;;;;;;;AAAA;AACA,mBAAyD;AAe1C,SAAR,cAA+B,WAAW;AAC/C,MAAI,sBAAsB,UAAU,SAAS,KAAK,UAAU,CAAC,MAAM,SAAY,UAAU,CAAC,IAAI,WAAY;AACxG,WAAO;AAAA,EACT;AACA,MAAI,eAAe,cAAc;AACjC,MAAI,gBAAY,uBAAS,mBAAmB,GAC1C,aAAa,eAAe,WAAW,CAAC,GACxC,aAAa,WAAW,CAAC,GACzB,WAAW,WAAW,CAAC;AACzB,MAAI,sBAAkB,qBAAO,YAAY;AACzC,8BAAU,WAAY;AACpB,oBAAgB,UAAU;AAAA,EAC5B,GAAG,CAAC,YAAY,CAAC;AACjB,MAAI,QAAQ,eAAe,YAAY;AACvC,MAAI,6BAAyB,0BAAY,SAAU,UAAU;AAC3D,QAAI,CAAC,gBAAgB,SAAS;AAC5B,eAAS,QAAQ;AAAA,IACnB;AAAA,EACF,GAAG,CAAC,CAAC;AACL,SAAO,CAAC,OAAO,sBAAsB;AACvC;",
  "names": []
}
