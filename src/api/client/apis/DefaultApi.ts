/* tslint:disable */
/* eslint-disable */
/**
 * Gen-C Scripts API
 * OpenAPI specification for key backend surfaces used by the dashboard. The documented endpoints power script CRUD flows in the dashboard and the YouTube idea seed generator. Responses follow the existing `{ success: ... }` envelope used by the legacy fetch helpers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddVideoToCollectionRequest,
  ApiInstagramUserReelsGetUserIdParameter,
  ApiInstagramUserReelsPostRequest,
  ApiTiktokUserFeedPostRequest,
  ApiVideoScrapeUrlPost200Response,
  ApiVideoScrapeUrlPostRequest,
  ApiVideosAddToCollectionPost200Response,
  ApiVideosCollectionPostRequest,
  BasicSuccessResponse,
  CollectionsResponse,
  CopyVideoRequest,
  CreateNoteRequest,
  CreateScriptRequest,
  ErrorResponse,
  GenerateIdeaSeedsRequest,
  GenerateIdeaSeedsResponse,
  InstagramReelsResponse,
  InstagramUserIdResponse,
  MoveVideoRequest,
  NoteResponse,
  NotesResponse,
  OrchestrateRequest,
  OrchestrateResponse,
  ScriptResponse,
  ScriptsResponse,
  TikTokUserFeedResponse,
  TranscribeFromUrlRequest,
  TranscribeFromUrlResponse,
  UpdateCollectionRequest,
  UpdateNoteRequest,
  UpdateScriptRequest,
  VideosResponse,
} from '../models/index';
import {
    AddVideoToCollectionRequestFromJSON,
    AddVideoToCollectionRequestToJSON,
    ApiInstagramUserReelsGetUserIdParameterFromJSON,
    ApiInstagramUserReelsGetUserIdParameterToJSON,
    ApiInstagramUserReelsPostRequestFromJSON,
    ApiInstagramUserReelsPostRequestToJSON,
    ApiTiktokUserFeedPostRequestFromJSON,
    ApiTiktokUserFeedPostRequestToJSON,
    ApiVideoScrapeUrlPost200ResponseFromJSON,
    ApiVideoScrapeUrlPost200ResponseToJSON,
    ApiVideoScrapeUrlPostRequestFromJSON,
    ApiVideoScrapeUrlPostRequestToJSON,
    ApiVideosAddToCollectionPost200ResponseFromJSON,
    ApiVideosAddToCollectionPost200ResponseToJSON,
    ApiVideosCollectionPostRequestFromJSON,
    ApiVideosCollectionPostRequestToJSON,
    BasicSuccessResponseFromJSON,
    BasicSuccessResponseToJSON,
    CollectionsResponseFromJSON,
    CollectionsResponseToJSON,
    CopyVideoRequestFromJSON,
    CopyVideoRequestToJSON,
    CreateNoteRequestFromJSON,
    CreateNoteRequestToJSON,
    CreateScriptRequestFromJSON,
    CreateScriptRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GenerateIdeaSeedsRequestFromJSON,
    GenerateIdeaSeedsRequestToJSON,
    GenerateIdeaSeedsResponseFromJSON,
    GenerateIdeaSeedsResponseToJSON,
    InstagramReelsResponseFromJSON,
    InstagramReelsResponseToJSON,
    InstagramUserIdResponseFromJSON,
    InstagramUserIdResponseToJSON,
    MoveVideoRequestFromJSON,
    MoveVideoRequestToJSON,
    NoteResponseFromJSON,
    NoteResponseToJSON,
    NotesResponseFromJSON,
    NotesResponseToJSON,
    OrchestrateRequestFromJSON,
    OrchestrateRequestToJSON,
    OrchestrateResponseFromJSON,
    OrchestrateResponseToJSON,
    ScriptResponseFromJSON,
    ScriptResponseToJSON,
    ScriptsResponseFromJSON,
    ScriptsResponseToJSON,
    TikTokUserFeedResponseFromJSON,
    TikTokUserFeedResponseToJSON,
    TranscribeFromUrlRequestFromJSON,
    TranscribeFromUrlRequestToJSON,
    TranscribeFromUrlResponseFromJSON,
    TranscribeFromUrlResponseToJSON,
    UpdateCollectionRequestFromJSON,
    UpdateCollectionRequestToJSON,
    UpdateNoteRequestFromJSON,
    UpdateNoteRequestToJSON,
    UpdateScriptRequestFromJSON,
    UpdateScriptRequestToJSON,
    VideosResponseFromJSON,
    VideosResponseToJSON,
} from '../models/index';

export interface ApiCollectionsCopyVideoPostRequest {
    copyVideoRequest: CopyVideoRequest;
}

export interface ApiCollectionsDeleteDeleteRequest {
    id: string;
}

export interface ApiCollectionsMoveVideoPostRequest {
    moveVideoRequest: MoveVideoRequest;
}

export interface ApiCollectionsUpdatePatchRequest {
    updateCollectionRequest: UpdateCollectionRequest;
}

export interface ApiInstagramUserIdGetRequest {
    username: string;
}

export interface ApiInstagramUserReelsGetRequest {
    userId: ApiInstagramUserReelsGetUserIdParameter;
    username?: string;
    count?: number;
    includeFeedVideo?: boolean;
}

export interface ApiInstagramUserReelsPostOperationRequest {
    apiInstagramUserReelsPostRequest: ApiInstagramUserReelsPostRequest;
}

export interface ApiNotesIdDeleteRequest {
    id: string;
}

export interface ApiNotesIdGetRequest {
    id: string;
}

export interface ApiNotesIdPutRequest {
    id: string;
    updateNoteRequest: UpdateNoteRequest;
}

export interface ApiNotesPostRequest {
    createNoteRequest: CreateNoteRequest;
}

export interface ApiScriptsIdDeleteRequest {
    id: string;
}

export interface ApiScriptsIdGetRequest {
    id: string;
}

export interface ApiScriptsIdPutRequest {
    id: string;
    updateScriptRequest: UpdateScriptRequest;
}

export interface ApiScriptsPostRequest {
    createScriptRequest: CreateScriptRequest;
}

export interface ApiScriptsYoutubeIdeasPostRequest {
    generateIdeaSeedsRequest: GenerateIdeaSeedsRequest;
}

export interface ApiTiktokUserFeedGetRequest {
    username: string;
    count?: number;
}

export interface ApiTiktokUserFeedPostOperationRequest {
    apiTiktokUserFeedPostRequest: ApiTiktokUserFeedPostRequest;
}

export interface ApiVideoOrchestratePostRequest {
    orchestrateRequest: OrchestrateRequest;
}

export interface ApiVideoScrapeUrlPostOperationRequest {
    apiVideoScrapeUrlPostRequest: ApiVideoScrapeUrlPostRequest;
}

export interface ApiVideoTranscribeFromUrlPostRequest {
    transcribeFromUrlRequest: TranscribeFromUrlRequest;
}

export interface ApiVideosAddToCollectionPostRequest {
    addVideoToCollectionRequest: AddVideoToCollectionRequest;
}

export interface ApiVideosCollectionPostOperationRequest {
    apiVideosCollectionPostRequest: ApiVideosCollectionPostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Copy a video to another collection.
     */
    async apiCollectionsCopyVideoPostRaw(requestParameters: ApiCollectionsCopyVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicSuccessResponse>> {
        if (requestParameters['copyVideoRequest'] == null) {
            throw new runtime.RequiredError(
                'copyVideoRequest',
                'Required parameter "copyVideoRequest" was null or undefined when calling apiCollectionsCopyVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/collections/copy-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyVideoRequestToJSON(requestParameters['copyVideoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Copy a video to another collection.
     */
    async apiCollectionsCopyVideoPost(requestParameters: ApiCollectionsCopyVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicSuccessResponse> {
        const response = await this.apiCollectionsCopyVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a collection by id.
     */
    async apiCollectionsDeleteDeleteRaw(requestParameters: ApiCollectionsDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCollectionsDeleteDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/collections/delete`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete a collection by id.
     */
    async apiCollectionsDeleteDelete(requestParameters: ApiCollectionsDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicSuccessResponse> {
        const response = await this.apiCollectionsDeleteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List collections for the authenticated user.
     */
    async apiCollectionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/collections`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionsResponseFromJSON(jsonValue));
    }

    /**
     * List collections for the authenticated user.
     */
    async apiCollectionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionsResponse> {
        const response = await this.apiCollectionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Move a video between collections.
     */
    async apiCollectionsMoveVideoPostRaw(requestParameters: ApiCollectionsMoveVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicSuccessResponse>> {
        if (requestParameters['moveVideoRequest'] == null) {
            throw new runtime.RequiredError(
                'moveVideoRequest',
                'Required parameter "moveVideoRequest" was null or undefined when calling apiCollectionsMoveVideoPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/collections/move-video`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MoveVideoRequestToJSON(requestParameters['moveVideoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Move a video between collections.
     */
    async apiCollectionsMoveVideoPost(requestParameters: ApiCollectionsMoveVideoPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicSuccessResponse> {
        const response = await this.apiCollectionsMoveVideoPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a collection\'s metadata.
     */
    async apiCollectionsUpdatePatchRaw(requestParameters: ApiCollectionsUpdatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicSuccessResponse>> {
        if (requestParameters['updateCollectionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCollectionRequest',
                'Required parameter "updateCollectionRequest" was null or undefined when calling apiCollectionsUpdatePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/collections/update`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCollectionRequestToJSON(requestParameters['updateCollectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Update a collection\'s metadata.
     */
    async apiCollectionsUpdatePatch(requestParameters: ApiCollectionsUpdatePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicSuccessResponse> {
        const response = await this.apiCollectionsUpdatePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve Instagram user ID by username.
     */
    async apiInstagramUserIdGetRaw(requestParameters: ApiInstagramUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstagramUserIdResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling apiInstagramUserIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/instagram/user-id`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstagramUserIdResponseFromJSON(jsonValue));
    }

    /**
     * Resolve Instagram user ID by username.
     */
    async apiInstagramUserIdGet(requestParameters: ApiInstagramUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstagramUserIdResponse> {
        const response = await this.apiInstagramUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch Instagram reels for a user.
     */
    async apiInstagramUserReelsGetRaw(requestParameters: ApiInstagramUserReelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstagramReelsResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling apiInstagramUserReelsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['user_id'] = requestParameters['userId'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        if (requestParameters['includeFeedVideo'] != null) {
            queryParameters['include_feed_video'] = requestParameters['includeFeedVideo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/instagram/user-reels`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstagramReelsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch Instagram reels for a user.
     */
    async apiInstagramUserReelsGet(requestParameters: ApiInstagramUserReelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstagramReelsResponse> {
        const response = await this.apiInstagramUserReelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch Instagram reels for a user (JSON body variant).
     */
    async apiInstagramUserReelsPostRaw(requestParameters: ApiInstagramUserReelsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InstagramReelsResponse>> {
        if (requestParameters['apiInstagramUserReelsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiInstagramUserReelsPostRequest',
                'Required parameter "apiInstagramUserReelsPostRequest" was null or undefined when calling apiInstagramUserReelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/instagram/user-reels`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiInstagramUserReelsPostRequestToJSON(requestParameters['apiInstagramUserReelsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InstagramReelsResponseFromJSON(jsonValue));
    }

    /**
     * Fetch Instagram reels for a user (JSON body variant).
     */
    async apiInstagramUserReelsPost(requestParameters: ApiInstagramUserReelsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InstagramReelsResponse> {
        const response = await this.apiInstagramUserReelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List notes for the authenticated user.
     */
    async apiNotesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/notes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotesResponseFromJSON(jsonValue));
    }

    /**
     * List notes for the authenticated user.
     */
    async apiNotesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotesResponse> {
        const response = await this.apiNotesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a note by id.
     */
    async apiNotesIdDeleteRaw(requestParameters: ApiNotesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiNotesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/notes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete a note by id.
     */
    async apiNotesIdDelete(requestParameters: ApiNotesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicSuccessResponse> {
        const response = await this.apiNotesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a note by id.
     */
    async apiNotesIdGetRaw(requestParameters: ApiNotesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiNotesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/notes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a note by id.
     */
    async apiNotesIdGet(requestParameters: ApiNotesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoteResponse> {
        const response = await this.apiNotesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a note by id.
     */
    async apiNotesIdPutRaw(requestParameters: ApiNotesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoteResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiNotesIdPut().'
            );
        }

        if (requestParameters['updateNoteRequest'] == null) {
            throw new runtime.RequiredError(
                'updateNoteRequest',
                'Required parameter "updateNoteRequest" was null or undefined when calling apiNotesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/notes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNoteRequestToJSON(requestParameters['updateNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteResponseFromJSON(jsonValue));
    }

    /**
     * Update a note by id.
     */
    async apiNotesIdPut(requestParameters: ApiNotesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoteResponse> {
        const response = await this.apiNotesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a note for the authenticated user.
     */
    async apiNotesPostRaw(requestParameters: ApiNotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoteResponse>> {
        if (requestParameters['createNoteRequest'] == null) {
            throw new runtime.RequiredError(
                'createNoteRequest',
                'Required parameter "createNoteRequest" was null or undefined when calling apiNotesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/notes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNoteRequestToJSON(requestParameters['createNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteResponseFromJSON(jsonValue));
    }

    /**
     * Create a note for the authenticated user.
     */
    async apiNotesPost(requestParameters: ApiNotesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoteResponse> {
        const response = await this.apiNotesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List scripts for the authenticated user.
     */
    async apiScriptsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/scripts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptsResponseFromJSON(jsonValue));
    }

    /**
     * List scripts for the authenticated user.
     */
    async apiScriptsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptsResponse> {
        const response = await this.apiScriptsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete a script.
     */
    async apiScriptsIdDeleteRaw(requestParameters: ApiScriptsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BasicSuccessResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiScriptsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/scripts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicSuccessResponseFromJSON(jsonValue));
    }

    /**
     * Delete a script.
     */
    async apiScriptsIdDelete(requestParameters: ApiScriptsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BasicSuccessResponse> {
        const response = await this.apiScriptsIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch a script by id.
     */
    async apiScriptsIdGetRaw(requestParameters: ApiScriptsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiScriptsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/scripts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptResponseFromJSON(jsonValue));
    }

    /**
     * Fetch a script by id.
     */
    async apiScriptsIdGet(requestParameters: ApiScriptsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptResponse> {
        const response = await this.apiScriptsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a script.
     */
    async apiScriptsIdPutRaw(requestParameters: ApiScriptsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiScriptsIdPut().'
            );
        }

        if (requestParameters['updateScriptRequest'] == null) {
            throw new runtime.RequiredError(
                'updateScriptRequest',
                'Required parameter "updateScriptRequest" was null or undefined when calling apiScriptsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/scripts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScriptRequestToJSON(requestParameters['updateScriptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptResponseFromJSON(jsonValue));
    }

    /**
     * Update a script.
     */
    async apiScriptsIdPut(requestParameters: ApiScriptsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptResponse> {
        const response = await this.apiScriptsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a script for the authenticated user.
     */
    async apiScriptsPostRaw(requestParameters: ApiScriptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptResponse>> {
        if (requestParameters['createScriptRequest'] == null) {
            throw new runtime.RequiredError(
                'createScriptRequest',
                'Required parameter "createScriptRequest" was null or undefined when calling apiScriptsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/scripts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScriptRequestToJSON(requestParameters['createScriptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptResponseFromJSON(jsonValue));
    }

    /**
     * Create a script for the authenticated user.
     */
    async apiScriptsPost(requestParameters: ApiScriptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptResponse> {
        const response = await this.apiScriptsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate YouTube idea seeds from a transcript.
     */
    async apiScriptsYoutubeIdeasPostRaw(requestParameters: ApiScriptsYoutubeIdeasPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateIdeaSeedsResponse>> {
        if (requestParameters['generateIdeaSeedsRequest'] == null) {
            throw new runtime.RequiredError(
                'generateIdeaSeedsRequest',
                'Required parameter "generateIdeaSeedsRequest" was null or undefined when calling apiScriptsYoutubeIdeasPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/scripts/youtube-ideas`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateIdeaSeedsRequestToJSON(requestParameters['generateIdeaSeedsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateIdeaSeedsResponseFromJSON(jsonValue));
    }

    /**
     * Generate YouTube idea seeds from a transcript.
     */
    async apiScriptsYoutubeIdeasPost(requestParameters: ApiScriptsYoutubeIdeasPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateIdeaSeedsResponse> {
        const response = await this.apiScriptsYoutubeIdeasPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch TikTok user feed by username.
     */
    async apiTiktokUserFeedGetRaw(requestParameters: ApiTiktokUserFeedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TikTokUserFeedResponse>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling apiTiktokUserFeedGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        if (requestParameters['count'] != null) {
            queryParameters['count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/tiktok/user-feed`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TikTokUserFeedResponseFromJSON(jsonValue));
    }

    /**
     * Fetch TikTok user feed by username.
     */
    async apiTiktokUserFeedGet(requestParameters: ApiTiktokUserFeedGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TikTokUserFeedResponse> {
        const response = await this.apiTiktokUserFeedGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch TikTok user feed (JSON body variant).
     */
    async apiTiktokUserFeedPostRaw(requestParameters: ApiTiktokUserFeedPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TikTokUserFeedResponse>> {
        if (requestParameters['apiTiktokUserFeedPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiTiktokUserFeedPostRequest',
                'Required parameter "apiTiktokUserFeedPostRequest" was null or undefined when calling apiTiktokUserFeedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/tiktok/user-feed`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiTiktokUserFeedPostRequestToJSON(requestParameters['apiTiktokUserFeedPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TikTokUserFeedResponseFromJSON(jsonValue));
    }

    /**
     * Fetch TikTok user feed (JSON body variant).
     */
    async apiTiktokUserFeedPost(requestParameters: ApiTiktokUserFeedPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TikTokUserFeedResponse> {
        const response = await this.apiTiktokUserFeedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Orchestrate scrape → transcribe → persist workflow.
     */
    async apiVideoOrchestratePostRaw(requestParameters: ApiVideoOrchestratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrchestrateResponse>> {
        if (requestParameters['orchestrateRequest'] == null) {
            throw new runtime.RequiredError(
                'orchestrateRequest',
                'Required parameter "orchestrateRequest" was null or undefined when calling apiVideoOrchestratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/video/orchestrate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrchestrateRequestToJSON(requestParameters['orchestrateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrchestrateResponseFromJSON(jsonValue));
    }

    /**
     * Orchestrate scrape → transcribe → persist workflow.
     */
    async apiVideoOrchestratePost(requestParameters: ApiVideoOrchestratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrchestrateResponse> {
        const response = await this.apiVideoOrchestratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resolve a public video URL to downloadable media.
     */
    async apiVideoScrapeUrlPostRaw(requestParameters: ApiVideoScrapeUrlPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiVideoScrapeUrlPost200Response>> {
        if (requestParameters['apiVideoScrapeUrlPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiVideoScrapeUrlPostRequest',
                'Required parameter "apiVideoScrapeUrlPostRequest" was null or undefined when calling apiVideoScrapeUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/video/scrape-url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiVideoScrapeUrlPostRequestToJSON(requestParameters['apiVideoScrapeUrlPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiVideoScrapeUrlPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Resolve a public video URL to downloadable media.
     */
    async apiVideoScrapeUrlPost(requestParameters: ApiVideoScrapeUrlPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiVideoScrapeUrlPost200Response> {
        const response = await this.apiVideoScrapeUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Transcribe a video from a platform URL.
     */
    async apiVideoTranscribeFromUrlPostRaw(requestParameters: ApiVideoTranscribeFromUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TranscribeFromUrlResponse>> {
        if (requestParameters['transcribeFromUrlRequest'] == null) {
            throw new runtime.RequiredError(
                'transcribeFromUrlRequest',
                'Required parameter "transcribeFromUrlRequest" was null or undefined when calling apiVideoTranscribeFromUrlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/video/transcribe-from-url`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TranscribeFromUrlRequestToJSON(requestParameters['transcribeFromUrlRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TranscribeFromUrlResponseFromJSON(jsonValue));
    }

    /**
     * Transcribe a video from a platform URL.
     */
    async apiVideoTranscribeFromUrlPost(requestParameters: ApiVideoTranscribeFromUrlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TranscribeFromUrlResponse> {
        const response = await this.apiVideoTranscribeFromUrlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a processed video to a collection.
     */
    async apiVideosAddToCollectionPostRaw(requestParameters: ApiVideosAddToCollectionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiVideosAddToCollectionPost200Response>> {
        if (requestParameters['addVideoToCollectionRequest'] == null) {
            throw new runtime.RequiredError(
                'addVideoToCollectionRequest',
                'Required parameter "addVideoToCollectionRequest" was null or undefined when calling apiVideosAddToCollectionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/videos/add-to-collection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddVideoToCollectionRequestToJSON(requestParameters['addVideoToCollectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiVideosAddToCollectionPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a processed video to a collection.
     */
    async apiVideosAddToCollectionPost(requestParameters: ApiVideosAddToCollectionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiVideosAddToCollectionPost200Response> {
        const response = await this.apiVideosAddToCollectionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List videos for a collection.
     */
    async apiVideosCollectionPostRaw(requestParameters: ApiVideosCollectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideosResponse>> {
        if (requestParameters['apiVideosCollectionPostRequest'] == null) {
            throw new runtime.RequiredError(
                'apiVideosCollectionPostRequest',
                'Required parameter "apiVideosCollectionPostRequest" was null or undefined when calling apiVideosCollectionPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/videos/collection`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiVideosCollectionPostRequestToJSON(requestParameters['apiVideosCollectionPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideosResponseFromJSON(jsonValue));
    }

    /**
     * List videos for a collection.
     */
    async apiVideosCollectionPost(requestParameters: ApiVideosCollectionPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideosResponse> {
        const response = await this.apiVideosCollectionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
