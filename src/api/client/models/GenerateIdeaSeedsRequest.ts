/* tslint:disable */
/* eslint-disable */
/**
 * Gen-C Scripts API
 * OpenAPI specification for key backend surfaces used by the dashboard. The documented endpoints power script CRUD flows in the dashboard and the YouTube idea seed generator. Responses follow the existing `{ success: ... }` envelope used by the legacy fetch helpers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TranscriptChunk } from './TranscriptChunk';
import {
    TranscriptChunkFromJSON,
    TranscriptChunkFromJSONTyped,
    TranscriptChunkToJSON,
    TranscriptChunkToJSONTyped,
} from './TranscriptChunk';

/**
 * 
 * @export
 * @interface GenerateIdeaSeedsRequest
 */
export interface GenerateIdeaSeedsRequest {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof GenerateIdeaSeedsRequest
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateIdeaSeedsRequest
     */
    lang?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateIdeaSeedsRequest
     */
    videoId?: string;
    /**
     * 
     * @type {string}
     * @memberof GenerateIdeaSeedsRequest
     */
    transcript?: string;
    /**
     * 
     * @type {Array<TranscriptChunk>}
     * @memberof GenerateIdeaSeedsRequest
     */
    chunks?: Array<TranscriptChunk>;
    /**
     * 
     * @type {number}
     * @memberof GenerateIdeaSeedsRequest
     */
    maxIdeas?: number;
    /**
     * 
     * @type {number}
     * @memberof GenerateIdeaSeedsRequest
     */
    minOverall?: number;
    /**
     * 
     * @type {string}
     * @memberof GenerateIdeaSeedsRequest
     */
    audienceLevel?: GenerateIdeaSeedsRequestAudienceLevelEnum;
}


/**
 * @export
 */
export const GenerateIdeaSeedsRequestAudienceLevelEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type GenerateIdeaSeedsRequestAudienceLevelEnum = typeof GenerateIdeaSeedsRequestAudienceLevelEnum[keyof typeof GenerateIdeaSeedsRequestAudienceLevelEnum];


/**
 * Check if a given object implements the GenerateIdeaSeedsRequest interface.
 */
export function instanceOfGenerateIdeaSeedsRequest(value: object): value is GenerateIdeaSeedsRequest {
    return true;
}

export function GenerateIdeaSeedsRequestFromJSON(json: any): GenerateIdeaSeedsRequest {
    return GenerateIdeaSeedsRequestFromJSONTyped(json, false);
}

export function GenerateIdeaSeedsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerateIdeaSeedsRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'url': json['url'] == null ? undefined : json['url'],
        'lang': json['lang'] == null ? undefined : json['lang'],
        'videoId': json['videoId'] == null ? undefined : json['videoId'],
        'transcript': json['transcript'] == null ? undefined : json['transcript'],
        'chunks': json['chunks'] == null ? undefined : ((json['chunks'] as Array<any>).map(TranscriptChunkFromJSON)),
        'maxIdeas': json['maxIdeas'] == null ? undefined : json['maxIdeas'],
        'minOverall': json['minOverall'] == null ? undefined : json['minOverall'],
        'audienceLevel': json['audienceLevel'] == null ? undefined : json['audienceLevel'],
    };
}

export function GenerateIdeaSeedsRequestToJSON(json: any): GenerateIdeaSeedsRequest {
    return GenerateIdeaSeedsRequestToJSONTyped(json, false);
}

export function GenerateIdeaSeedsRequestToJSONTyped(value?: GenerateIdeaSeedsRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'url': value['url'],
        'lang': value['lang'],
        'videoId': value['videoId'],
        'transcript': value['transcript'],
        'chunks': value['chunks'] == null ? undefined : ((value['chunks'] as Array<any>).map(TranscriptChunkToJSON)),
        'maxIdeas': value['maxIdeas'],
        'minOverall': value['minOverall'],
        'audienceLevel': value['audienceLevel'],
    };
}

