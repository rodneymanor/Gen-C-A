/* tslint:disable */
/* eslint-disable */
/**
 * Gen-C Scripts API
 * OpenAPI specification for key backend surfaces used by the dashboard. The documented endpoints power script CRUD flows in the dashboard and the YouTube idea seed generator. Responses follow the existing `{ success: ... }` envelope used by the legacy fetch helpers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ScriptPerformance } from './ScriptPerformance';
import {
    ScriptPerformanceFromJSON,
    ScriptPerformanceFromJSONTyped,
    ScriptPerformanceToJSON,
    ScriptPerformanceToJSONTyped,
} from './ScriptPerformance';
import type { ScriptVoice } from './ScriptVoice';
import {
    ScriptVoiceFromJSON,
    ScriptVoiceFromJSONTyped,
    ScriptVoiceToJSON,
    ScriptVoiceToJSONTyped,
} from './ScriptVoice';

/**
 * Script document persisted in Firestore.
 * @export
 * @interface Script
 */
export interface Script {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    authors?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    status?: ScriptStatusEnum;
    /**
     * 
     * @type {ScriptPerformance}
     * @memberof Script
     */
    performance?: ScriptPerformance;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    viewedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    duration?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Script
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    fileType?: ScriptFileTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    summary?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    approach?: ScriptApproachEnum;
    /**
     * 
     * @type {ScriptVoice}
     * @memberof Script
     */
    voice?: ScriptVoice;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    originalIdea?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    targetLength?: string;
    /**
     * 
     * @type {number}
     * @memberof Script
     */
    wordCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Script
     */
    characterCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    scheduledDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    platform?: ScriptPlatformEnum;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    publishedUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Script
     */
    isThread?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Script
     */
    threadParts?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Script
     */
    elements?: { [key: string]: any; };
}


/**
 * @export
 */
export const ScriptStatusEnum = {
    Draft: 'draft',
    Published: 'published',
    Scheduled: 'scheduled',
    Sent: 'sent'
} as const;
export type ScriptStatusEnum = typeof ScriptStatusEnum[keyof typeof ScriptStatusEnum];

/**
 * @export
 */
export const ScriptFileTypeEnum = {
    Script: 'Script',
    Template: 'Template'
} as const;
export type ScriptFileTypeEnum = typeof ScriptFileTypeEnum[keyof typeof ScriptFileTypeEnum];

/**
 * @export
 */
export const ScriptApproachEnum = {
    SpeedWrite: 'speed-write',
    Educational: 'educational',
    AiVoice: 'ai-voice'
} as const;
export type ScriptApproachEnum = typeof ScriptApproachEnum[keyof typeof ScriptApproachEnum];

/**
 * @export
 */
export const ScriptPlatformEnum = {
    Tiktok: 'tiktok',
    Instagram: 'instagram',
    Youtube: 'youtube'
} as const;
export type ScriptPlatformEnum = typeof ScriptPlatformEnum[keyof typeof ScriptPlatformEnum];


/**
 * Check if a given object implements the Script interface.
 */
export function instanceOfScript(value: object): value is Script {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ScriptFromJSON(json: any): Script {
    return ScriptFromJSONTyped(json, false);
}

export function ScriptFromJSONTyped(json: any, ignoreDiscriminator: boolean): Script {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'id': json['id'],
        'title': json['title'],
        'content': json['content'],
        'authors': json['authors'] == null ? undefined : json['authors'],
        'status': json['status'] == null ? undefined : json['status'],
        'performance': json['performance'] == null ? undefined : ScriptPerformanceFromJSON(json['performance']),
        'category': json['category'] == null ? undefined : json['category'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'viewedAt': json['viewedAt'] == null ? undefined : json['viewedAt'],
        'duration': json['duration'] == null ? undefined : json['duration'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'fileType': json['fileType'] == null ? undefined : json['fileType'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'approach': json['approach'] == null ? undefined : json['approach'],
        'voice': json['voice'] == null ? undefined : ScriptVoiceFromJSON(json['voice']),
        'originalIdea': json['originalIdea'] == null ? undefined : json['originalIdea'],
        'targetLength': json['targetLength'] == null ? undefined : json['targetLength'],
        'wordCount': json['wordCount'] == null ? undefined : json['wordCount'],
        'characterCount': json['characterCount'] == null ? undefined : json['characterCount'],
        'source': json['source'] == null ? undefined : json['source'],
        'scheduledDate': json['scheduledDate'] == null ? undefined : json['scheduledDate'],
        'platform': json['platform'] == null ? undefined : json['platform'],
        'publishedUrl': json['publishedUrl'] == null ? undefined : json['publishedUrl'],
        'isThread': json['isThread'] == null ? undefined : json['isThread'],
        'threadParts': json['threadParts'] == null ? undefined : json['threadParts'],
        'elements': json['elements'] == null ? undefined : json['elements'],
    };
}

export function ScriptToJSON(json: any): Script {
    return ScriptToJSONTyped(json, false);
}

export function ScriptToJSONTyped(value?: Script | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'id': value['id'],
        'title': value['title'],
        'content': value['content'],
        'authors': value['authors'],
        'status': value['status'],
        'performance': ScriptPerformanceToJSON(value['performance']),
        'category': value['category'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
        'viewedAt': value['viewedAt'],
        'duration': value['duration'],
        'tags': value['tags'],
        'fileType': value['fileType'],
        'summary': value['summary'],
        'userId': value['userId'],
        'approach': value['approach'],
        'voice': ScriptVoiceToJSON(value['voice']),
        'originalIdea': value['originalIdea'],
        'targetLength': value['targetLength'],
        'wordCount': value['wordCount'],
        'characterCount': value['characterCount'],
        'source': value['source'],
        'scheduledDate': value['scheduledDate'],
        'platform': value['platform'],
        'publishedUrl': value['publishedUrl'],
        'isThread': value['isThread'],
        'threadParts': value['threadParts'],
        'elements': value['elements'],
    };
}

