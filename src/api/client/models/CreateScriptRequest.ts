/* tslint:disable */
/* eslint-disable */
/**
 * Gen-C Scripts API
 * OpenAPI specification for key backend surfaces used by the dashboard. The documented endpoints power script CRUD flows in the dashboard and the YouTube idea seed generator. Responses follow the existing `{ success: ... }` envelope used by the legacy fetch helpers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ScriptVoice } from './ScriptVoice';
import {
    ScriptVoiceFromJSON,
    ScriptVoiceFromJSONTyped,
    ScriptVoiceToJSON,
    ScriptVoiceToJSONTyped,
} from './ScriptVoice';

/**
 * 
 * @export
 * @interface CreateScriptRequest
 */
export interface CreateScriptRequest {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    category?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateScriptRequest
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    summary?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    approach: CreateScriptRequestApproachEnum;
    /**
     * 
     * @type {ScriptVoice}
     * @memberof CreateScriptRequest
     */
    voice?: ScriptVoice;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    originalIdea?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    targetLength?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    scheduledDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    platform?: CreateScriptRequestPlatformEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateScriptRequest
     */
    status?: CreateScriptRequestStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateScriptRequest
     */
    isThread?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateScriptRequest
     */
    threadParts?: Array<string>;
}


/**
 * @export
 */
export const CreateScriptRequestApproachEnum = {
    SpeedWrite: 'speed-write',
    Educational: 'educational',
    AiVoice: 'ai-voice'
} as const;
export type CreateScriptRequestApproachEnum = typeof CreateScriptRequestApproachEnum[keyof typeof CreateScriptRequestApproachEnum];

/**
 * @export
 */
export const CreateScriptRequestPlatformEnum = {
    Tiktok: 'tiktok',
    Instagram: 'instagram',
    Youtube: 'youtube'
} as const;
export type CreateScriptRequestPlatformEnum = typeof CreateScriptRequestPlatformEnum[keyof typeof CreateScriptRequestPlatformEnum];

/**
 * @export
 */
export const CreateScriptRequestStatusEnum = {
    Draft: 'draft',
    Scheduled: 'scheduled',
    Sent: 'sent'
} as const;
export type CreateScriptRequestStatusEnum = typeof CreateScriptRequestStatusEnum[keyof typeof CreateScriptRequestStatusEnum];


/**
 * Check if a given object implements the CreateScriptRequest interface.
 */
export function instanceOfCreateScriptRequest(value: object): value is CreateScriptRequest {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('approach' in value) || value['approach'] === undefined) return false;
    return true;
}

export function CreateScriptRequestFromJSON(json: any): CreateScriptRequest {
    return CreateScriptRequestFromJSONTyped(json, false);
}

export function CreateScriptRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateScriptRequest {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'title': json['title'],
        'content': json['content'],
        'category': json['category'] == null ? undefined : json['category'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'approach': json['approach'],
        'voice': json['voice'] == null ? undefined : ScriptVoiceFromJSON(json['voice']),
        'originalIdea': json['originalIdea'] == null ? undefined : json['originalIdea'],
        'targetLength': json['targetLength'] == null ? undefined : json['targetLength'],
        'source': json['source'] == null ? undefined : json['source'],
        'scheduledDate': json['scheduledDate'] == null ? undefined : json['scheduledDate'],
        'platform': json['platform'] == null ? undefined : json['platform'],
        'status': json['status'] == null ? undefined : json['status'],
        'isThread': json['isThread'] == null ? undefined : json['isThread'],
        'threadParts': json['threadParts'] == null ? undefined : json['threadParts'],
    };
}

export function CreateScriptRequestToJSON(json: any): CreateScriptRequest {
    return CreateScriptRequestToJSONTyped(json, false);
}

export function CreateScriptRequestToJSONTyped(value?: CreateScriptRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'title': value['title'],
        'content': value['content'],
        'category': value['category'],
        'tags': value['tags'],
        'summary': value['summary'],
        'approach': value['approach'],
        'voice': ScriptVoiceToJSON(value['voice']),
        'originalIdea': value['originalIdea'],
        'targetLength': value['targetLength'],
        'source': value['source'],
        'scheduledDate': value['scheduledDate'],
        'platform': value['platform'],
        'status': value['status'],
        'isThread': value['isThread'],
        'threadParts': value['threadParts'],
    };
}

