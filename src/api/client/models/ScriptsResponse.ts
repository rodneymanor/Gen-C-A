/* tslint:disable */
/* eslint-disable */
/**
 * Gen-C Scripts API
 * OpenAPI specification for key backend surfaces used by the dashboard. The documented endpoints power script CRUD flows in the dashboard and the YouTube idea seed generator. Responses follow the existing `{ success: ... }` envelope used by the legacy fetch helpers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Script } from './Script';
import {
    ScriptFromJSON,
    ScriptFromJSONTyped,
    ScriptToJSON,
    ScriptToJSONTyped,
} from './Script';

/**
 * 
 * @export
 * @interface ScriptsResponse
 */
export interface ScriptsResponse {
    [key: string]: any | any;
    /**
     * 
     * @type {boolean}
     * @memberof ScriptsResponse
     */
    success: boolean;
    /**
     * 
     * @type {Array<Script>}
     * @memberof ScriptsResponse
     */
    scripts?: Array<Script>;
}

/**
 * Check if a given object implements the ScriptsResponse interface.
 */
export function instanceOfScriptsResponse(value: object): value is ScriptsResponse {
    if (!('success' in value) || value['success'] === undefined) return false;
    return true;
}

export function ScriptsResponseFromJSON(json: any): ScriptsResponse {
    return ScriptsResponseFromJSONTyped(json, false);
}

export function ScriptsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScriptsResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'success': json['success'],
        'scripts': json['scripts'] == null ? undefined : ((json['scripts'] as Array<any>).map(ScriptFromJSON)),
    };
}

export function ScriptsResponseToJSON(json: any): ScriptsResponse {
    return ScriptsResponseToJSONTyped(json, false);
}

export function ScriptsResponseToJSONTyped(value?: ScriptsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'success': value['success'],
        'scripts': value['scripts'] == null ? undefined : ((value['scripts'] as Array<any>).map(ScriptToJSON)),
    };
}

