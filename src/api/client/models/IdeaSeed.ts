/* tslint:disable */
/* eslint-disable */
/**
 * Gen-C Scripts API
 * OpenAPI specification for key backend surfaces used by the dashboard. The documented endpoints power script CRUD flows in the dashboard and the YouTube idea seed generator. Responses follow the existing `{ success: ... }` envelope used by the legacy fetch helpers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdeaSeedScores } from './IdeaSeedScores';
import {
    IdeaSeedScoresFromJSON,
    IdeaSeedScoresFromJSONTyped,
    IdeaSeedScoresToJSON,
    IdeaSeedScoresToJSONTyped,
} from './IdeaSeedScores';
import type { IdeaSeedProof } from './IdeaSeedProof';
import {
    IdeaSeedProofFromJSON,
    IdeaSeedProofFromJSONTyped,
    IdeaSeedProofToJSON,
    IdeaSeedProofToJSONTyped,
} from './IdeaSeedProof';
import type { IdeaSeedProvenance } from './IdeaSeedProvenance';
import {
    IdeaSeedProvenanceFromJSON,
    IdeaSeedProvenanceFromJSONTyped,
    IdeaSeedProvenanceToJSON,
    IdeaSeedProvenanceToJSONTyped,
} from './IdeaSeedProvenance';
import type { IdeaSeedCta } from './IdeaSeedCta';
import {
    IdeaSeedCtaFromJSON,
    IdeaSeedCtaFromJSONTyped,
    IdeaSeedCtaToJSON,
    IdeaSeedCtaToJSONTyped,
} from './IdeaSeedCta';

/**
 * 
 * @export
 * @interface IdeaSeed
 */
export interface IdeaSeed {
    [key: string]: any | any;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    coreClaim: string;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    payoff: string;
    /**
     * 
     * @type {IdeaSeedProof}
     * @memberof IdeaSeed
     */
    proof: IdeaSeedProof;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdeaSeed
     */
    mechanismOrSteps?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    angle: IdeaSeedAngleEnum;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    painPoint?: string;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    reasonToBelieve?: string;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    promise?: string;
    /**
     * 
     * @type {IdeaSeedCta}
     * @memberof IdeaSeed
     */
    cta: IdeaSeedCta;
    /**
     * 
     * @type {Array<string>}
     * @memberof IdeaSeed
     */
    entities?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IdeaSeed
     */
    audienceLevel?: IdeaSeedAudienceLevelEnum;
    /**
     * 
     * @type {IdeaSeedProvenance}
     * @memberof IdeaSeed
     */
    provenance: IdeaSeedProvenance;
    /**
     * 
     * @type {IdeaSeedScores}
     * @memberof IdeaSeed
     */
    scores: IdeaSeedScores;
}


/**
 * @export
 */
export const IdeaSeedAngleEnum = {
    Question: 'question',
    Contrarian: 'contrarian',
    StatShock: 'stat_shock',
    Mistake: 'mistake',
    Myth: 'myth',
    Story: 'story'
} as const;
export type IdeaSeedAngleEnum = typeof IdeaSeedAngleEnum[keyof typeof IdeaSeedAngleEnum];

/**
 * @export
 */
export const IdeaSeedAudienceLevelEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type IdeaSeedAudienceLevelEnum = typeof IdeaSeedAudienceLevelEnum[keyof typeof IdeaSeedAudienceLevelEnum];


/**
 * Check if a given object implements the IdeaSeed interface.
 */
export function instanceOfIdeaSeed(value: object): value is IdeaSeed {
    if (!('coreClaim' in value) || value['coreClaim'] === undefined) return false;
    if (!('payoff' in value) || value['payoff'] === undefined) return false;
    if (!('proof' in value) || value['proof'] === undefined) return false;
    if (!('angle' in value) || value['angle'] === undefined) return false;
    if (!('cta' in value) || value['cta'] === undefined) return false;
    if (!('provenance' in value) || value['provenance'] === undefined) return false;
    if (!('scores' in value) || value['scores'] === undefined) return false;
    return true;
}

export function IdeaSeedFromJSON(json: any): IdeaSeed {
    return IdeaSeedFromJSONTyped(json, false);
}

export function IdeaSeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdeaSeed {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'coreClaim': json['coreClaim'],
        'payoff': json['payoff'],
        'proof': IdeaSeedProofFromJSON(json['proof']),
        'mechanismOrSteps': json['mechanismOrSteps'] == null ? undefined : json['mechanismOrSteps'],
        'angle': json['angle'],
        'painPoint': json['painPoint'] == null ? undefined : json['painPoint'],
        'reasonToBelieve': json['reasonToBelieve'] == null ? undefined : json['reasonToBelieve'],
        'context': json['context'] == null ? undefined : json['context'],
        'promise': json['promise'] == null ? undefined : json['promise'],
        'cta': IdeaSeedCtaFromJSON(json['cta']),
        'entities': json['entities'] == null ? undefined : json['entities'],
        'audienceLevel': json['audienceLevel'] == null ? undefined : json['audienceLevel'],
        'provenance': IdeaSeedProvenanceFromJSON(json['provenance']),
        'scores': IdeaSeedScoresFromJSON(json['scores']),
    };
}

export function IdeaSeedToJSON(json: any): IdeaSeed {
    return IdeaSeedToJSONTyped(json, false);
}

export function IdeaSeedToJSONTyped(value?: IdeaSeed | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'coreClaim': value['coreClaim'],
        'payoff': value['payoff'],
        'proof': IdeaSeedProofToJSON(value['proof']),
        'mechanismOrSteps': value['mechanismOrSteps'],
        'angle': value['angle'],
        'painPoint': value['painPoint'],
        'reasonToBelieve': value['reasonToBelieve'],
        'context': value['context'],
        'promise': value['promise'],
        'cta': IdeaSeedCtaToJSON(value['cta']),
        'entities': value['entities'],
        'audienceLevel': value['audienceLevel'],
        'provenance': IdeaSeedProvenanceToJSON(value['provenance']),
        'scores': IdeaSeedScoresToJSON(value['scores']),
    };
}

