/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/notes": {
    /** List notes for the authenticated user. */
    get: {
      responses: {
        /** @description Notes fetched successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["NotesResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Create a note for the authenticated user. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateNoteRequest"];
        };
      };
      responses: {
        /** @description Note created successfully. */
        201: {
          content: {
            "application/json": components["schemas"]["NoteResponse"];
          };
        };
        /** @description Invalid payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/notes/{id}": {
    /** Fetch a note by id. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Note returned. */
        200: {
          content: {
            "application/json": components["schemas"]["NoteResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Note not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update a note by id. */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateNoteRequest"];
        };
      };
      responses: {
        /** @description Note updated. */
        200: {
          content: {
            "application/json": components["schemas"]["NoteResponse"];
          };
        };
        /** @description Invalid update payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Note not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a note by id. */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Note deleted. */
        200: {
          content: {
            "application/json": components["schemas"]["BasicSuccessResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Note not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/api/collections": {
    /** List collections for the authenticated user. */
    get: {
      responses: {
        /** @description Collections fetched successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionsResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/collections/move-video": {
    /** Move a video between collections. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MoveVideoRequest"];
        };
      };
      responses: {
        /** @description Video moved. */
        200: {
          content: {
            "application/json": components["schemas"]["BasicSuccessResponse"];
          };
        };
        /** @description Invalid payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/collections/copy-video": {
    /** Copy a video to another collection. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CopyVideoRequest"];
        };
      };
      responses: {
        /** @description Video copied. */
        200: {
          content: {
            "application/json": components["schemas"]["BasicSuccessResponse"];
          };
        };
        /** @description Invalid payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/collections/update": {
    /** Update a collection's metadata. */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateCollectionRequest"];
        };
      };
      responses: {
        /** @description Collection updated. */
        200: {
          content: {
            "application/json": components["schemas"]["BasicSuccessResponse"];
          };
        };
        /** @description Invalid payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/collections/delete": {
    /** Delete a collection by id. */
    delete: {
      parameters: {
        query: {
          id: string;
        };
      };
      responses: {
        /** @description Collection deleted. */
        200: {
          content: {
            "application/json": components["schemas"]["BasicSuccessResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/videos/collection": {
    /** List videos for a collection. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            collectionId?: string;
            videoLimit?: number;
            lastDocId?: string;
            [key: string]: unknown;
          };
        };
      };
      responses: {
        /** @description Videos returned. */
        200: {
          content: {
            "application/json": components["schemas"]["VideosResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/videos/add-to-collection": {
    /** Add a processed video to a collection. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AddVideoToCollectionRequest"];
        };
      };
      responses: {
        /** @description Video added. */
        200: {
          content: {
            "application/json": {
              /** @enum {boolean} */
              success?: true;
              videoId?: string;
              [key: string]: unknown;
            };
          };
        };
        /** @description Invalid payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/scripts": {
    /** List scripts for the authenticated user. */
    get: {
      responses: {
        /** @description Scripts fetched successfully. */
        200: {
          content: {
            "application/json": components["schemas"]["ScriptsResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Firestore unavailable. */
        503: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Create a script for the authenticated user. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateScriptRequest"];
        };
      };
      responses: {
        /** @description Script created. */
        200: {
          content: {
            "application/json": components["schemas"]["ScriptResponse"];
          };
        };
        /** @description Invalid request payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Firestore unavailable. */
        503: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/scripts/{id}": {
    /** Fetch a script by id. */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Script returned. */
        200: {
          content: {
            "application/json": components["schemas"]["ScriptResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Script belongs to another user. */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Script not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update a script. */
    put: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateScriptRequest"];
        };
      };
      responses: {
        /** @description Script updated. */
        200: {
          content: {
            "application/json": components["schemas"]["ScriptResponse"];
          };
        };
        /** @description Invalid update payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Script belongs to another user. */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Script not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete a script. */
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Script deleted. */
        200: {
          content: {
            "application/json": components["schemas"]["BasicSuccessResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Script belongs to another user. */
        403: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Script not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/api/scripts/youtube-ideas": {
    /** Generate YouTube idea seeds from a transcript. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["GenerateIdeaSeedsRequest"];
        };
      };
      responses: {
        /** @description Idea seeds generated. */
        200: {
          content: {
            "application/json": components["schemas"]["GenerateIdeaSeedsResponse"];
          };
        };
        /** @description Invalid payload or transcript. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Authentication required. */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Downstream model failure. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Service unavailable (e.g., missing Gemini key). */
        503: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/video/transcribe-from-url": {
    /** Transcribe a video from a platform URL. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["TranscribeFromUrlRequest"];
        };
      };
      responses: {
        /** @description Transcript generated. */
        200: {
          content: {
            "application/json": components["schemas"]["TranscribeFromUrlResponse"];
          };
        };
        /** @description Invalid or missing URL. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream fetch/model error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/video/orchestrate": {
    /** Orchestrate scrape → transcribe → persist workflow. */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["OrchestrateRequest"];
        };
      };
      responses: {
        /** @description Orchestration completed (or job accepted). */
        200: {
          content: {
            "application/json": components["schemas"]["OrchestrateResponse"];
          };
        };
        /** @description Invalid payload. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/video/scrape-url": {
    /** Resolve a public video URL to downloadable media. */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: uri */
            url: string;
            preferAudioOnly?: boolean;
            [key: string]: unknown;
          };
        };
      };
      responses: {
        /** @description Media resolved. */
        200: {
          content: {
            "application/json": {
              /** @enum {boolean} */
              success: true;
              result?: {
                /** Format: uri */
                downloadUrl?: string;
                /** Format: uri */
                audioUrl?: string;
                /** Format: uri */
                thumbnailUrl?: string;
                title?: string;
                description?: string;
                author?: string;
                duration?: number;
                /** @enum {string} */
                platform?: "tiktok" | "instagram";
                [key: string]: unknown;
              };
              [key: string]: unknown;
            };
          };
        };
        /** @description Invalid or unsupported URL. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream scraping error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/instagram/user-id": {
    /** Resolve Instagram user ID by username. */
    get: {
      parameters: {
        query: {
          username: string;
        };
      };
      responses: {
        /** @description User ID resolved. */
        200: {
          content: {
            "application/json": components["schemas"]["InstagramUserIdResponse"];
          };
        };
        /** @description Missing or invalid username. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description User not found. */
        404: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream API error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/instagram/user-reels": {
    /** Fetch Instagram reels for a user. */
    get: {
      parameters: {
        query: {
          user_id: string | number;
          username?: string;
          count?: number;
          include_feed_video?: boolean;
        };
      };
      responses: {
        /** @description Reels fetched. */
        200: {
          content: {
            "application/json": components["schemas"]["InstagramReelsResponse"];
          };
        };
        /** @description Invalid parameters. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream API error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Fetch Instagram reels for a user (JSON body variant). */
    post: {
      requestBody: {
        content: {
          "application/json": {
            userId: string | number;
            username?: string;
            count?: number;
            includeFeedVideo?: boolean;
            [key: string]: unknown;
          };
        };
      };
      responses: {
        /** @description Reels fetched. */
        200: {
          content: {
            "application/json": components["schemas"]["InstagramReelsResponse"];
          };
        };
        /** @description Invalid parameters. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream API error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/api/tiktok/user-feed": {
    /** Fetch TikTok user feed by username. */
    get: {
      parameters: {
        query: {
          username: string;
          count?: number;
        };
      };
      responses: {
        /** @description User feed returned. */
        200: {
          content: {
            "application/json": components["schemas"]["TikTokUserFeedResponse"];
          };
        };
        /** @description Missing or invalid parameters. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream API error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
    /** Fetch TikTok user feed (JSON body variant). */
    post: {
      requestBody: {
        content: {
          "application/json": {
            username: string;
            count?: number;
            [key: string]: unknown;
          };
        };
      };
      responses: {
        /** @description User feed returned. */
        200: {
          content: {
            "application/json": components["schemas"]["TikTokUserFeedResponse"];
          };
        };
        /** @description Missing or invalid parameters. */
        400: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
        /** @description Upstream API error. */
        502: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Note: {
      id: string;
      title: string;
      content: string;
      tags?: string[];
      starred?: boolean;
      userId?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      [key: string]: unknown;
    };
    NotesResponse: {
      /** @enum {boolean} */
      success: true;
      notes?: components["schemas"]["Note"][];
      [key: string]: unknown;
    };
    NoteResponse: {
      /** @enum {boolean} */
      success: true;
      note?: components["schemas"]["Note"];
      [key: string]: unknown;
    };
    CreateNoteRequest: {
      title: string;
      content: string;
      tags?: string[];
      starred?: boolean;
      [key: string]: unknown;
    };
    UpdateNoteRequest: {
      title?: string;
      content?: string;
      tags?: string[];
      starred?: boolean;
      [key: string]: unknown;
    };
    Collection: {
      id: string;
      title: string;
      description?: string;
      userId: string;
      videoCount?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      [key: string]: unknown;
    };
    CollectionsResponse: {
      /** @enum {boolean} */
      success: true;
      collections?: components["schemas"]["Collection"][];
      [key: string]: unknown;
    };
    MoveVideoRequest: {
      videoId: string;
      fromCollectionId?: string;
      toCollectionId: string;
    };
    CopyVideoRequest: {
      videoId: string;
      fromCollectionId?: string;
      toCollectionId: string;
    };
    UpdateCollectionRequest: {
      id?: string;
      title?: string;
      description?: string;
      [key: string]: unknown;
    };
    VideosResponse: {
      /** @enum {boolean} */
      success: true;
      videos: {
          [key: string]: unknown;
        }[];
      totalCount?: number;
      lastDocId?: string;
      [key: string]: unknown;
    };
    AddVideoToCollectionRequest: {
      userId: string;
      collectionId: string;
      videoData: {
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    /** @description Script document persisted in Firestore. */
    Script: {
      id: string;
      title: string;
      content: string;
      authors?: string;
      /** @enum {string} */
      status?: "draft" | "published" | "scheduled" | "sent";
      performance?: {
        views?: number;
        engagement?: number;
      };
      category?: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: date-time */
      viewedAt?: string;
      duration?: string;
      tags?: string[];
      /** @enum {string} */
      fileType?: "Script" | "Template";
      summary?: string;
      userId?: string;
      /** @enum {string} */
      approach?: "speed-write" | "educational" | "ai-voice";
      voice?: components["schemas"]["ScriptVoice"];
      originalIdea?: string;
      targetLength?: string;
      wordCount?: number;
      characterCount?: number;
      source?: string;
      /** Format: date-time */
      scheduledDate?: string;
      /** @enum {string} */
      platform?: "tiktok" | "instagram" | "youtube";
      /** Format: uri */
      publishedUrl?: string;
      isThread?: boolean;
      threadParts?: string[];
      elements?: {
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    ScriptVoice: {
      id?: string;
      name?: string;
      badges?: string[];
      [key: string]: unknown;
    };
    CreateScriptRequest: {
      title: string;
      content: string;
      category?: string;
      tags?: string[];
      summary?: string;
      /** @enum {string} */
      approach: "speed-write" | "educational" | "ai-voice";
      voice?: components["schemas"]["ScriptVoice"];
      originalIdea?: string;
      targetLength?: string;
      source?: string;
      /** Format: date-time */
      scheduledDate?: string;
      /** @enum {string} */
      platform?: "tiktok" | "instagram" | "youtube";
      /** @enum {string} */
      status?: "draft" | "scheduled" | "sent";
      isThread?: boolean;
      threadParts?: string[];
      [key: string]: unknown;
    };
    UpdateScriptRequest: {
      title?: string;
      content?: string;
      category?: string;
      tags?: string[];
      summary?: string;
      /** @enum {string} */
      status?: "draft" | "published" | "scheduled" | "sent";
      /** Format: date-time */
      scheduledDate?: string;
      /** @enum {string} */
      platform?: "tiktok" | "instagram" | "youtube";
      /** Format: uri */
      publishedUrl?: string;
      isThread?: boolean;
      threadParts?: string[];
      [key: string]: unknown;
    };
    ErrorResponse: {
      /** @enum {boolean} */
      success: false;
      error: string;
      /** @description Optional debug payload returned for internal errors. */
      debug?: Record<string, never>;
      [key: string]: unknown;
    };
    ScriptsResponse: {
      /** @enum {boolean} */
      success: true;
      scripts?: components["schemas"]["Script"][];
      [key: string]: unknown;
    };
    ScriptResponse: {
      /** @enum {boolean} */
      success: true;
      script?: components["schemas"]["Script"];
      [key: string]: unknown;
    };
    BasicSuccessResponse: {
      /** @enum {boolean} */
      success: true;
      [key: string]: unknown;
    };
    TranscribeFromUrlRequest: {
      /** Format: uri */
      videoUrl: string;
      /** @enum {string} */
      platform?: "tiktok" | "instagram" | "youtube";
      preferAudioOnly?: boolean;
      [key: string]: unknown;
    };
    TranscribeFromUrlResponse: {
      /** @enum {boolean} */
      success: true;
      transcript?: string;
      meta?: {
        duration?: number;
        author?: string;
        title?: string;
        /** @enum {string} */
        platform?: "tiktok" | "instagram" | "youtube";
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    OrchestrateRequest: {
      /** Format: uri */
      url: string;
      collectionId?: string;
      options?: {
        transcribe?: boolean;
        preferAudioOnly?: boolean;
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    OrchestrateResponse: {
      /** @enum {boolean} */
      success: true;
      videoId?: string;
      transcript?: string;
      jobId?: string;
      [key: string]: unknown;
    };
    TikTokUserInfo: {
      id?: string;
      username?: string;
      nickname?: string;
      /** Format: uri */
      avatar?: string;
      verified?: boolean;
      signature?: string;
      stats?: {
        followingCount?: number;
        followerCount?: number;
        heartCount?: number;
        videoCount?: number;
        diggCount?: number;
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    TikTokVideo: {
      id?: string;
      description?: string;
      createTime?: number;
      duration?: number;
      /** Format: uri */
      cover?: string;
      /** Format: uri */
      playUrl?: string;
      /** Format: uri */
      downloadUrl?: string;
      stats?: {
        diggCount?: number;
        shareCount?: number;
        commentCount?: number;
        playCount?: number;
        collectCount?: number;
        [key: string]: unknown;
      };
      music?: {
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    TikTokUserFeedResponse: {
      /** @enum {boolean} */
      success: true;
      userInfo?: components["schemas"]["TikTokUserInfo"];
      videos?: components["schemas"]["TikTokVideo"][];
      metadata?: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      timestamp?: string;
      [key: string]: unknown;
    };
    InstagramUserIdResponse: {
      /** @enum {boolean} */
      success: true;
      user_id: string | number;
      username: string;
      [key: string]: unknown;
    };
    InstagramProcessedVideo: {
      id?: string;
      /** @enum {string} */
      platform?: "instagram";
      /** Format: uri */
      videoUrl?: string;
      /** Format: uri */
      downloadUrl?: string;
      /** Format: uri */
      playUrl?: string;
      /** Format: uri */
      thumbnailUrl?: string;
      viewCount?: number;
      likeCount?: number;
      quality?: string;
      title?: string;
      description?: string;
      author?: string;
      duration?: number;
      [key: string]: unknown;
    };
    InstagramProfileData: {
      /** Format: uri */
      profileImageUrl?: string;
      displayName?: string;
      bio?: string;
      followersCount?: number;
      followingCount?: number;
      postsCount?: number;
      isVerified?: boolean;
      isPrivate?: boolean;
      /** Format: uri */
      externalUrl?: string;
      category?: string;
      [key: string]: unknown;
    };
    InstagramReelsResponse: {
      /** @enum {boolean} */
      success: true;
      status?: string;
      data?: {
        items?: {
            [key: string]: unknown;
          }[];
        [key: string]: unknown;
      };
      processed?: {
        videos?: components["schemas"]["InstagramProcessedVideo"][];
        profileData?: components["schemas"]["InstagramProfileData"];
        totalFound?: number;
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
    TranscriptChunk: {
      text: string;
      start?: number;
      end?: number;
      timestamp?: number[];
      [key: string]: unknown;
    };
    IdeaSeed: {
      coreClaim: string;
      payoff: string;
      proof: {
        /** @enum {string} */
        type: "stat" | "example" | "quote" | "demo";
        text: string;
        numbers?: string;
      };
      mechanismOrSteps?: string[];
      /** @enum {string} */
      angle: "question" | "contrarian" | "stat_shock" | "mistake" | "myth" | "story";
      painPoint?: string;
      reasonToBelieve?: string;
      context?: string;
      promise?: string;
      cta: {
        /** @enum {string} */
        type: "comment" | "watch_full" | "subscribe" | "download" | "signup" | "follow" | "buy";
        prompt: string;
        target?: OneOf<[string, {
          videoTs: number;
        }]>;
      };
      entities?: string[];
      /** @enum {string} */
      audienceLevel?: "beginner" | "intermediate" | "advanced";
      provenance: {
        startSec: number;
        endSec: number;
      };
      scores: {
        hookPotential: number;
        specificity: number;
        actionability: number;
        novelty: number;
        overall: number;
      };
      [key: string]: unknown;
    };
    GenerateIdeaSeedsRequest: {
      /** Format: uri */
      url?: string;
      lang?: string;
      videoId?: string;
      transcript?: string;
      chunks?: components["schemas"]["TranscriptChunk"][];
      maxIdeas?: number;
      minOverall?: number;
      /** @enum {string} */
      audienceLevel?: "beginner" | "intermediate" | "advanced";
      [key: string]: unknown;
    };
    GenerateIdeaSeedsResponse: {
      /** @enum {boolean} */
      success: true;
      ideas: components["schemas"]["IdeaSeed"][];
      meta?: {
        model?: string;
        durationMs?: number;
        maxIdeas?: number;
        minOverall?: number;
        audienceLevel?: string;
        transcriptChars?: number;
        [key: string]: unknown;
      };
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
