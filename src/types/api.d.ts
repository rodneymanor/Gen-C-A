/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/api/scripts": {
    get: {
      responses: {
        200: { content: { "application/json": components["schemas"]["ScriptsResponse"] } };
        401: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        503: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
      };
    };
    post: {
      requestBody: { content: { "application/json": components["schemas"]["CreateScriptRequest"] } };
      responses: {
        200: { content: { "application/json": components["schemas"]["ScriptResponse"] } };
        400: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        401: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        503: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
      };
    };
  };
  "/api/scripts/{id}": {
    parameters: { path: { id: string } };
    get: {
      parameters: { path: { id: string } };
      responses: {
        200: { content: { "application/json": components["schemas"]["ScriptResponse"] } };
        401: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        403: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        404: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
      };
    };
    put: {
      parameters: { path: { id: string } };
      requestBody: { content: { "application/json": components["schemas"]["UpdateScriptRequest"] } };
      responses: {
        200: { content: { "application/json": components["schemas"]["ScriptResponse"] } };
        400: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        401: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        403: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        404: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
      };
    };
    delete: {
      parameters: { path: { id: string } };
      responses: {
        200: { content: { "application/json": components["schemas"]["BasicSuccessResponse"] } };
        401: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        403: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        404: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
      };
    };
  };
  "/api/scripts/youtube-ideas": {
    post: {
      requestBody: { content: { "application/json": components["schemas"]["GenerateIdeaSeedsRequest"] } };
      responses: {
        200: { content: { "application/json": components["schemas"]["GenerateIdeaSeedsResponse"] } };
        400: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        401: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        502: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
        503: { content: { "application/json": components["schemas"]["ErrorResponse"] } };
      };
    };
  };
}

export interface components {
  schemas: {
    Script: {
      id: string;
      title: string;
      content: string;
      authors?: string;
      status?: "draft" | "published" | "scheduled" | "sent";
      performance?: { views?: number; engagement?: number };
      category?: string;
      createdAt: string;
      updatedAt: string;
      viewedAt?: string;
      duration?: string;
      tags?: string[];
      fileType?: "Script" | "Template";
      summary?: string;
      userId?: string;
      approach?: "speed-write" | "educational" | "ai-voice";
      voice?: { id?: string; name?: string; badges?: string[]; [k: string]: unknown };
      originalIdea?: string;
      targetLength?: string;
      wordCount?: number;
      characterCount?: number;
      source?: string;
      scheduledDate?: string;
      platform?: "tiktok" | "instagram" | "youtube";
      publishedUrl?: string;
      isThread?: boolean;
      threadParts?: string[];
      elements?: { [k: string]: unknown };
      [k: string]: unknown;
    };
    CreateScriptRequest: {
      title: string;
      content: string;
      category?: string;
      tags?: string[];
      summary?: string;
      approach: "speed-write" | "educational" | "ai-voice";
      voice?: components["schemas"]["Script"]["voice"];
      originalIdea?: string;
      targetLength?: string;
      source?: string;
      scheduledDate?: string;
      platform?: "tiktok" | "instagram" | "youtube";
      status?: "draft" | "scheduled" | "sent";
      isThread?: boolean;
      threadParts?: string[];
      [k: string]: unknown;
    };
    UpdateScriptRequest: {
      title?: string;
      content?: string;
      category?: string;
      tags?: string[];
      summary?: string;
      status?: "draft" | "published" | "scheduled" | "sent";
      scheduledDate?: string;
      platform?: "tiktok" | "instagram" | "youtube";
      publishedUrl?: string;
      isThread?: boolean;
      threadParts?: string[];
      [k: string]: unknown;
    };
    ErrorResponse: { success: false; error: string; debug?: Record<string, never>; [k: string]: unknown };
    ScriptsResponse: { success: true; scripts?: components["schemas"]["Script"][]; [k: string]: unknown };
    ScriptResponse: { success: true; script?: components["schemas"]["Script"]; [k: string]: unknown };
    BasicSuccessResponse: { success: true; [k: string]: unknown };
    TranscriptChunk: { text: string; start?: number; end?: number; timestamp?: number[]; [k: string]: unknown };
    IdeaSeed: {
      coreClaim: string;
      payoff: string;
      proof: { type: "stat" | "example" | "quote" | "demo"; text: string; numbers?: string };
      mechanismOrSteps?: string[];
      angle: "question" | "contrarian" | "stat_shock" | "mistake" | "myth" | "story";
      painPoint?: string;
      reasonToBelieve?: string;
      context?: string;
      promise?: string;
      cta: { type: "comment" | "watch_full" | "subscribe" | "download" | "signup" | "follow" | "buy"; prompt: string; target?: OneOf<[string, { videoTs: number }]> };
      entities?: string[];
      audienceLevel?: "beginner" | "intermediate" | "advanced";
      provenance: { startSec: number; endSec: number };
      scores: { hookPotential: number; specificity: number; actionability: number; novelty: number; overall: number };
      [k: string]: unknown;
    };
    GenerateIdeaSeedsRequest: {
      url?: string;
      lang?: string;
      videoId?: string;
      transcript?: string;
      chunks?: components["schemas"]["TranscriptChunk"][];
      maxIdeas?: number;
      minOverall?: number;
      audienceLevel?: "beginner" | "intermediate" | "advanced";
      [k: string]: unknown;
    };
    GenerateIdeaSeedsResponse: {
      success: true;
      ideas: components["schemas"]["IdeaSeed"][];
      meta?: { model?: string; durationMs?: number; maxIdeas?: number; minOverall?: number; audienceLevel?: string; transcriptChars?: number; [k: string]: unknown };
      [k: string]: unknown;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type operations = Record<string, never>;
export type webhooks = Record<string, never>;
export type $defs = Record<string, never>;
export type external = Record<string, never>;

